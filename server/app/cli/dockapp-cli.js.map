{"version":3,"sources":["cli/dockapp-cli.js"],"names":[],"mappings":";;AAAA,IAAM,OAAO,QAAQ,MAAR,CAAb;;AAEA,IAAM,WAAW,WAAjB;AACA,IAAM,OAAO,IAAb;;AAEA,SAAS,YAAT,GAAwB;AACtB,OAAK,OAAL,CAAa;AACX,sBADW;AAEX,cAFW;AAGX,YAAQ,KAHG;AAIX,UAAM;AAJK,GAAb,EAMA,UAAC,GAAD,EAAS;AACP,QAAI,OAAO,EAAX;AACA,QAAI,EAAJ,CAAO,MAAP,EAAe,UAAC,KAAD,EAAW;AACxB,cAAQ,KAAR;AACD,KAFD;AAGA,QAAI,EAAJ,CAAO,KAAP,EAAc,YAAM;AAClB,UAAI,WAAJ,CAAgB,MAAhB;AACA,UAAM,WAAW,KAAK,KAAL,CAAW,IAAX,CAAjB;AAFkB;AAAA;AAAA;;AAAA;AAGlB,6BAAsB,SAAS,QAA/B,8HAAyC;AAAA,cAA9B,OAA8B;;AACvC,kBAAQ,GAAR,CAAY,QAAQ,EAApB;AACD;AALiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMnB,KAND;AAOD,GAlBD,EAkBG,GAlBH;AAmBD;;AAED,SAAS,YAAT,CAAsB,SAAtB,EAAiC;AAC/B,MAAM,WAAW,KAAK,SAAL,CAAe;AAC9B,YAAQ,OADsB;AAE9B,gBAAY,CAAC,SAAD;AAFkB,GAAf,CAAjB;;AAKA,MAAI,MAAM,KAAK,OAAL,CAAa;AACrB,sBADqB;AAErB,cAFqB;AAGrB,YAAQ,MAHa;AAIrB,UAAM,oBAJe;AAKrB,aAAS;AACP,sBAAgB,kBADT;AAEP,wBAAkB,OAAO,UAAP,CAAkB,QAAlB;AAFX;AALY,GAAb,EAUV,UAAC,GAAD,EAAS;AACP,QAAI,WAAJ,CAAgB,MAAhB;AACA,QAAI,OAAO,EAAX;AACA,QAAI,EAAJ,CAAO,MAAP,EAAe,UAAC,KAAD,EAAW;AACxB,cAAQ,KAAR;AACD,KAFD;AAGA,QAAI,EAAJ,CAAO,KAAP,EAAc,YAAM,CAEnB,CAFD;AAGD,GAnBS,CAAV;;AAqBA,MAAI,KAAJ,CAAU,QAAV;AACA,MAAI,GAAJ;;AAEA,UAAQ,GAAR,uBAAgC,SAAhC;AACD;;AAED,SAAS,WAAT,CAAqB,SAArB,EAAgC,CAE/B;;;AAGD,aAAa,uBAAb","file":"cli/dockapp-cli.js","sourcesContent":["const http = require('http');\n\nconst hostname = 'localhost';\nconst port = 8080;\n\nfunction listStations() {\n  http.request({\n    hostname,\n    port,\n    method: 'GET',\n    path: '/api/stations.json',\n  },\n  (res) => {\n    let body = '';\n    res.on('data', (chunk) => {\n      body += chunk;\n    });\n    res.on('end', () => {\n      res.setEncoding('utf8');\n      const response = JSON.parse(body);\n      for (const station of response.stations) {\n        console.log(station.id);\n      }\n    });\n  }).end();\n}\n\nfunction startStation(stationID) {\n  const postData = JSON.stringify({\n    action: 'start',\n    stationIDs: [stationID],\n  });\n\n  var req = http.request({\n    hostname,\n    port,\n    method: 'POST',\n    path: '/api/stations.json',\n    headers: {\n      'Content-Type': 'application/json',\n      'Content-Length': Buffer.byteLength(postData),\n    },\n  },\n  (res) => {\n    res.setEncoding('utf8');\n    let body = '';\n    res.on('data', (chunk) => {\n      body += chunk;\n    });\n    res.on('end', () => {\n\n    });\n  });\n\n  req.write(postData)\n  req.end();\n\n  console.log(`Starting station ${stationID}`);\n}\n\nfunction stopStation(stationID) {\n\n}\n\n// listStations();\nstartStation('station_interactive_1');\n\n// Interface\n// listStations\n//   - as list of IDs\n//   - as table (id, name, app)\n// startStations (<list of stations>)\n//   - if all, confirm\n//   - -y overrides confirmation\n//   - --wait // waits until done (might not be possible *1)\n// stopStations (<list of stations>)\n//   - if all, confirm\n//   - -y overrides confirmation\n//   - --wait // waits until done (might not be possible *1)\n// availableApps <station>\n//   - prints list of applications for station\n// changeApp <appID> <stations>\n//   - Changes the app of stations to the indicated one\n//   - --wait // waits until done (might not be possible *1)\n//\n// *1 - To wait it's necessary to poll the state of the stations but:\n//      a - I would have to determine which stations CAN be started/stopped\n//      b - They might never reach the desired state for reasons beyond my control\n//\n// I still need:\n// - Richer responses on the back end (when it's not possible to start/stop/change a station)"],"sourceRoot":"/source/"}