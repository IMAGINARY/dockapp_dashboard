// Compiled by Babel
// ** DO NOT EDIT THIS FILE DIRECTLY **
//
'use strict';

var http = require('http');

var hostname = 'localhost';
var port = 8080;

function listStations() {
  http.request({
    hostname: hostname,
    port: port,
    method: 'GET',
    path: '/api/stations'
  }, function (res) {
    var body = '';
    res.on('data', function (chunk) {
      body += chunk;
    });
    res.on('end', function () {
      res.setEncoding('utf8');
      var response = JSON.parse(body);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = response.stations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var station = _step.value;

          console.log(station.id);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    });
  }).end();
}

function startStation(stationID) {
  var postData = JSON.stringify({
    ids: [stationID]
  });

  var req = http.request({
    hostname: hostname,
    port: port,
    method: 'POST',
    path: '/api/stations/start',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': Buffer.byteLength(postData)
    }
  }, function (res) {
    res.setEncoding('utf8');
    var body = '';
    res.on('data', function (chunk) {
      body += chunk;
    });
    res.on('end', function () {});
  });

  req.write(postData);
  req.end();

  console.log('Starting station ' + stationID);
}

listStations();
startStation('station_interactive_1');

// Interface
// listStations
//   - as list of IDs
//   - as table (id, name, app)
// startStations (<list of stations>)
//   - if all, confirm
//   - -y overrides confirmation
//   - --wait // waits until done (might not be possible *1)
// stopStations (<list of stations>)
//   - if all, confirm
//   - -y overrides confirmation
//   - --wait // waits until done (might not be possible *1)
// availableApps <station>
//   - prints list of applications for station
// changeApp <appID> <stations>
//   - Changes the app of stations to the indicated one
//   - --wait // waits until done (might not be possible *1)
//
// *1 - To wait it's necessary to poll the state of the stations but:
//      a - I would have to determine which stations CAN be started/stopped
//      b - They might never reach the desired state for reasons beyond my control
//
// I still need:
// - Richer responses on the back end (when it's not possible to start/stop/change a station)
//# sourceMappingURL=dockapp-cli.js.map
