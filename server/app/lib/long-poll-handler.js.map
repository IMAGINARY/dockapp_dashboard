{"version":3,"sources":["lib/long-poll-handler.js"],"names":["Promise","require","EventEmitter","LongPollHandler","timeoutSecs","updateID","events","updateEventEmitter","setMaxListeners","req","resolve","reject","parseInt","query","lastUpdateID","pollTimeout","updateHandler","clearTimeout","once","setTimeout","removeListener","emit","Error","getNextUpdateID"],"mappings":";;;;;;;;;;AAAA,IAAMA,UAAUC,QAAQ,UAAR,CAAhB;AACA,IAAMC,eAAeD,QAAQ,QAAR,EAAkBC,YAAvC;;AAEA;;;;IAGqBC,e;;AAEnB;;;;AAIA,6BAA8B;AAAA,QAAlBC,WAAkB,yDAAJ,EAAI;;AAAA;;AAC5B,SAAKA,WAAL,GAAmBA,WAAnB;AACA,SAAKC,QAAL,GAAgB,CAAhB;;AAEA,SAAKC,MAAL,GAAc,IAAIJ,YAAJ,EAAd;;AAEA,SAAKK,kBAAL,GAA0B,IAAIL,YAAJ,EAA1B;AACA,SAAKK,kBAAL,CAAwBC,eAAxB,CAAwC,GAAxC;AACD;;AAED;;;;;;;;;;;;;;;AAeF;;;;;kCACgBC,G,EAAK;AAAA;;AACjB,aAAO,IAAIT,OAAJ,CAAY,UAACU,OAAD,EAAUC,MAAV,EAAqB;AACtC;AACA,YAAIC,SAASH,IAAII,KAAJ,CAAUC,YAAnB,EAAiC,EAAjC,MAAyC,MAAKT,QAAlD,EAA4D;AAC1DK,kBAAQ,MAAKL,QAAb;AACD,SAFD,MAEO;AAAA;AACL;;AAEA,gBAAIU,cAAc,IAAlB;AACA;AACA,gBAAMC,gBAAgB,SAAhBA,aAAgB,GAAM;AAC1BC,2BAAaF,WAAb;AACAL,sBAAQ,MAAKL,QAAb;AACD,aAHD;AAIA,kBAAKE,kBAAL,CAAwBW,IAAxB,CAA6B,QAA7B,EAAuCF,aAAvC;;AAEA;AACAD,0BAAcI,WAAW,YAAM;AAC7B,oBAAKZ,kBAAL,CAAwBa,cAAxB,CAAuC,QAAvC,EAAiDJ,aAAjD;AACA,oBAAKV,MAAL,CAAYe,IAAZ,CAAiB,SAAjB;AACAV,qBAAOW,MAAM,8BAAN,CAAP;AACD,aAJa,EAIX,MAAKlB,WAAL,GAAmB,IAJR,CAAd;;AAMA,kBAAKE,MAAL,CAAYe,IAAZ,CAAiB,MAAjB;AAlBK;AAmBN;AACF,OAxBM,CAAP;AAyBD;;AAED;;;;;;;;sCAKkB;AAChB,aAAO,KAAKhB,QAAL,GAAgB,CAAvB;AACD;;AAED;;;;;;;;mCAKe;AACb,WAAKA,QAAL,GAAgB,KAAKkB,eAAL,EAAhB;AACA,WAAKhB,kBAAL,CAAwBc,IAAxB,CAA6B,QAA7B;AACD;;;;;;kBA7EkBlB,e","file":"lib/long-poll-handler.js","sourcesContent":["const Promise = require('bluebird');\nconst EventEmitter = require('events').EventEmitter;\n\n/**\n * Manages Long Polling for a single HTTP API endpoint\n */\nexport default class LongPollHandler {\n\n  /**\n   * Constructor\n   * @param timeoutSecs Long poll timeout (in seconds)\n   */\n  constructor(timeoutSecs = 15) {\n    this.timeoutSecs = timeoutSecs;\n    this.updateID = 1;\n\n    this.events = new EventEmitter();\n\n    this.updateEventEmitter = new EventEmitter();\n    this.updateEventEmitter.setMaxListeners(100);\n  }\n\n  /**\n   * Handles an http request using long polling\n   *\n   * Call this method upon receiving an http request. It returns a\n   * promise that signals when the client can send the response.\n   *\n   * If the client is synced it the promise will resolve immediately.\n   * If the client is out of sync the promise will resolve as soon as\n   * the handler is signaled that there are updates, or will reject if\n   * there is a time out (in which case the client can send an empty\n   * response)\n   **\n   * @param {object} req HTTP Request (express)\n   * @return {bluebird}\n   */\n// eslint-disable-next-line no-unused-vars\n  handleRequest(req) {\n    return new Promise((resolve, reject) => {\n      // If the client is out of sync we can respond right away\n      if (parseInt(req.query.lastUpdateID, 10) !== this.updateID) {\n        resolve(this.updateID);\n      } else {\n        // If the client is synced...\n\n        let pollTimeout = null;\n        // Respond when an update arrives (and clear the timeout)\n        const updateHandler = () => {\n          clearTimeout(pollTimeout);\n          resolve(this.updateID);\n        };\n        this.updateEventEmitter.once('update', updateHandler);\n\n        // Time out if no updates arrive (and remove the update handler)\n        pollTimeout = setTimeout(() => {\n          this.updateEventEmitter.removeListener('update', updateHandler);\n          this.events.emit('timeout');\n          reject(Error('Time out waiting for updates'));\n        }, this.timeoutSecs * 1000);\n\n        this.events.emit('wait');\n      }\n    });\n  }\n\n  /**\n   * Returns the updateID of the next update\n   *\n   * @return {number}\n   */\n  getNextUpdateID() {\n    return this.updateID + 1;\n  }\n\n  /**\n   * Signal the handler that the data associated with this endpoint updated\n   *\n   * The handler emits an internal event to wake all waiting requests.\n   */\n  signalUpdate() {\n    this.updateID = this.getNextUpdateID();\n    this.updateEventEmitter.emit('update');\n  }\n}\n"],"sourceRoot":"/source/"}