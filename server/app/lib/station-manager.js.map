{"version":3,"sources":["lib/station-manager.js"],"names":[],"mappings":"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","file":"lib/station-manager.js","sourcesContent":["const Promise = require('bluebird');\nconst EventEmitter = require('events').EventEmitter;\n\nimport Station from './station';\n\n/**\n * Service Layer to the DockApp system\n * Dispatches requests asynchronously and keeps cached state\n */\nexport default class StationManager {\n\n  /**\n   * Create a Station Manager\n   *\n   * @param {Object} nconf - Instance of nconf configuration\n   * @param {Object} logger - Instance of winston logger\n   * @param {DockAppConnector} dockApp - DockApp connector\n   * @param {MKLivestatusConnector} mkLivestatus - MKLivestatus connector\n   */\n  constructor(nconf, logger, dockApp, mkLivestatus) {\n    this.nconf = nconf;\n    this.logger = logger;\n\n    this.dockApp = dockApp;\n    this.mkLivestatus = mkLivestatus;\n\n    this.events = new EventEmitter();\n    this.logEntries = [];\n    this.lastLogID = 1;\n\n    this.mkLivestatusPollTimer = null;\n    this.loadStationConfig().then(() => {\n      const pollLoopBody = () => {\n        const pollDelay = this.nconf.get('MKLivestatusPollDelay');\n        let consecutiveErrors = 0;\n        const errorDigestSize = 50;\n        this.pollMKLivestatus().then(() => {\n          consecutiveErrors = 0;\n          this.mkLivestatusPollTimer = setTimeout(pollLoopBody, pollDelay);\n        }).catch((error) => {\n          if (consecutiveErrors % errorDigestSize) {\n            logger.error(error.message);\n            if (consecutiveErrors !== 0) {\n              logger.error(`Repeated polling errors (${errorDigestSize} times)`);\n            }\n          }\n          consecutiveErrors++;\n          this.mkLivestatusPollTimer = setTimeout(pollLoopBody, pollDelay);\n        });\n      };\n      pollLoopBody();\n    });\n  }\n\n  /**\n   * Loads the station configuration.\n   *\n   * If the configuration was already loaded this method clears it\n   * and reloads everything\n   *\n   * @returns {Promise}\n   */\n  loadStationConfig() {\n    this.clearStations();\n    this.signalUpdate();\n\n    return this.dockApp.getStationConfig().then((stationsCFG) => {\n      for (const stationCFG of stationsCFG) {\n        this.addStation(new Station(stationCFG));\n      }\n      this.signalUpdate();\n    }).catch((error) => {\n      this.logger.error(error);\n    });\n  }\n\n  /**\n   * Adds a station to the manager\n   * @param {Station} aStation\n   */\n  addStation(aStation) {\n    this.stationList.push(aStation);\n    this.stationIndex.set(aStation.id, aStation);\n  }\n\n  /**\n   * Removes a station from the manager\n   * @param {Station} aStation\n   */\n  removeStation(aStation) {\n    const i = this.stationList.indexOf(aStation);\n    if (i !== -1) {\n      this.stationList.splice(i, 1);\n    }\n\n    this.stationIndex.delete(aStation.id);\n  }\n\n  /**\n   * Removes all the stations\n   */\n  clearStations() {\n    this.stationIndex = new Map();\n    this.stationList = [];\n  }\n\n  /**\n   * Get the ordered list of stations\n   * @returns {Array}\n   */\n  getStations() {\n    return this.stationList;\n  }\n\n  /**\n   * Return a station identified by ID\n   *\n   * @param {string} id - Station ID\n   * @returns {Station}\n   */\n  getStationByID(id) {\n    return this.stationIndex.get(id);\n  }\n\n  /**\n   * Start indicated stations\n   *\n   * @param {Iterable} stationIDs - IDs of stations to start\n   * @return {Promise}\n   */\n  startStations(stationIDs) {\n    const eligibleStations = [];\n    for (const stationID of stationIDs) {\n      const station = this.getStationByID(stationID);\n      if (station && station.state === Station.OFF) {\n        station.state = Station.STARTING;\n        station.status = 'Waiting to start...';\n        eligibleStations.push(stationID);\n      }\n    }\n\n    this.signalUpdate();\n\n    return Promise.map(\n      eligibleStations,\n      (eligibleStation) => {\n        const station = this.getStationByID(eligibleStation);\n        station.status = 'Starting...';\n        this.signalUpdate();\n        return this.dockApp.startStation(station.id, station.outputBuffer).then(() => {\n          // station.state = Station.ON;\n          // station.status = '';\n          this.log('message', station, 'Station started');\n        })\n        .catch(() => {\n          station.state = Station.ERROR;\n          station.status = 'Failure starting the station';\n          this.log('error', station, 'Error starting station');\n        })\n        .then(() => {\n          this.signalUpdate();\n        });\n      },\n      { concurrency: this.nconf.get('scriptConcurrency') }\n    );\n  }\n\n  /**\n   * Stop indicated stations\n   *\n   * @param {Iterable} stationIDs - IDs of stations to stop\n   * @return {Promise}\n   */\n  stopStations(stationIDs) {\n    const eligibleStations = [];\n    for (const stationID of stationIDs) {\n      const station = this.getStationByID(stationID);\n      if (station && station.state === Station.ON) {\n        station.state = Station.STOPPING;\n        station.status = 'Waiting to stop...';\n        eligibleStations.push(stationID);\n      }\n    }\n\n    this.signalUpdate();\n\n    return Promise.map(\n      eligibleStations,\n      (eligibleStation) => {\n        const station = this.getStationByID(eligibleStation);\n        station.status = 'Stopping...';\n        this.signalUpdate();\n        return this.dockApp.stopStation(station.id, station.outputBuffer).then(() => {\n          // station.state = Station.OFF;\n          // station.status = '';\n          this.log('message', station, 'Station stopped');\n        })\n          .catch(() => {\n            station.state = Station.ERROR;\n            station.status = 'Failure stopping the station';\n            this.log('error', station, 'Error stopping station');\n          })\n          .then(() => {\n            this.signalUpdate();\n          });\n      },\n      { concurrency: this.nconf.get('scriptConcurrency') }\n    );\n  }\n\n  /**\n   * Change the application running in indicated stations\n   *\n   * @param {iterable} stationIDs - IDs of stations in which to change the appID\n   * @param {string} appID - Name of the appID to run\n   */\n  changeApp(stationIDs, appID) {\n    const eligibleStations = [];\n    for (const stationID of stationIDs) {\n      const station = this.getStationByID(stationID);\n      if (station && station.state === Station.ON && appID !== station.app) {\n        station.state = Station.SWITCHING_APP;\n        station.status = 'Waiting to change app...';\n        station.switching_app = appID;\n        eligibleStations.push(stationID);\n      }\n    }\n\n    this.signalUpdate();\n\n    return Promise.map(\n      eligibleStations,\n      (eligibleStation) => {\n        const station = this.getStationByID(eligibleStation);\n        station.status = `Switching to ${appID}...`;\n        this.signalUpdate();\n        return this.dockApp.changeApp(eligibleStation, appID, station.outputBuffer).then(() => {\n          this.log('message', station, `Launched app ${appID}`);\n        })\n        .catch(() => {\n          station.app = appID;\n          station.state = Station.ERROR;\n          station.status = 'Failure launching app';\n          this.log('error', station, `Failed to launch app ${appID}`);\n        })\n        .then(() => {\n          this.signalUpdate();\n        });\n      },\n      { concurrency: this.nconf.get('scriptConcurrency') }\n    );\n  }\n\n  /**\n   * Return the station activity log\n   *\n   * Each log entry is an object with the following structure:\n   * - id {string} : Unique id of the entry\n   * - time {string} : Timestamp in ISO format\n   * - type {string} : info | warning | error\n   * - message {string} : Event description\n   *\n   * @returns {Array}\n   */\n  getLog() {\n    return this.logEntries;\n  }\n\n\n  /**\n   * Logs an event\n   *\n   * @param {string} type - Event type: info | warning | error\n   * @param {Station|null} station - station associated with the event logged\n   * @param {string} message - Message to log\n   */\n  log(type, station, message) {\n    const newLogEntry = {\n      id: this.lastLogID,\n      time: new Date().toISOString(),\n      type,\n      message,\n    };\n\n    if (station !== null) {\n      newLogEntry.station_id = station.id;\n      newLogEntry.station_name = station.name;\n    }\n\n    this.lastLogID++;\n    this.logEntries.push(newLogEntry);\n\n    const maxEntries = this.nconf.get('max_log_length');\n    if (this.logEntries.length > maxEntries) {\n      this.logEntries = this.logEntries.slice(this.logEntries.length - maxEntries);\n    }\n  }\n\n  /**\n   * Polls MKLivestatus and updates the state of stations\n   * @returns {Promise}\n   */\n  pollMKLivestatus() {\n    return this.mkLivestatus.getState().then((allStationsStatus) => {\n      let changes = false;\n\n      for (const stationStatus of allStationsStatus) {\n        const station = this.getStationByID(stationStatus.id);\n        if (station) {\n          if (station.updateFromMKLivestatus(stationStatus)) {\n            changes = true;\n          }\n        }\n      }\n\n      if (changes) {\n        this.signalUpdate();\n      }\n    });\n  }\n  /**\n   * Signal listeners that station data was modified\n   * @private\n   */\n  signalUpdate() {\n    this.events.emit('stationUpdate');\n  }\n}\n"],"sourceRoot":"/source/"}