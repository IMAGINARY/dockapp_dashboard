{"version":3,"sources":["lib/station-manager.js"],"names":[],"mappings":"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","file":"lib/station-manager.js","sourcesContent":["const testStations = require('../../tests/models/test_stations.json');\nconst iconmap = require('../../iconmap.json');\nconst EventEmitter = require('events').EventEmitter;\n\n/**\n * Service Layer to the DockApp system\n * Dispatches requests asynchronously and keeps cached state\n */\nexport default class StationManager {\n\n  /**\n   * Create a Station Manager\n   *\n   * @param {Object} config - Instance of nconf configuration\n   * @param {Object} logger - Instance of winston logger\n   * @param {DockAppConnector} connector - DockApp connector\n   */\n  constructor(config, logger, connector) {\n    this.config = config;\n    this.logger = logger;\n    this.connector = connector;\n    this.stations = testStations;\n    this.events = new EventEmitter();\n    for (const station of this.stations) {\n      station.icon = this.getIconURL(station.app);\n    }\n    this.logEntries = [];\n    this.lastLogID = 1;\n  }\n\n  /**\n   * Return the list of stations\n   */\n  getStations() {\n    return this.stations;\n  }\n\n  /**\n   * Return a station identified by ID\n   *\n   * @param {string} id - Station ID\n   * @returns {*}\n   */\n  getStationByID(id) {\n    for (const station of this.stations) {\n      if (station.id === id) {\n        return station;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Start indicated stations\n   *\n   * @todo Change interface to return a promise\n   * @todo Make argument optional (start all stations)\n   * @param {iterable} stationIDs - IDs of stations to start\n   */\n  startStations(stationIDs) {\n    for (const stationID of stationIDs) {\n      const station = this.getStationByID(stationID);\n      if (station) {\n        if (station.state === 'off') {\n          station.state = 'busy';\n          station.status = 'Starting...';\n          this.connector.startStation(stationID).then(() => {\n            station.state = 'on';\n            station.status = '';\n            this.log('message', station, 'Station started');\n          })\n          .catch(() => {\n            station.state = 'error';\n            station.status = 'Failure starting the station';\n            this.log('error', station, 'Error starting station');\n          })\n          .then(() => {\n            this.signalUpdate();\n          });\n        }\n      }\n    }\n    this.signalUpdate();\n  }\n\n  /**\n   * Stop indicated stations\n   *\n   * @todo Change interface to return a promise\n   * @todo Make argument optional (stop all stations)\n   * @param {iterable} stationIDs - IDs of stations to stop\n   */\n  stopStations(stationIDs) {\n    for (const stationID of stationIDs) {\n      const station = this.getStationByID(stationID);\n      if (station) {\n        if (station.state === 'on') {\n          station.state = 'busy';\n          station.status = 'Stopping...';\n\n          this.connector.stopStation(stationID).then(() => {\n            station.state = 'off';\n            station.status = '';\n            this.log('message', station, 'Station stopped');\n          })\n          .catch(() => {\n            station.state = 'error';\n            station.status = 'Failure stopping the station';\n            this.log('error', station, 'Error stopping station');\n          })\n          .then(() => {\n            this.signalUpdate();\n          });\n        }\n      }\n    }\n    this.signalUpdate();\n  }\n\n  /**\n   * Change the application running in indicated stations\n   *\n   * @todo Change interface to return a promise\n   * @param {iterable} stationIDs - IDs of stations in which to change the appID\n   * @param {string} appID - Name of the appID to run\n   */\n  changeApp(stationIDs, appID) {\n    for (const stationID of stationIDs) {\n      const station = this.getStationByID(stationID);\n      if (station) {\n        if (station.state === 'on') {\n          station.state = 'busy';\n          station.status = `Switching to ${appID}...`;\n          station.app = '';\n\n          this.connector.changeApp(stationID, appID).then(() => {\n            station.app = appID;\n            station.icon = this.getIconURL(appID);\n            station.state = 'on';\n            station.status = '';\n            this.log('message', station, `Launched app ${appID}`);\n          })\n          .catch(() => {\n            station.app = appID;\n            station.icon = this.getIconURL(appID);\n            station.state = 'error';\n            station.status = 'Failure launching app';\n            this.log('error', station, `Failed to launch app ${appID}`);\n          })\n          .then(() => {\n            this.signalUpdate();\n          });\n        }\n      }\n    }\n    this.signalUpdate();\n  }\n\n  /**\n   * Return the URL of the icon of the specified app\n   *\n   * @param {string} appID - ID of the app\n   * @returns {string} - URL of the icon\n   */\n  getIconURL(appID) {\n    if (iconmap[appID] !== undefined) {\n      return `icons/${iconmap[appID]}`;\n    }\n    return 'icons/none.png';\n  }\n\n  /**\n   * Return the station activity log\n   *\n   * Each log entry is an object with the following structure:\n   * - id {string} : Unique id of the entry\n   * - time {string} : Timestamp in ISO format\n   * - type {string} : info | warning | error\n   * - message {string} : Event description\n   *\n   * @returns {Array}\n   */\n  getLog() {\n    return this.logEntries;\n  }\n\n\n  /**\n   * Logs an event\n   *\n   * @param {string} type - Event type: info | warning | error\n   * @param {string|null} station - station associated with the event logged\n   * @param {string} message - Message to log\n   */\n  log(type, station, message) {\n    const newLogEntry = {\n      id: this.lastLogID,\n      time: new Date().toISOString(),\n      type,\n      message,\n    };\n\n    if (station !== null) {\n      newLogEntry.station_id = station.id;\n      newLogEntry.station_name = station.name;\n    }\n\n    this.lastLogID++;\n    this.logEntries.push(newLogEntry);\n\n    const maxEntries = this.config.get('max_log_length');\n    if (this.logEntries.length > maxEntries) {\n      this.logEntries = this.logEntries.slice(this.logEntries.length - maxEntries);\n    }\n  }\n\n  /**\n   * Return the event emitter\n   *\n   * @returns {EventEmitter}\n   */\n  getEvents() {\n    return this.events;\n  }\n\n  /**\n   * Signal listeners that station data was modified\n   * @private\n   */\n  signalUpdate() {\n    this.getEvents().emit('stationUpdate');\n  }\n}\n"],"sourceRoot":"/source/"}