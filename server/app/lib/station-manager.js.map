{"version":3,"sources":["lib/station-manager.js"],"names":["Promise","require","EventEmitter","Ajv","HilbertCfgSchema","StationManager","nconf","logger","hilbertCLI","mkLivestatus","events","logEntries","lastLogID","globalHilbertCLIOutputBuffer","lastMKLivestatusDump","clearStations","clearStationProfiles","clearApplications","loadHilbertCfg","then","pollLoopBody","pollDelay","get","consecutiveErrors","errorDigestSize","pollMKLivestatus","setTimeout","catch","error","signalUpdate","getHilbertCfg","validateHilbertCfg","hilbertCfg","Object","entries","Applications","appID","appCfg","addApplication","Profiles","profileID","profileCfg","addStationProfile","Stations","stationID","stationCfg","hidden","addStation","stationProfile","verbose","id","stationProfiles","set","application","applications","aStation","stationList","push","stationIndex","i","indexOf","splice","delete","Map","values","stationIDs","eligibleStations","station","getStationByID","setQueuedToStartState","map","eligibleStation","setStartingState","startStation","outputBuffer","log","setErrorState","concurrency","setQueuedToStopState","setStoppingState","stopStation","setQueuedToChangeAppState","setChangingAppState","changeApp","type","message","newLogEntry","time","Date","toISOString","station_id","station_name","name","maxEntries","length","slice","getState","allStationsStatus","lastState","changes","stationStatus","updateFromMKLivestatus","emit","ajv","validate","Error","errorsText"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,UAAUC,QAAQ,UAAR,CAAhB;AACA,IAAMC,eAAeD,QAAQ,QAAR,EAAkBC,YAAvC;AACA,IAAMC,MAAMF,QAAQ,KAAR,CAAZ;;AAEA,IAAMG,mBAAmBH,QAAQ,4CAAR,CAAzB;;AAEA;;;;;IAIqBI,c;;AAEnB;;;;;;;;AAQA,0BAAYC,KAAZ,EAAmBC,MAAnB,EAA2BC,UAA3B,EAAuCC,YAAvC,EAAqD;AAAA;;AACnD,SAAKH,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;;AAEA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,YAAL,GAAoBA,YAApB;;AAEA,SAAKC,MAAL,GAAc,IAAIR,YAAJ,EAAd;AACA,SAAKS,UAAL,GAAkB,EAAlB;AACA,SAAKC,SAAL,GAAiB,CAAjB;;AAEA,SAAKC,4BAAL,GAAoC,oCAApC;AACA,SAAKC,oBAAL,GAA4B,EAA5B;;AAEA,SAAKC,aAAL;AACA,SAAKC,oBAAL;AACA,SAAKC,iBAAL;AACD;;AAED;;;;;;;;;2BAKO;AAAA;;AACL,aAAO,KAAKC,cAAL,GAAsBC,IAAtB,CAA2B,YAAM;AACtC,YAAMC,eAAe,SAAfA,YAAe,GAAM;AACzB,cAAMC,YAAY,MAAKf,KAAL,CAAWgB,GAAX,CAAe,iBAAf,CAAlB;AACA,cAAIC,oBAAoB,CAAxB;AACA,cAAMC,kBAAkB,EAAxB;AACA,gBAAKC,gBAAL,GAAwBN,IAAxB,CAA6B,YAAM;AACjCI,gCAAoB,CAApB;AACAG,uBAAWN,YAAX,EAAyBC,SAAzB;AACD,WAHD,EAGGM,KAHH,CAGS,YAAM;AACb,gBAAIJ,oBAAoBC,eAAxB,EAAyC;AACvC,kBAAID,sBAAsB,CAA1B,EAA6B;AAC3B,sBAAKhB,MAAL,CAAYqB,KAAZ,6DAC4DJ,eAD5D;AAED;AACF;AACDD,iCAAqB,CAArB;AACAG,uBAAWN,YAAX,EAAyBC,SAAzB;AACD,WAZD;AAaD,SAjBD;AAkBAD;AACD,OApBM,CAAP;AAqBD;;AAED;;;;;;;;;;;qCAQiB;AAAA;;AACf,WAAKL,aAAL;AACA,WAAKC,oBAAL;AACA,WAAKC,iBAAL;AACA,WAAKY,YAAL;;AAEA,aAAO,KAAKrB,UAAL,CAAgBsB,aAAhB,CAA8B,KAAKjB,4BAAnC,EACJM,IADI,CACC;AAAA,eAAcd,eAAe0B,kBAAf,CAAkCC,UAAlC,CAAd;AAAA,OADD,EAEJb,IAFI,CAEC,UAACa,UAAD,EAAgB;AAAA;AAAA;AAAA;;AAAA;AACpB,+BAA8BC,OAAOC,OAAP,CAAeF,WAAWG,YAA1B,CAA9B,8HAAuE;AAAA;;AAAA,gBAA3DC,KAA2D;AAAA,gBAApDC,MAAoD;;AACrE,mBAAKC,cAAL,CAAoB,0BAAgBF,KAAhB,EAAuBC,MAAvB,CAApB;AACD;AAHmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAKpB,gCAAsCJ,OAAOC,OAAP,CAAeF,WAAWO,QAA1B,CAAtC,mIAA2E;AAAA;;AAAA,gBAA/DC,SAA+D;AAAA,gBAApDC,UAAoD;;AACzE,mBAAKC,iBAAL,CAAuB,6BAAmBF,SAAnB,EAA8BC,UAA9B,CAAvB;AACD;AAPmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AASpB,gCAAsCR,OAAOC,OAAP,CAAeF,WAAWW,QAA1B,CAAtC,mIAA2E;AAAA;;AAAA,gBAA/DC,SAA+D;AAAA,gBAApDC,UAAoD;;AACzE,gBAAI,CAACA,WAAWC,MAAhB,EAAwB;AACtB,qBAAKC,UAAL,CAAgB,sBAAYH,SAAZ,EAAuBC,UAAvB,CAAhB;AACD;AACF;AAbmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcpB,eAAKhB,YAAL;AACD,OAjBI,CAAP;AAkBD;;AAED;;;;;;;;sCAKkBmB,c,EAAgB;AAChC,WAAKzC,MAAL,CAAY0C,OAAZ,8CAA+DD,eAAeE,EAA9E;AACA,WAAKC,eAAL,CAAqBC,GAArB,CAAyBJ,eAAeE,EAAxC,EAA4CF,cAA5C;AACD;;AAED;;;;;;;;mCAKeK,W,EAAa;AAC1B,WAAK9C,MAAL,CAAY0C,OAAZ,kDAAmEI,YAAYH,EAA/E;AACA,WAAKI,YAAL,CAAkBF,GAAlB,CAAsBC,YAAYH,EAAlC,EAAsCG,WAAtC;AACD;;AAED;;;;;;;+BAIWE,Q,EAAU;AACnB,WAAKhD,MAAL,CAAY0C,OAAZ,sCAAuDM,SAASL,EAAhE;AACA,WAAKM,WAAL,CAAiBC,IAAjB,CAAsBF,QAAtB;AACA,WAAKG,YAAL,CAAkBN,GAAlB,CAAsBG,SAASL,EAA/B,EAAmCK,QAAnC;AACD;;AAED;;;;;;;kCAIcA,Q,EAAU;AACtB,WAAKhD,MAAL,CAAY0C,OAAZ,wCAAyDM,SAASL,EAAlE;AACA,UAAMS,IAAI,KAAKH,WAAL,CAAiBI,OAAjB,CAAyBL,QAAzB,CAAV;AACA,UAAII,MAAM,CAAC,CAAX,EAAc;AACZ,aAAKH,WAAL,CAAiBK,MAAjB,CAAwBF,CAAxB,EAA2B,CAA3B;AACD;;AAED,WAAKD,YAAL,CAAkBI,MAAlB,CAAyBP,SAASL,EAAlC;AACD;;AAED;;;;;;oCAGgB;AACd,WAAK3C,MAAL,CAAY0C,OAAZ,CAAoB,wCAApB;AACA,WAAKS,YAAL,GAAoB,IAAIK,GAAJ,EAApB;AACA,WAAKP,WAAL,GAAmB,EAAnB;AACD;;AAED;;;;;;2CAGuB;AACrB,WAAKjD,MAAL,CAAY0C,OAAZ,CAAoB,gDAApB;AACA,WAAKE,eAAL,GAAuB,IAAIY,GAAJ,EAAvB;AACD;;AAED;;;;;;wCAGoB;AAClB,WAAKxD,MAAL,CAAY0C,OAAZ,CAAoB,4CAApB;AACA,WAAKK,YAAL,GAAoB,IAAIS,GAAJ,EAApB;AACD;;AAED;;;;;;;;yCAKqB;AACnB,aAAO,KAAKZ,eAAL,CAAqBa,MAArB,EAAP;AACD;;AAED;;;;;;;;sCAKkB;AAChB,aAAO,KAAKV,YAAL,CAAkBU,MAAlB,EAAP;AACD;;AAED;;;;;;;kCAIc;AACZ,aAAO,KAAKR,WAAZ;AACD;;AAED;;;;;;;;;mCAMeN,E,EAAI;AACjB,aAAO,KAAKQ,YAAL,CAAkBpC,GAAlB,CAAsB4B,EAAtB,CAAP;AACD;;AAED;;;;;;;;;kCAMce,U,EAAY;AAAA;;AACxB,UAAMC,mBAAmB,EAAzB;AADwB;AAAA;AAAA;;AAAA;AAExB,8BAAwBD,UAAxB,mIAAoC;AAAA,cAAzBrB,SAAyB;;AAClC,cAAMuB,UAAU,KAAKC,cAAL,CAAoBxB,SAApB,CAAhB;AACA,cAAIuB,WAAWA,QAAQE,qBAAR,EAAf,EAAgD;AAC9CH,6BAAiBT,IAAjB,CAAsBb,SAAtB;AACD;AACF;AAPuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASxB,WAAKf,YAAL;;AAEA,aAAO7B,QAAQsE,GAAR,CACLJ,gBADK,EAEL,UAACK,eAAD,EAAqB;AACnB,eAAKhE,MAAL,CAAY0C,OAAZ,wCAAyDsB,eAAzD;AACA,YAAMJ,UAAU,OAAKC,cAAL,CAAoBG,eAApB,CAAhB;AACAJ,gBAAQK,gBAAR;AACA,eAAK3C,YAAL;AACA,eAAO,OAAKrB,UAAL,CAAgBiE,YAAhB,CAA6BN,QAAQjB,EAArC,EAAyCiB,QAAQO,YAAjD,EAA+DvD,IAA/D,CAAoE,YAAM;AAC/E,iBAAKZ,MAAL,CAAY0C,OAAZ,+BAAgDsB,eAAhD;AACA,iBAAKI,GAAL,CAAS,MAAT,EAAiBR,OAAjB,EAA0B,iBAA1B;AACD,SAHM,EAINxC,KAJM,CAIA,YAAM;AACX,iBAAKpB,MAAL,CAAY0C,OAAZ,+BAAgDsB,eAAhD;AACA,iBAAKI,GAAL,CAAS,OAAT,EAAkBR,OAAlB,EAA2B,wBAA3B;AACAA,kBAAQS,aAAR,CAAsB,8BAAtB;AACD,SARM,EASNzD,IATM,CASD,YAAM;AACV,iBAAKU,YAAL;AACD,SAXM,CAAP;AAYD,OAnBI,EAoBL,EAAEgD,aAAa,KAAKvE,KAAL,CAAWgB,GAAX,CAAe,mBAAf,CAAf,EApBK,CAAP;AAsBD;;AAED;;;;;;;;;iCAMa2C,U,EAAY;AAAA;;AACvB,UAAMC,mBAAmB,EAAzB;AADuB;AAAA;AAAA;;AAAA;AAEvB,8BAAwBD,UAAxB,mIAAoC;AAAA,cAAzBrB,SAAyB;;AAClC,cAAMuB,UAAU,KAAKC,cAAL,CAAoBxB,SAApB,CAAhB;AACA,cAAIuB,WAAWA,QAAQW,oBAAR,EAAf,EAA+C;AAC7CZ,6BAAiBT,IAAjB,CAAsBb,SAAtB;AACD;AACF;AAPsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASvB,WAAKf,YAAL;;AAEA,aAAO7B,QAAQsE,GAAR,CACLJ,gBADK,EAEL,UAACK,eAAD,EAAqB;AACnB,eAAKhE,MAAL,CAAY0C,OAAZ,wCAAyDsB,eAAzD;AACA,YAAMJ,UAAU,OAAKC,cAAL,CAAoBG,eAApB,CAAhB;AACAJ,gBAAQY,gBAAR;AACA,eAAKlD,YAAL;AACA,eAAO,OAAKrB,UAAL,CAAgBwE,WAAhB,CAA4Bb,QAAQjB,EAApC,EAAwCiB,QAAQO,YAAhD,EAA8DvD,IAA9D,CAAmE,YAAM;AAC9E,iBAAKZ,MAAL,CAAY0C,OAAZ,+BAAgDsB,eAAhD;AACA,iBAAKI,GAAL,CAAS,MAAT,EAAiBR,OAAjB,EAA0B,iBAA1B;AACD,SAHM,EAIJxC,KAJI,CAIE,YAAM;AACX,iBAAKpB,MAAL,CAAY0C,OAAZ,+BAAgDsB,eAAhD;AACA,iBAAKI,GAAL,CAAS,OAAT,EAAkBR,OAAlB,EAA2B,wBAA3B;AACAA,kBAAQS,aAAR,CAAsB,8BAAtB;AACD,SARI,EASJzD,IATI,CASC,YAAM;AACV,iBAAKU,YAAL;AACD,SAXI,CAAP;AAYD,OAnBI,EAoBL,EAAEgD,aAAa,KAAKvE,KAAL,CAAWgB,GAAX,CAAe,mBAAf,CAAf,EApBK,CAAP;AAsBD;;AAED;;;;;;;;;;8BAOU2C,U,EAAY7B,K,EAAO;AAAA;;AAC3B,UAAM8B,mBAAmB,EAAzB;AAD2B;AAAA;AAAA;;AAAA;AAE3B,8BAAwBD,UAAxB,mIAAoC;AAAA,cAAzBrB,SAAyB;;AAClC,cAAMuB,UAAU,KAAKC,cAAL,CAAoBxB,SAApB,CAAhB;AACA,cAAIuB,WAAWA,QAAQc,yBAAR,CAAkC7C,KAAlC,CAAf,EAAyD;AACvD8B,6BAAiBT,IAAjB,CAAsBb,SAAtB;AACD;AACF;AAP0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAS3B,WAAKf,YAAL;;AAEA,aAAO7B,QAAQsE,GAAR,CACLJ,gBADK,EAEL,UAACK,eAAD,EAAqB;AACnB,eAAKhE,MAAL,CAAY0C,OAAZ,+CAC8CsB,eAD9C,YACoEnC,KADpE;AAEA,YAAM+B,UAAU,OAAKC,cAAL,CAAoBG,eAApB,CAAhB;AACAJ,gBAAQe,mBAAR,CAA4B9C,KAA5B;AACA,eAAKP,YAAL;AACA,eAAO,OAAKrB,UAAL,CAAgB2E,SAAhB,CAA0BZ,eAA1B,EAA2CnC,KAA3C,EAAkD+B,QAAQO,YAA1D,EAAwEvD,IAAxE,CAA6E,YAAM;AACxF,iBAAKZ,MAAL,CAAY0C,OAAZ,8CAC6CsB,eAD7C,YACmEnC,KADnE;AAEA,iBAAKuC,GAAL,CAAS,MAAT,EAAiBR,OAAjB,oBAA0C/B,KAA1C;AACD,SAJM,EAKNT,KALM,CAKA,YAAM;AACX,iBAAKpB,MAAL,CAAY0C,OAAZ,sDACqDsB,eADrD,YAC2EnC,KAD3E;AAEA,iBAAKuC,GAAL,CAAS,OAAT,EAAkBR,OAAlB,4BAAmD/B,KAAnD;AACA+B,kBAAQS,aAAR,qBAAwCxC,KAAxC;AACD,SAVM,EAWNjB,IAXM,CAWD,YAAM;AACV,iBAAKU,YAAL;AACD,SAbM,CAAP;AAcD,OAtBI,EAuBL,EAAEgD,aAAa,KAAKvE,KAAL,CAAWgB,GAAX,CAAe,mBAAf,CAAf,EAvBK,CAAP;AAyBD;;AAED;;;;;;;;;;;;;;6BAWS;AACP,aAAO,KAAKX,UAAZ;AACD;;AAGD;;;;;;;;;;wBAOIyE,I,EAAMjB,O,EAASkB,O,EAAS;AAC1B,UAAMC,cAAc;AAClBpC,YAAI,KAAKtC,SADS;AAElB2E,cAAM,IAAIC,IAAJ,GAAWC,WAAX,EAFY;AAGlBL,kBAHkB;AAIlBC;AAJkB,OAApB;;AAOA,UAAIlB,YAAY,IAAhB,EAAsB;AACpBmB,oBAAYI,UAAZ,GAAyBvB,QAAQjB,EAAjC;AACAoC,oBAAYK,YAAZ,GAA2BxB,QAAQyB,IAAnC;AACD;;AAED,WAAKhF,SAAL,IAAkB,CAAlB;AACA,WAAKD,UAAL,CAAgB8C,IAAhB,CAAqB6B,WAArB;;AAEA,UAAMO,aAAa,KAAKvF,KAAL,CAAWgB,GAAX,CAAe,gBAAf,CAAnB;AACA,UAAI,KAAKX,UAAL,CAAgBmF,MAAhB,GAAyBD,UAA7B,EAAyC;AACvC,aAAKlF,UAAL,GAAkB,KAAKA,UAAL,CAAgBoF,KAAhB,CAAsB,KAAKpF,UAAL,CAAgBmF,MAAhB,GAAyBD,UAA/C,CAAlB;AACD;AACF;;AAED;;;;;;;uCAImB;AAAA;;AACjB,aAAO,KAAKpF,YAAL,CAAkBuF,QAAlB,GAA6B7E,IAA7B,CAAkC,UAAC8E,iBAAD,EAAuB;AAC9D,YAAMC,YAAY,EAAlB;AACA,YAAIC,UAAU,KAAd;AAF8D;AAAA;AAAA;;AAAA;AAG9D,gCAA4BF,iBAA5B,mIAA+C;AAAA,gBAApCG,aAAoC;;AAC7CF,sBAAUzC,IAAV,CAAe2C,aAAf;AACA,gBAAMjC,UAAU,OAAKC,cAAL,CAAoBgC,cAAclD,EAAlC,CAAhB;AACA,gBAAIiB,OAAJ,EAAa;AACX,kBAAIA,QAAQkC,sBAAR,CAA+BD,aAA/B,CAAJ,EAAmD;AACjDD,0BAAU,IAAV;AACD;AACF;AACF;AAX6D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAY9D,eAAKrF,oBAAL,GAA4BoF,SAA5B;;AAEA,YAAIC,OAAJ,EAAa;AACX,iBAAKtE,YAAL;AACD;AACF,OAjBM,CAAP;AAkBD;AACD;;;;;;;mCAIe;AACb,WAAKnB,MAAL,CAAY4F,IAAZ,CAAiB,eAAjB;AACD;;AAGD;;;;;;;;;;;uCAQ0BtE,U,EAAY;AACpC,UAAMuE,MAAM,IAAIpG,GAAJ,EAAZ;AACA,UAAI,CAACoG,IAAIC,QAAJ,CAAapG,gBAAb,EAA+B4B,UAA/B,CAAL,EAAiD;AAC/C,cAAM,IAAIyE,KAAJ,4BAAmCF,IAAIG,UAAJ,EAAnC,CAAN;AACD;AACD,aAAO1E,UAAP;AACD;;;;;;kBAhakB3B,c","file":"lib/station-manager.js","sourcesContent":["import Station from './station';\nimport StationProfile from './station-profile';\nimport Application from './application';\nimport TerminalOutputBuffer from './terminal-output-buffer';\n\nconst Promise = require('bluebird');\nconst EventEmitter = require('events').EventEmitter;\nconst Ajv = require('ajv');\n\nconst HilbertCfgSchema = require('../../data/schema/hilbert-cfg-partial.json');\n\n/**\n * Service Layer for hilbert\n * Dispatches requests asynchronously and keeps cached state\n */\nexport default class StationManager {\n\n  /**\n   * Create a Station Manager\n   *\n   * @param {Object} nconf - Instance of nconf configuration\n   * @param {Object} logger - Instance of winston logger\n   * @param {HilbertCLIConnector} hilbertCLI - hilbert-cli connector\n   * @param {MKLivestatusConnector} mkLivestatus - MKLivestatus connector\n   */\n  constructor(nconf, logger, hilbertCLI, mkLivestatus) {\n    this.nconf = nconf;\n    this.logger = logger;\n\n    this.hilbertCLI = hilbertCLI;\n    this.mkLivestatus = mkLivestatus;\n\n    this.events = new EventEmitter();\n    this.logEntries = [];\n    this.lastLogID = 1;\n\n    this.globalHilbertCLIOutputBuffer = new TerminalOutputBuffer();\n    this.lastMKLivestatusDump = [];\n\n    this.clearStations();\n    this.clearStationProfiles();\n    this.clearApplications();\n  }\n\n  /**\n   * Reads the station configuration and begins polling station status\n   *\n   * @return {Promise}\n   */\n  init() {\n    return this.loadHilbertCfg().then(() => {\n      const pollLoopBody = () => {\n        const pollDelay = this.nconf.get('mkls_poll_delay');\n        let consecutiveErrors = 0;\n        const errorDigestSize = 50;\n        this.pollMKLivestatus().then(() => {\n          consecutiveErrors = 0;\n          setTimeout(pollLoopBody, pollDelay);\n        }).catch(() => {\n          if (consecutiveErrors % errorDigestSize) {\n            if (consecutiveErrors !== 0) {\n              this.logger.error(\n                `Station manager: Repeated MKLivestatus polling errors (${errorDigestSize} times)`);\n            }\n          }\n          consecutiveErrors += 1;\n          setTimeout(pollLoopBody, pollDelay);\n        });\n      };\n      pollLoopBody();\n    });\n  }\n\n  /**\n   * Loads the station configuration.\n   *\n   * If the configuration was already loaded this method clears it\n   * and reloads everything\n   *\n   * @returns {Promise}\n   */\n  loadHilbertCfg() {\n    this.clearStations();\n    this.clearStationProfiles();\n    this.clearApplications();\n    this.signalUpdate();\n\n    return this.hilbertCLI.getHilbertCfg(this.globalHilbertCLIOutputBuffer)\n      .then(hilbertCfg => StationManager.validateHilbertCfg(hilbertCfg))\n      .then((hilbertCfg) => {\n        for (const [appID, appCfg] of Object.entries(hilbertCfg.Applications)) {\n          this.addApplication(new Application(appID, appCfg));\n        }\n\n        for (const [profileID, profileCfg] of Object.entries(hilbertCfg.Profiles)) {\n          this.addStationProfile(new StationProfile(profileID, profileCfg));\n        }\n\n        for (const [stationID, stationCfg] of Object.entries(hilbertCfg.Stations)) {\n          if (!stationCfg.hidden) {\n            this.addStation(new Station(stationID, stationCfg));\n          }\n        }\n        this.signalUpdate();\n      });\n  }\n\n  /**\n   * Adds a station profile\n   *\n   * @param {StationProfile} stationProfile\n   */\n  addStationProfile(stationProfile) {\n    this.logger.verbose(`Station manager: Adding station profile ${stationProfile.id}`);\n    this.stationProfiles.set(stationProfile.id, stationProfile);\n  }\n\n  /**\n   * Adds an application\n   *\n   * @param {Application} application\n   */\n  addApplication(application) {\n    this.logger.verbose(`Station manager: Adding application profile ${application.id}`);\n    this.applications.set(application.id, application);\n  }\n\n  /**\n   * Adds a station to the manager\n   * @param {Station} aStation\n   */\n  addStation(aStation) {\n    this.logger.verbose(`Station manager: Adding station ${aStation.id}`);\n    this.stationList.push(aStation);\n    this.stationIndex.set(aStation.id, aStation);\n  }\n\n  /**\n   * Removes a station from the manager\n   * @param {Station} aStation\n   */\n  removeStation(aStation) {\n    this.logger.verbose(`Station manager: Removing station ${aStation.id}`);\n    const i = this.stationList.indexOf(aStation);\n    if (i !== -1) {\n      this.stationList.splice(i, 1);\n    }\n\n    this.stationIndex.delete(aStation.id);\n  }\n\n  /**\n   * Removes all the stations\n   */\n  clearStations() {\n    this.logger.verbose('Station manager: Clearing all stations');\n    this.stationIndex = new Map();\n    this.stationList = [];\n  }\n\n  /**\n   * Removes all the station profiles\n   */\n  clearStationProfiles() {\n    this.logger.verbose('Station manager: Clearing all station profiles');\n    this.stationProfiles = new Map();\n  }\n\n  /**\n   * Removes all the applications\n   */\n  clearApplications() {\n    this.logger.verbose('Station manager: Clearing all applications');\n    this.applications = new Map();\n  }\n\n  /**\n   * Returns the station profiles\n   *\n   * @return {Iterator.<StationProfile>}\n   */\n  getStationProfiles() {\n    return this.stationProfiles.values();\n  }\n\n  /**\n   * Returns the applications\n   *\n   * @return {Iterator.<Application>}\n   */\n  getApplications() {\n    return this.applications.values();\n  }\n\n  /**\n   * Get the ordered list of stations\n   * @returns {Array}\n   */\n  getStations() {\n    return this.stationList;\n  }\n\n  /**\n   * Return a station identified by ID\n   *\n   * @param {string} id - Station ID\n   * @returns {Station}\n   */\n  getStationByID(id) {\n    return this.stationIndex.get(id);\n  }\n\n  /**\n   * Start indicated stations\n   *\n   * @param {Iterable} stationIDs - IDs of stations to start\n   * @return {Promise}\n   */\n  startStations(stationIDs) {\n    const eligibleStations = [];\n    for (const stationID of stationIDs) {\n      const station = this.getStationByID(stationID);\n      if (station && station.setQueuedToStartState()) {\n        eligibleStations.push(stationID);\n      }\n    }\n\n    this.signalUpdate();\n\n    return Promise.map(\n      eligibleStations,\n      (eligibleStation) => {\n        this.logger.verbose(`Station manager: Starting station ${eligibleStation}`);\n        const station = this.getStationByID(eligibleStation);\n        station.setStartingState();\n        this.signalUpdate();\n        return this.hilbertCLI.startStation(station.id, station.outputBuffer).then(() => {\n          this.logger.verbose(`Station manager: Station ${eligibleStation} started`);\n          this.log('info', station, 'Station started');\n        })\n        .catch(() => {\n          this.logger.verbose(`Station manager: Station ${eligibleStation} failed to start`);\n          this.log('error', station, 'Error starting station');\n          station.setErrorState('Failure starting the station');\n        })\n        .then(() => {\n          this.signalUpdate();\n        });\n      },\n      { concurrency: this.nconf.get('scriptConcurrency') }\n    );\n  }\n\n  /**\n   * Stop indicated stations\n   *\n   * @param {Iterable} stationIDs - IDs of stations to stop\n   * @return {Promise}\n   */\n  stopStations(stationIDs) {\n    const eligibleStations = [];\n    for (const stationID of stationIDs) {\n      const station = this.getStationByID(stationID);\n      if (station && station.setQueuedToStopState()) {\n        eligibleStations.push(stationID);\n      }\n    }\n\n    this.signalUpdate();\n\n    return Promise.map(\n      eligibleStations,\n      (eligibleStation) => {\n        this.logger.verbose(`Station manager: Stopping station ${eligibleStation}`);\n        const station = this.getStationByID(eligibleStation);\n        station.setStoppingState();\n        this.signalUpdate();\n        return this.hilbertCLI.stopStation(station.id, station.outputBuffer).then(() => {\n          this.logger.verbose(`Station manager: Station ${eligibleStation} stopped`);\n          this.log('info', station, 'Station stopped');\n        })\n          .catch(() => {\n            this.logger.verbose(`Station manager: Station ${eligibleStation} failed to stop`);\n            this.log('error', station, 'Error stopping station');\n            station.setErrorState('Failure stopping the station');\n          })\n          .then(() => {\n            this.signalUpdate();\n          });\n      },\n      { concurrency: this.nconf.get('scriptConcurrency') }\n    );\n  }\n\n  /**\n   * Change the application running in indicated stations\n   *\n   * @param {Iterable} stationIDs - IDs of stations in which to change the appID\n   * @param {string} appID - Name of the appID to run\n   * @return {Promise}\n   */\n  changeApp(stationIDs, appID) {\n    const eligibleStations = [];\n    for (const stationID of stationIDs) {\n      const station = this.getStationByID(stationID);\n      if (station && station.setQueuedToChangeAppState(appID)) {\n        eligibleStations.push(stationID);\n      }\n    }\n\n    this.signalUpdate();\n\n    return Promise.map(\n      eligibleStations,\n      (eligibleStation) => {\n        this.logger.verbose(\n          `Station manager: Changing app of station ${eligibleStation} to ${appID}`);\n        const station = this.getStationByID(eligibleStation);\n        station.setChangingAppState(appID);\n        this.signalUpdate();\n        return this.hilbertCLI.changeApp(eligibleStation, appID, station.outputBuffer).then(() => {\n          this.logger.verbose(\n            `Station manager: Changed app of station ${eligibleStation} to ${appID}`);\n          this.log('info', station, `Launched app ${appID}`);\n        })\n        .catch(() => {\n          this.logger.verbose(\n            `Station manager: Failed changing app of station ${eligibleStation} to ${appID}`);\n          this.log('error', station, `Failed to launch app ${appID}`);\n          station.setErrorState(`Failed to open ${appID}`);\n        })\n        .then(() => {\n          this.signalUpdate();\n        });\n      },\n      { concurrency: this.nconf.get('scriptConcurrency') }\n    );\n  }\n\n  /**\n   * Return the station activity log\n   *\n   * Each log entry is an object with the following structure:\n   * - id {string} : Unique id of the entry\n   * - time {string} : Timestamp in ISO format\n   * - type {string} : info | warning | error\n   * - message {string} : Event description\n   *\n   * @returns {Array}\n   */\n  getLog() {\n    return this.logEntries;\n  }\n\n\n  /**\n   * Logs an event\n   *\n   * @param {string} type - Event type: info | warning | error\n   * @param {Station|null} station - station associated with the event logged\n   * @param {string} message - Message to log\n   */\n  log(type, station, message) {\n    const newLogEntry = {\n      id: this.lastLogID,\n      time: new Date().toISOString(),\n      type,\n      message,\n    };\n\n    if (station !== null) {\n      newLogEntry.station_id = station.id;\n      newLogEntry.station_name = station.name;\n    }\n\n    this.lastLogID += 1;\n    this.logEntries.push(newLogEntry);\n\n    const maxEntries = this.nconf.get('max_log_length');\n    if (this.logEntries.length > maxEntries) {\n      this.logEntries = this.logEntries.slice(this.logEntries.length - maxEntries);\n    }\n  }\n\n  /**\n   * Polls MKLivestatus and updates the state of stations\n   * @returns {Promise}\n   */\n  pollMKLivestatus() {\n    return this.mkLivestatus.getState().then((allStationsStatus) => {\n      const lastState = [];\n      let changes = false;\n      for (const stationStatus of allStationsStatus) {\n        lastState.push(stationStatus);\n        const station = this.getStationByID(stationStatus.id);\n        if (station) {\n          if (station.updateFromMKLivestatus(stationStatus)) {\n            changes = true;\n          }\n        }\n      }\n      this.lastMKLivestatusDump = lastState;\n\n      if (changes) {\n        this.signalUpdate();\n      }\n    });\n  }\n  /**\n   * Signal listeners that station data was modified\n   * @private\n   */\n  signalUpdate() {\n    this.events.emit('stationUpdate');\n  }\n\n\n  /**\n   * Validates a hilbert configuration according to the schema\n   *\n   * Only the parts of the configuration used by this program are validated\n   *\n   * @param hilbertCfg\n   * @return {*}\n   */\n  static validateHilbertCfg(hilbertCfg) {\n    const ajv = new Ajv();\n    if (!ajv.validate(HilbertCfgSchema, hilbertCfg)) {\n      throw new Error(`Error in Hilbert CFG: ${ajv.errorsText()}`);\n    }\n    return hilbertCfg;\n  }\n}\n"],"sourceRoot":"/source/"}