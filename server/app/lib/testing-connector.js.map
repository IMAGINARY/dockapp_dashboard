{"version":3,"sources":["lib/testing-connector.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;IAKqB,gB;AAEnB,4BAAY,KAAZ,EAAmB,MAAnB,EAA2B;AAAA;;AACzB,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,MAAL,GAAc,MAAd;AACD;;;;iCAEY,S,EAAW;AAAA;;AACtB,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,cAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,EAA6B,IAA7B,CAAkC,OAAlC;AACD,OAFM,CAAP;AAGD;;;gCAEW,S,EAAW;AAAA;;AACrB,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,eAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,EAA6B,IAA7B,CAAkC,OAAlC;AACD,OAFM,CAAP;AAGD;;;8BAES,S,EAAW,K,EAAO;AAAA;;AAC1B,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,eAAK,WAAL,CAAiB,IAAjB,EAAuB,IAAvB,EAA6B,IAA7B,CAAkC,YAAM;AACtC,cAAI,UAAU,4BAAd,EAA4C;AAC1C;AACD,WAFD,MAEO;AACL;AACD;AACF,SAND;AAOD,OARM,CAAP;AASD;;;;;;;;;;;;gCASW,G,EAAK,G,EAAK;AACpB,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,YAAM,QAAQ,KAAK,KAAL,CAAW,KAAK,MAAL,MAAiB,MAAM,GAAvB,CAAX,IAA0C,GAAxD;AACA,mBAAW,YAAM;AAAE;AAAY,SAA/B,EAAiC,KAAjC;AACD,OAHM,CAAP;AAID;;;;;;kBA3CkB,gB","file":"lib/testing-connector.js","sourcesContent":["/**\n * Testing stub to replace DockAppConnector\n *\n * Simulates the dockapp commands with a random delay\n */\nexport default class TestingConnector {\n\n  constructor(nconf, logger) {\n    this.nconf = nconf;\n    this.logger = logger;\n  }\n\n  startStation(stationID) {\n    return new Promise((resolve, reject) => {\n      this.randomDelay(3000, 8000).then(resolve);\n    });\n  }\n\n  stopStation(stationID) {\n    return new Promise((resolve, reject) => {\n      this.randomDelay(2000, 6000).then(resolve);\n    });\n  }\n\n  changeApp(stationID, appID) {\n    return new Promise((resolve, reject) => {\n      this.randomDelay(1000, 5000).then(() => {\n        if (appID === 'Sky explorer / Aladin lite') {\n          reject();\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Wait a random amount of time\n   * @private\n   * @param min\n   * @param max\n   * @returns {Promise}\n   */\n  randomDelay(min, max) {\n    return new Promise((resolve, reject) => {\n      const delay = Math.floor(Math.random() * (max - min)) + min;\n      setTimeout(() => { resolve(); }, delay);\n    });\n  }\n}\n"],"sourceRoot":"/source/"}