{"version":3,"sources":["lib/http-api-server.js"],"names":["EventEmitter","require","Promise","iconmap","express","validate","Joi","bodyParser","HttpAPIServer","stationManager","nconf","logger","server","use","json","events","apiModules","initializers","apiModule","push","init","all","then","setupRoutes","stationsLongPoll","get","on","signalUpdate","emit","router","Router","getApplications","bind","getStationProfiles","getStations","post","postStationsStartSchema","postStationsStart","postStationsStopSchema","postStationsStop","postStationsChangeAppSchema","postStationsChangeApp","getStationOutputSchema","getStationOutput","getServerOutput","getServerMKLivestatus","getNotifications","moduleRouter","req","res","applications","Array","from","map","a","toJSON","sort","b","name","stationProfiles","handleRequest","updateID","stations","s","station","icon","getIconURL","app","catch","body","ids","debug","status","send","startStations","stopStations","changeApp","params","id","getStationByID","lines","outputBuffer","getAll","error","globalHilbertCLIOutputBuffer","lastState","lastMKLivestatusDump","notifications","getLog","port","listen","info","appID","undefined","array","items","string","required"],"mappings":"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","file":"lib/http-api-server.js","sourcesContent":["import LongPollHandler from './long-poll-handler';\nimport PresetsModule from './presets/presets-module';\nimport TestControllerModule from './test-backend/test-controller-module';\n\nconst EventEmitter = require('events').EventEmitter;\nconst Promise = require('bluebird');\nconst iconmap = require('../../iconmap.json');\nconst express = require('express');\nconst validate = require('express-validation');\nconst Joi = require('joi');\nconst bodyParser = require('body-parser');\n\nexport default class HttpAPIServer {\n\n  constructor(stationManager, nconf, logger) {\n    this.stationManager = stationManager;\n    this.nconf = nconf;\n    this.logger = logger;\n\n    this.server = express();\n    this.server.use(bodyParser.json());\n\n    this.events = new EventEmitter();\n\n    this.apiModules = [\n      new PresetsModule(this),\n      new TestControllerModule(this),\n    ];\n  }\n\n  /**\n   * Initializes the server and its modules\n   *\n   * @return {Promise.<*>}\n   */\n  init() {\n    const initializers = [];\n    for (const apiModule of this.apiModules) {\n      initializers.push(apiModule.init());\n    }\n\n    return Promise.all(initializers).then(() => {\n      this.setupRoutes();\n    });\n  }\n\n  /**\n   * Sets up HTTP server routes / API entry points\n   */\n  setupRoutes() {\n    // getStations long poll handler\n    this.stationsLongPoll = new LongPollHandler(this.nconf.get('long_poll_timeout'));\n    this.stationManager.events.on('stationUpdate', () => {\n      this.stationsLongPoll.signalUpdate();\n    });\n    this.stationsLongPoll.events.on('wait', () => {\n      this.events.emit('longPollWait');\n    });\n    this.stationsLongPoll.events.on('timeout', () => {\n      this.events.emit('longPollTimeout');\n    });\n\n    const router = express.Router(); // eslint-disable-line new-cap\n    router.get('/applications', this.getApplications.bind(this));\n    router.get('/station_profiles', this.getStationProfiles.bind(this));\n    router.get('/stations', this.getStations.bind(this));\n    router.post('/stations/start', validate(HttpAPIServer.postStationsStartSchema()), this.postStationsStart.bind(this));\n    router.post('/stations/stop', validate(HttpAPIServer.postStationsStopSchema()), this.postStationsStop.bind(this));\n    router.post('/stations/change_app', validate(HttpAPIServer.postStationsChangeAppSchema()), this.postStationsChangeApp.bind(this));\n    router.get('/station/:id/output', validate(HttpAPIServer.getStationOutputSchema()), this.getStationOutput.bind(this));\n    router.get('/server/output', this.getServerOutput.bind(this));\n    router.get('/server/mklivestatus', this.getServerMKLivestatus.bind(this));\n    router.get('/notifications', this.getNotifications.bind(this));\n\n    this.server.use(router);\n\n    for (const apiModule of this.apiModules) {\n      const moduleRouter = express.Router(); // eslint-disable-line new-cap\n      apiModule.setupRoutes(moduleRouter);\n      this.server.use(moduleRouter);\n    }\n  }\n\n  /**\n   * GET /applications handler\n   * @param req\n   * @param res\n   */\n  getApplications(req, res) {\n    const applications = Array.from(this.stationManager.getApplications())\n      .map(a => a.toJSON())\n      .sort((a, b) => {\n        if (a.name < b.name) {\n          return -1;\n        } else if (a.name > b.name) {\n          return 1;\n        }\n        return 0;\n      });\n    res.json({\n      applications,\n    });\n  }\n\n  /**\n   * GET /station_profiles handler\n   * @param req\n   * @param res\n   */\n  getStationProfiles(req, res) {\n    const stationProfiles = Array.from(this.stationManager.getStationProfiles())\n      .map(a => a.toJSON())\n      .sort((a, b) => {\n        if (a.name < b.name) {\n          return -1;\n        } else if (a.name > b.name) {\n          return 1;\n        }\n        return 0;\n      });\n    res.json({\n      stationProfiles,\n    });\n  }\n\n  /**\n   * GET /stations handler\n   * @param req\n   * @param res\n   */\n  getStations(req, res) {\n    this.stationsLongPoll.handleRequest(req)\n      .then((updateID) => {\n        const stations = this.stationManager.getStations().map(s => s.toJSON());\n        for (const station of stations) {\n          station.icon = HttpAPIServer.getIconURL(station.app);\n        }\n        res.json({\n          updateID,\n          stations,\n        });\n      })\n      .catch(() => {\n        res.json({});\n      });\n  }\n\n  /**\n   * POST /stations/start handler\n   * @param req\n   * @param res\n   */\n  postStationsStart(req, res) {\n    if (!req.body.ids) {\n      this.logger.debug(\"HTTP request received: Start stations missing required 'ids' argument\");\n      res.status(400).send(\"Missing 'ids' argument\");\n      return;\n    }\n    this.logger.debug(`HTTP request received: Start stations ${req.body.ids}`);\n    this.stationManager.startStations(req.body.ids);\n    res.json({});\n  }\n\n  /**\n   * POST /stations/stop handler\n   * @param req\n   * @param res\n   */\n  postStationsStop(req, res) {\n    if (!req.body.ids) {\n      this.logger.debug(\"HTTP request received: Stop stations missing required 'ids' argument\");\n      res.status(400).send(\"Missing 'ids' argument\");\n      return;\n    }\n    this.logger.debug(`HTTP request received: Stop stations ${req.body.ids}`);\n    this.stationManager.stopStations(req.body.ids);\n    res.json({});\n  }\n\n  /**\n   * POST /stations/change_app handler\n   * @param req\n   * @param res\n   */\n  postStationsChangeApp(req, res) {\n    if (!req.body.ids) {\n      this.logger.debug(\"HTTP request received: Change app missing required 'ids' argument\");\n      res.status(400).send(\"Missing 'ids' argument\");\n      return;\n    }\n    if (!req.body.app) {\n      this.logger.debug(\"HTTP request received: Change app missing required 'app' argument\");\n      res.status(400).send(\"Missing 'app' argument\");\n      return;\n    }\n    this.logger.debug(\n      `HTTP request received: Change app of stations ${req.body.ids} to ${req.body.app}`);\n    this.stationManager.changeApp(req.body.ids, req.body.app);\n    res.json({});\n  }\n\n  /**\n   * GET /station/:id/output handler\n   * @param req\n   * @param res\n   */\n  getStationOutput(req, res) {\n    this.logger.debug(`HTTP request received: Get output of station ${req.params.id}`);\n    const station = this.stationManager.getStationByID(req.params.id);\n    if (station) {\n      res.json({\n        lines: station.outputBuffer.getAll(),\n      });\n    } else {\n      this.logger.error(`Requested output of non existant station ${req.params.id}`);\n      res.status(404).send('Station not found');\n    }\n  }\n\n  /**\n   * GET /server/output handler\n   * @param req\n   * @param res\n   */\n  getServerOutput(req, res) {\n    this.logger.debug('HTTP request received: Get global output');\n    res.json({\n      lines: this.stationManager.globalHilbertCLIOutputBuffer.getAll(),\n    });\n  }\n\n  /**\n   * GET /server/mklivestatus handler\n   * @param req\n   * @param res\n   */\n  getServerMKLivestatus(req, res) {\n    this.logger.debug('HTTP request received: Get last MKLivestatus state');\n    res.json({\n      lastState: this.stationManager.lastMKLivestatusDump,\n    });\n  }\n\n  /**\n   * GET /notifications handler\n   * @param req\n   * @param res\n   */\n  getNotifications(req, res) {\n    this.logger.debug('HTTP request received: Get notifications');\n    res.json({\n      notifications: this.stationManager.getLog(),\n    });\n  }\n\n  getServer() {\n    return this.server;\n  }\n\n  /**\n   * Return the URL of the icon of the specified app\n   *\n   * @param {string} appID - ID of the app\n   * @returns {string} - URL of the icon\n   */\n  static getIconURL(appID) {\n    if (iconmap[appID] !== undefined) {\n      return `icons/${iconmap[appID]}`;\n    }\n    return 'icons/none.png';\n  }\n\n  /**\n   * Start listening for requests on a port\n   *\n   * @param port\n   */\n  listen(port) {\n    this.server.listen(port);\n    this.logger.info(`Server listening on port ${port}.`);\n  }\n\n  static postStationsStartSchema() {\n    return {\n      body: {\n        ids: Joi.array().items(Joi.string()).required(),\n      },\n    };\n  }\n\n  static postStationsStopSchema() {\n    return {\n      body: {\n        ids: Joi.array().items(Joi.string()).required(),\n      },\n    };\n  }\n\n  static postStationsChangeAppSchema() {\n    return {\n      body: {\n        ids: Joi.array().items(Joi.string()).required(),\n      },\n      app: Joi.string().required()\n    };\n  }\n\n  static getStationOutputSchema() {\n    return {\n      params: {\n        id: Joi.string().required(),\n      },\n    };\n  }\n}\n"],"sourceRoot":"/source/"}