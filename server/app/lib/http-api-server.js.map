{"version":3,"sources":["lib/http-api-server.js"],"names":["EventEmitter","require","Promise","iconmap","express","bodyParser","HttpAPIServer","stationManager","nconf","logger","server","use","json","events","apiModules","initializers","apiModule","push","init","all","then","setupRoutes","stationsLongPoll","get","on","signalUpdate","emit","router","Router","getStations","bind","post","postStationsStart","postStationsStop","postStationsChangeApp","getStationOutput","getServerOutput","getServerMKLivestatus","getNotifications","moduleRouter","req","res","handleRequest","updateID","stations","map","s","toJSON","station","icon","getIconURL","app","catch","body","ids","debug","status","send","startStations","stopStations","changeApp","params","id","getStationByID","lines","outputBuffer","getAll","error","globalHilbertCLIOutputBuffer","lastState","lastMKLivestatusDump","notifications","getLog","port","listen","info","appID","undefined"],"mappings":"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","file":"lib/http-api-server.js","sourcesContent":["import LongPollHandler from './long-poll-handler';\nimport PresetsModule from './presets/presets-module';\n\nconst EventEmitter = require('events').EventEmitter;\nconst Promise = require('bluebird');\nconst iconmap = require('../../iconmap.json');\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nexport default class HttpAPIServer {\n\n  constructor(stationManager, nconf, logger) {\n    this.stationManager = stationManager;\n    this.nconf = nconf;\n    this.logger = logger;\n\n    this.server = express();\n    this.server.use(bodyParser.json());\n\n    this.events = new EventEmitter();\n\n    this.apiModules = [\n      new PresetsModule(this),\n    ];\n  }\n\n  /**\n   * Initializes the server and its modules\n   *\n   * @return {Promise.<*>}\n   */\n  init() {\n    const initializers = [];\n    for (const apiModule of this.apiModules) {\n      initializers.push(apiModule.init());\n    }\n\n    return Promise.all(initializers).then(() => {\n      this.setupRoutes();\n    });\n  }\n\n  setupRoutes() {\n    // getStations long poll handler\n    this.stationsLongPoll = new LongPollHandler(this.nconf.get('long_poll_timeout'));\n    this.stationManager.events.on('stationUpdate', () => {\n      this.stationsLongPoll.signalUpdate();\n    });\n    this.stationsLongPoll.events.on('wait', () => {\n      this.events.emit('longPollWait');\n    });\n    this.stationsLongPoll.events.on('timeout', () => {\n      this.events.emit('longPollTimeout');\n    });\n\n    const router = express.Router(); // eslint-disable-line new-cap\n    router.get('/stations', this.getStations.bind(this));\n    router.post('/stations/start', this.postStationsStart.bind(this));\n    router.post('/stations/stop', this.postStationsStop.bind(this));\n    router.post('/stations/change_app', this.postStationsChangeApp.bind(this));\n    router.get('/station/:id/output', this.getStationOutput.bind(this));\n    router.get('/server/output', this.getServerOutput.bind(this));\n    router.get('/server/mklivestatus', this.getServerMKLivestatus.bind(this));\n    router.get('/notifications', this.getNotifications.bind(this));\n\n    this.server.use(router);\n\n    for (const apiModule of this.apiModules) {\n      const moduleRouter = express.Router(); // eslint-disable-line new-cap\n      apiModule.setupRoutes(moduleRouter);\n      this.server.use(moduleRouter);\n    }\n  }\n\n  getStations(req, res) {\n    this.stationsLongPoll.handleRequest(req, res)\n      .then((updateID) => {\n        const stations = this.stationManager.getStations().map(s => s.toJSON());\n        for (const station of stations) {\n          station.icon = HttpAPIServer.getIconURL(station.app);\n        }\n        res.json({\n          updateID,\n          stations,\n        });\n      })\n      .catch(() => {\n        res.json({});\n      });\n  }\n\n  postStationsStart(req, res) {\n    if (!req.body.ids) {\n      this.logger.debug(\"HTTP request received: Start stations missing required 'ids' argument\");\n      res.status(400).send(\"Missing 'ids' argument\");\n      return;\n    }\n    this.logger.debug(`HTTP request received: Start stations ${req.body.ids}`);\n    this.stationManager.startStations(req.body.ids);\n    res.json({});\n  }\n\n  postStationsStop(req, res) {\n    if (!req.body.ids) {\n      this.logger.debug(\"HTTP request received: Stop stations missing required 'ids' argument\");\n      res.status(400).send(\"Missing 'ids' argument\");\n      return;\n    }\n    this.logger.debug(`HTTP request received: Stop stations ${req.body.ids}`);\n    this.stationManager.stopStations(req.body.ids);\n    res.json({});\n  }\n\n  postStationsChangeApp(req, res) {\n    if (!req.body.ids) {\n      this.logger.debug(\"HTTP request received: Change app missing required 'ids' argument\");\n      res.status(400).send(\"Missing 'ids' argument\");\n      return;\n    }\n    if (!req.body.app) {\n      this.logger.debug(\"HTTP request received: Change app missing required 'app' argument\");\n      res.status(400).send(\"Missing 'app' argument\");\n      return;\n    }\n    this.logger.debug(\n      `HTTP request received: Change app of stations ${req.body.ids} to ${req.body.app}`);\n    this.stationManager.changeApp(req.body.ids, req.body.app);\n    res.json({});\n  }\n\n  getStationOutput(req, res) {\n    this.logger.debug(`HTTP request received: Get output of station ${req.params.id}`);\n    const station = this.stationManager.getStationByID(req.params.id);\n    if (station) {\n      res.json({\n        lines: station.outputBuffer.getAll(),\n      });\n    } else {\n      this.logger.error(`Requested output of non existant station ${req.params.id}`);\n      res.status(404).send('Station not found');\n    }\n  }\n\n  getServerOutput(req, res) {\n    this.logger.debug('HTTP request received: Get global output');\n    res.json({\n      lines: this.stationManager.globalHilbertCLIOutputBuffer.getAll(),\n    });\n  }\n\n  getServerMKLivestatus(req, res) {\n    this.logger.debug('HTTP request received: Get last MKLivestatus state');\n    res.json({\n      lastState: this.stationManager.lastMKLivestatusDump,\n    });\n  }\n\n  getNotifications(req, res) {\n    this.logger.debug('HTTP request received: Get notifications');\n    res.json({\n      notifications: this.stationManager.getLog(),\n    });\n  }\n\n  getServer() {\n    return this.server;\n  }\n\n  /**\n   * Return the URL of the icon of the specified app\n   *\n   * @param {string} appID - ID of the app\n   * @returns {string} - URL of the icon\n   */\n  static getIconURL(appID) {\n    if (iconmap[appID] !== undefined) {\n      return `icons/${iconmap[appID]}`;\n    }\n    return 'icons/none.png';\n  }\n\n  /**\n   * Start listening for requests on a port\n   *\n   * @param port\n   */\n  listen(port) {\n    this.server.listen(port);\n    this.logger.info(`Server listening on port ${port}.`);\n  }\n}\n"],"sourceRoot":"/source/"}