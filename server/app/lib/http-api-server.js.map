{"version":3,"sources":["lib/http-api-server.js"],"names":["EventEmitter","require","iconmap","express","bodyParser","HttpAPIServer","stationManager","nconf","logger","server","use","json","events","setupRoutes","stationDataResponse","updateID","stations","getStations","station","icon","getIconURL","app","stationsLongPoll","get","req","res","handleRequest","then","catch","on","signalUpdate","emit","post","body","ids","debug","status","send","startStations","stopStations","changeApp","params","id","getStationByID","lines","outputBuffer","getAll","error","globalHilbertCLIOutputBuffer","lastState","lastMKLivestatusDump","notifications","getLog","port","listen","info","appID","undefined"],"mappings":"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","file":"lib/http-api-server.js","sourcesContent":["import LongPollHandler from './long-poll-handler';\n\nconst EventEmitter = require('events').EventEmitter;\nconst iconmap = require('../../iconmap.json');\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nexport default class HttpAPIServer {\n\n  constructor(stationManager, nconf, logger) {\n    this.stationManager = stationManager;\n    this.nconf = nconf;\n    this.logger = logger;\n\n    this.server = express();\n    this.server.use(bodyParser.json());\n\n    this.events = new EventEmitter();\n\n    this.setupRoutes();\n  }\n\n  setupRoutes() {\n    function stationDataResponse(stationManager, updateID) {\n      const stations = stationManager.getStations();\n      for (const station of stations) {\n        station.icon = HttpAPIServer.getIconURL(station.app);\n      }\n\n      return {\n        updateID,\n        stations,\n      };\n    }\n\n    const stationsLongPoll = new LongPollHandler(this.nconf.get('long_poll_timeout'));\n    this.server.get('/stations/poll', (req, res) => {\n      stationsLongPoll.handleRequest(req, res)\n        .then((updateID) => {\n          res.json(stationDataResponse(this.stationManager, updateID));\n        })\n        .catch(() => {\n          res.json({});\n        });\n    });\n\n    this.stationManager.events.on('stationUpdate', () => {\n      stationsLongPoll.signalUpdate();\n    });\n\n    stationsLongPoll.events.on('wait', () => {\n      this.events.emit('longPollWait');\n    });\n    stationsLongPoll.events.on('timeout', () => {\n      this.events.emit('longPollTimeout');\n    });\n\n    this.server.get('/stations', (req, res) => {\n      res.json(stationDataResponse(this.stationManager));\n    });\n\n    this.server.post('/stations/start', (req, res) => {\n      if (!req.body.ids) {\n        this.logger.debug(\"HTTP request received: Start stations missing required 'ids' argument\");\n        res.status(400).send(\"Missing 'ids' argument\");\n        return;\n      }\n      this.logger.debug(`HTTP request received: Start stations ${req.body.ids}`);\n      this.stationManager.startStations(req.body.ids);\n      res.json({});\n    });\n\n    this.server.post('/stations/stop', (req, res) => {\n      if (!req.body.ids) {\n        this.logger.debug(\"HTTP request received: Stop stations missing required 'ids' argument\");\n        res.status(400).send(\"Missing 'ids' argument\");\n        return;\n      }\n      this.logger.debug(`HTTP request received: Stop stations ${req.body.ids}`);\n      this.stationManager.stopStations(req.body.ids);\n      res.json({});\n    });\n\n    this.server.post('/stations/change_app', (req, res) => {\n      if (!req.body.ids) {\n        this.logger.debug(\"HTTP request received: Change app missing required 'ids' argument\");\n        res.status(400).send(\"Missing 'ids' argument\");\n        return;\n      }\n      if (!req.body.app) {\n        this.logger.debug(\"HTTP request received: Change app missing required 'app' argument\");\n        res.status(400).send(\"Missing 'app' argument\");\n        return;\n      }\n      this.logger.debug(\n        `HTTP request received: Change app of stations ${req.body.ids} to ${req.body.app}`);\n      this.stationManager.changeApp(req.body.ids, req.body.app);\n      res.json({});\n    });\n\n    this.server.get('/station/:id/output', (req, res) => {\n      this.logger.debug(`HTTP request received: Get output of station ${req.params.id}`);\n      const station = this.stationManager.getStationByID(req.params.id);\n      if (station) {\n        res.json({\n          lines: station.outputBuffer.getAll(),\n        });\n      } else {\n        this.logger.error(`Requested output of non existant station ${req.params.id}`);\n        res.status(404).send('Station not found');\n      }\n    });\n\n    this.server.get('/server/output', (req, res) => {\n      this.logger.debug('HTTP request received: Get global output');\n      res.json({\n        lines: this.stationManager.globalHilbertCLIOutputBuffer.getAll(),\n      });\n    });\n\n    this.server.get('/server/mklivestatus', (req, res) => {\n      this.logger.debug('HTTP request received: Get last MKLivestatus state');\n      res.json({\n        lastState: this.stationManager.lastMKLivestatusDump,\n      });\n    });\n\n    this.server.get('/notifications', (req, res) => {\n      this.logger.debug('HTTP request received: Get notifications');\n      res.json({\n        notifications: this.stationManager.getLog(),\n      });\n    });\n  }\n\n  getServer() {\n    return this.server;\n  }\n\n  /**\n   * Return the URL of the icon of the specified app\n   *\n   * @param {string} appID - ID of the app\n   * @returns {string} - URL of the icon\n   */\n  static getIconURL(appID) {\n    if (iconmap[appID] !== undefined) {\n      return `icons/${iconmap[appID]}`;\n    }\n    return 'icons/none.png';\n  }\n\n  /**\n   * Start listening for requests on a port\n   *\n   * @param port\n   */\n  listen(port) {\n    this.server.listen(port);\n    this.logger.info(`Server listening on port ${port}.`);\n  }\n}\n"],"sourceRoot":"/source/"}