{"version":3,"sources":["lib/http-api-server.js"],"names":["EventEmitter","require","iconmap","express","bodyParser","HttpAPIServer","stationManager","logger","pollTimeoutDelay","server","use","json","events","setupRoutes","pollUpdateEmitter","setMaxListeners","updateID","stationDataResponse","stations","getStations","station","icon","getIconURL","app","get","req","res","Number","query","lastUpdateID","pollTimeout","setTimeout","emit","once","data","clearTimeout","on","post","body","ids","debug","status","send","startStations","stopStations","changeApp","params","id","getStationByID","lines","outputBuffer","getAll","error","globalHilbertCLIOutputBuffer","lastState","lastMKLivestatusDump","notifications","getLog","port","listen","info","appID","undefined"],"mappings":"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","file":"lib/http-api-server.js","sourcesContent":["const EventEmitter = require('events').EventEmitter;\nconst iconmap = require('../../iconmap.json');\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nexport default class HttpAPIServer {\n\n  constructor(stationManager, logger) {\n    this.pollTimeoutDelay = 15000;\n\n    this.stationManager = stationManager;\n    this.logger = logger;\n    this.server = express();\n    this.server.use(bodyParser.json());\n\n    this.events = new EventEmitter();\n\n    this.setupRoutes();\n  }\n\n  setupRoutes() {\n    // Longpoll begin\n    const pollUpdateEmitter = new EventEmitter();\n    pollUpdateEmitter.setMaxListeners(100);\n    let updateID = 1;\n\n    function stationDataResponse(stationManager) {\n      const stations = stationManager.getStations();\n      for (const station of stations) {\n        station.icon = HttpAPIServer.getIconURL(station.app);\n      }\n\n      return {\n        updateID,\n        stations,\n      };\n    }\n\n    this.server.get('/stations/poll', (req, res) => {\n      // if the client is out of sync respond immediately\n      if (Number(req.query.lastUpdateID) !== updateID) {\n        res.json(stationDataResponse(this.stationManager));\n      } else {\n        // On timeout send an empty updateFromMKLivestatus\n        const pollTimeout = setTimeout(() => {\n          this.events.emit('longPollTimeout', req, res);\n          pollUpdateEmitter.emit('updateFromMKLivestatus', {});\n        }, this.pollTimeoutDelay);\n\n        // If there was an updateFromMKLivestatus respond\n        pollUpdateEmitter.once('updateFromMKLivestatus', (data) => {\n          clearTimeout(pollTimeout);\n          res.json(data);\n        });\n\n        this.events.emit('longPollWait', req, res);\n      }\n    });\n\n    this.stationManager.events.on('stationUpdate', () => {\n      updateID += 1;\n      pollUpdateEmitter.emit('updateFromMKLivestatus', stationDataResponse(this.stationManager));\n    });\n\n    // Longpoll end\n\n    this.server.get('/stations', (req, res) => {\n      res.json(stationDataResponse(this.stationManager));\n    });\n\n    this.server.post('/stations/start', (req, res) => {\n      if (!req.body.ids) {\n        this.logger.debug(\"HTTP request received: Start stations missing required 'ids' argument\");\n        res.status(400).send(\"Missing 'ids' argument\");\n        return;\n      }\n      this.logger.debug(`HTTP request received: Start stations ${req.body.ids}`);\n      this.stationManager.startStations(req.body.ids);\n      res.json({});\n    });\n\n    this.server.post('/stations/stop', (req, res) => {\n      if (!req.body.ids) {\n        this.logger.debug(\"HTTP request received: Stop stations missing required 'ids' argument\");\n        res.status(400).send(\"Missing 'ids' argument\");\n        return;\n      }\n      this.logger.debug(`HTTP request received: Stop stations ${req.body.ids}`);\n      this.stationManager.stopStations(req.body.ids);\n      res.json({});\n    });\n\n    this.server.post('/stations/change_app', (req, res) => {\n      if (!req.body.ids) {\n        this.logger.debug(\"HTTP request received: Change app missing required 'ids' argument\");\n        res.status(400).send(\"Missing 'ids' argument\");\n        return;\n      }\n      if (!req.body.app) {\n        this.logger.debug(\"HTTP request received: Change app missing required 'app' argument\");\n        res.status(400).send(\"Missing 'app' argument\");\n        return;\n      }\n      this.logger.debug(\n        `HTTP request received: Change app of stations ${req.body.ids} to ${req.body.app}`);\n      this.stationManager.changeApp(req.body.ids, req.body.app);\n      res.json({});\n    });\n\n    this.server.get('/station/:id/output', (req, res) => {\n      this.logger.debug(`HTTP request received: Get output of station ${req.params.id}`);\n      const station = this.stationManager.getStationByID(req.params.id);\n      if (station) {\n        res.json({\n          lines: station.outputBuffer.getAll(),\n        });\n      } else {\n        this.logger.error(`Requested output of non existant station ${req.params.id}`);\n        res.status(404).send('Station not found');\n      }\n    });\n\n    this.server.get('/server/output', (req, res) => {\n      this.logger.debug('HTTP request received: Get global output');\n      res.json({\n        lines: this.stationManager.globalHilbertCLIOutputBuffer.getAll(),\n      });\n    });\n\n    this.server.get('/server/mklivestatus', (req, res) => {\n      this.logger.debug('HTTP request received: Get last MKLivestatus state');\n      res.json({\n        lastState: this.stationManager.lastMKLivestatusDump,\n      });\n    });\n\n    this.server.get('/notifications', (req, res) => {\n      this.logger.debug('HTTP request received: Get notifications');\n      res.json({\n        notifications: this.stationManager.getLog(),\n      });\n    });\n  }\n\n  getServer() {\n    return this.server;\n  }\n\n  /**\n   * Return the URL of the icon of the specified app\n   *\n   * @param {string} appID - ID of the app\n   * @returns {string} - URL of the icon\n   */\n  static getIconURL(appID) {\n    if (iconmap[appID] !== undefined) {\n      return `icons/${iconmap[appID]}`;\n    }\n    return 'icons/none.png';\n  }\n\n  /**\n   * Start listening for requests on a port\n   *\n   * @param port\n   */\n  listen(port) {\n    this.server.listen(port);\n    this.logger.info(`Server listening on port ${port}.`);\n  }\n}\n"],"sourceRoot":"/source/"}