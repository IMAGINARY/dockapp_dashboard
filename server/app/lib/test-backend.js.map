{"version":3,"sources":["lib/test-backend.js"],"names":[],"mappings":"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","file":"lib/test-backend.js","sourcesContent":["import Nagios from './nagios';\nimport TestDockAppConnector from './test-dockapp-connector';\nimport TestMKLivestatusConnector from './test-mk-livestatus-connector';\n\nconst testStations = require('../../tests/models/test_stations.json');\n\nexport default class TestBackend {\n\n  constructor(nconf, logger) {\n    this.nconf = nconf;\n    this.logger = logger;\n\n    this.dockAppConnector = new TestDockAppConnector(this, nconf, logger);\n    this.mkLivestatusConnector = new TestMKLivestatusConnector(this, nconf, logger);\n\n    this.state = new Map();\n    this.station_cfg = new Map();\n\n    for (const station of testStations) {\n      this.state.set(station.id, {\n        id: station.id,\n        state: Nagios.HostState.DOWN,\n        state_type: Nagios.StateType.HARD,\n        app_state: Nagios.ServiceState.UNKNOWN,\n        app_state_type: Nagios.StateType.HARD,\n        app_id: '',\n      });\n\n      this.station_cfg.set(station.id, {\n        id: station.id,\n        name: station.name,\n        type: station.type,\n        default_app: station.default_app,\n        possible_apps: station.possible_apps,\n      });\n    }\n  }\n\n  /**\n   * Returns a DockAppConnector stub for testing\n   * @returns {TestDockAppConnector}\n   */\n  getDockappConnector() {\n    return this.dockAppConnector;\n  }\n\n  /**\n   * Returns a MKLivestatusConnector stub for testing\n   * @returns {TestMKLivestatusConnector}\n   */\n  getMKLivestatusConnector() {\n    return this.mkLivestatusConnector;\n  }\n\n  getStationState() {\n    return this.state.values();\n  }\n\n  /**\n   * Reads the station config\n   * @returns {Promise}\n   * @resolve {Array} - List of stations\n   * @reject {Error}\n   */\n  getStationConfig() {\n    return new Promise((resolve) => {\n      this.randomDelay(1000, 3000).then(() => { resolve(this.station_cfg.values()); });\n    });\n  }\n\n  /**\n   * Starts a station\n   *\n   * @param stationID\n   * @returns {Promise}\n   */\n  startStation(stationID) {\n    return new Promise((resolve) => {\n      this.randomDelay(3000, 8000).then(() => {\n        const stationState = this.state.get(stationID);\n        const stationCfg = this.station_cfg.get(stationID);\n        if (stationState && (stationState.state === Nagios.HostState.DOWN)) {\n          stationState.state = Nagios.HostState.UP;\n          stationState.app_state = Nagios.ServiceState.OK;\n          stationState.app_state_type = Nagios.StateType.HARD;\n          stationState.app_id = stationCfg.default_app;\n        }\n      }).then(resolve);\n    });\n  }\n\n  /**\n   * Stops a station\n   *\n   * @param stationID\n   * @returns {Promise}\n   */\n  stopStation(stationID) {\n    return new Promise((resolve) => {\n      this.randomDelay(2000, 6000).then(() => {\n        const stationState = this.state.get(stationID);\n        if (stationState && (stationState.state === Nagios.HostState.UP)) {\n          stationState.state = Nagios.HostState.DOWN;\n          stationState.app_state = Nagios.ServiceState.UNKNOWN;\n          stationState.app_state_type = Nagios.StateType.HARD;\n          stationState.app_id = '';\n        }\n      }).then(resolve);\n    });\n  }\n\n  /**\n   * Change the foreground application running in a station\n   *\n   * @param {string} stationID - ID of the station\n   * @param {string} appID - ID of the app to set\n   * @returns {Promise}\n   */\n  changeApp(stationID, appID) {\n    return new Promise((resolve, reject) => {\n      this.randomDelay(1000, 5000).then(() => {\n        const stationState = this.state.get(stationID);\n        const stationCfg = this.station_cfg.get(stationID);\n\n        if (stationCfg.possible_apps.indexOf(appID) >= 0) {\n          stationState.app_id = appID;\n        }\n      }).then(() => {\n        if (appID === 'Sky explorer / Aladin lite') {\n          reject();\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Wait a random amount of time\n   * @private\n   * @param min\n   * @param max\n   * @returns {Promise}\n   */\n  randomDelay(min, max) {\n    return new Promise((resolve) => {\n      const delay = Math.floor(Math.random() * (max - min)) + min;\n      setTimeout(() => { resolve(); }, delay);\n    });\n  }\n}\n"],"sourceRoot":"/source/"}