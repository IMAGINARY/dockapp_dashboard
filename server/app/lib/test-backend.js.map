{"version":3,"sources":["lib/test-backend.js"],"names":["TestBackend","nconf","logger","simulateDelays","hilbertCLIConnector","mkLivestatusConnector","hilbertCfg","state","Map","station_cfg","Object","entries","Stations","stationID","stationData","addStation","id","stationCfg","set","name","description","profile","type","default_app","client_settings","hilbert_station_default_application","compatible_apps","compatible_applications","initStationState","HostState","DOWN","state_type","StateType","HARD","app_state","ServiceState","UNKNOWN","app_state_type","app_id","values","output","Promise","resolve","write","randomDelay","then","stationState","get","UP","OK","appID","reject","indexOf","min","max","delay","Math","floor","random","setTimeout"],"mappings":"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","file":"lib/test-backend.js","sourcesContent":["import Nagios from './nagios';\nimport TestHilbertCLIConnector from './test-hilbert-cli-connector';\nimport TestMKLivestatusConnector from './test-mk-livestatus-connector';\n\nexport default class TestBackend {\n\n  constructor(nconf, logger) {\n    this.simulateDelays = false;\n    this.nconf = nconf;\n    this.logger = logger;\n\n    this.hilbertCLIConnector = new TestHilbertCLIConnector(this, nconf, logger);\n    this.mkLivestatusConnector = new TestMKLivestatusConnector(this, nconf, logger);\n\n    this.hilbertCfg = null;\n\n    this.state = new Map();\n    this.station_cfg = new Map();\n  }\n\n  /**\n   * Loads test data\n   *\n   * If any data was previously loaded it's overwritten.\n   *\n   * @param {Array} hilbertCfg An array of station configurations\n   */\n  load(hilbertCfg) {\n    this.hilbertCfg = hilbertCfg;\n\n    this.state = new Map();\n    this.station_cfg = new Map();\n\n    for (const [stationID, stationData] of Object.entries(hilbertCfg.Stations)) {\n      this.addStation(stationID, stationData);\n    }\n  }\n\n  /**\n   * Adds a station\n   *\n   * @param id ID of the station\n   * @param stationCfg Configuration of the station, taken from the configuration file\n   */\n  addStation(id, stationCfg) {\n    this.station_cfg.set(id, {\n      id,\n      name: stationCfg.name,\n      description: stationCfg.description,\n      profile: stationCfg.profile,\n      type: stationCfg.type,\n      default_app: stationCfg.client_settings.hilbert_station_default_application,\n      compatible_apps: stationCfg.compatible_applications,\n    });\n\n    this.initStationState(id);\n  }\n\n  /**\n   * Initializes the state of a station to the default (station down, app down)\n   *\n   * @param {String} id Station ID\n   */\n  initStationState(id) {\n    this.state.set(id, {\n      id,\n      state: Nagios.HostState.DOWN,\n      state_type: Nagios.StateType.HARD,\n      app_state: Nagios.ServiceState.UNKNOWN,\n      app_state_type: Nagios.StateType.HARD,\n      app_id: '',\n    });\n  }\n\n  /**\n   * Returns a HilbertCLIConnector stub for testing\n   * @returns {TestHilbertCLIConnector}\n   */\n  getHilbertCLIConnector() {\n    return this.hilbertCLIConnector;\n  }\n\n  /**\n   * Returns a MKLivestatusConnector stub for testing\n   * @returns {TestMKLivestatusConnector}\n   */\n  getMKLivestatusConnector() {\n    return this.mkLivestatusConnector;\n  }\n\n  getStationState() {\n    return this.state.values();\n  }\n\n  /**\n   * Reads the station config\n   * @returns {Promise}\n   * @resolve {Array} - List of stations\n   * @reject {Error}\n   */\n  getHilbertCfg(output) {\n    return new Promise((resolve) => {\n      output.write('Simulating reading hilbert configuration. Waiting a random delay...');\n      this.randomDelay(1000, 3000).then(() => {\n        output.write('Wait finished.');\n        resolve(this.hilbertCfg);\n      });\n    });\n  }\n\n  /**\n   * Starts a station\n   *\n   * @param stationID\n   * @param {Writable} output - Command output should be written here\n   * @returns {Promise}\n   */\n  startStation(stationID, output) {\n    return new Promise((resolve) => {\n      output.write(`Simulating starting station ${stationID}. Waiting a random delay...`);\n      this.randomDelay(3000, 8000).then(() => {\n        output.write('Wait finished.');\n        const stationState = this.state.get(stationID);\n        const stationCfg = this.station_cfg.get(stationID);\n        if (stationState &&\n          (stationState.state === Nagios.HostState.DOWN)) {\n          stationState.state = Nagios.HostState.UP;\n          stationState.app_state = Nagios.ServiceState.OK;\n          stationState.app_state_type = Nagios.StateType.HARD;\n          stationState.app_id = stationCfg.default_app;\n          output.write(`Station state set to UP with app ${stationState.app_id}.`);\n        }\n      }).then(resolve);\n    });\n  }\n\n  /**\n   * Stops a station\n   *\n   * @param stationID\n   * @param {Writable} output - Command output should be written here\n   * @returns {Promise}\n   */\n  stopStation(stationID, output) {\n    return new Promise((resolve) => {\n      output.write(`Simulating stopping station ${stationID}. Waiting a random delay...`);\n      this.randomDelay(2000, 6000).then(() => {\n        output.write('Wait finished.');\n        const stationState = this.state.get(stationID);\n        if (stationState && (stationState.state === Nagios.HostState.UP)) {\n          stationState.state = Nagios.HostState.DOWN;\n          stationState.app_state = Nagios.ServiceState.UNKNOWN;\n          stationState.app_state_type = Nagios.StateType.HARD;\n          stationState.app_id = '';\n          output.write('Station state set to DOWN.');\n        }\n      }).then(resolve);\n    });\n  }\n\n  /**\n   * Change the foreground application running in a station\n   *\n   * @param {string} stationID - ID of the station\n   * @param {string} appID - ID of the app to set\n   * @param {Writable} output - Command output should be written here\n   * @returns {Promise}\n   */\n  changeApp(stationID, appID, output) {\n    return new Promise((resolve, reject) => {\n      output.write(\n        `Simulating changing app for station ${stationID} to ${appID}. Waiting a random delay...`);\n      this.randomDelay(1000, 5000).then(() => {\n        output.write('Wait finished.');\n        const stationState = this.state.get(stationID);\n        const stationCfg = this.station_cfg.get(stationID);\n\n        if (stationCfg.compatible_apps.indexOf(appID) >= 0) {\n          stationState.app_id = appID;\n          output.write('App changed.');\n        }\n      }).then(() => {\n        if (appID === 'Sky explorer / Aladin lite') {\n          output.write('Simulating failure when changing app to Sky explorer');\n          reject();\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Wait a random amount of time\n   * @private\n   * @param min\n   * @param max\n   * @returns {Promise}\n   */\n  randomDelay(min, max) {\n    if (this.simulateDelays) {\n      return new Promise((resolve) => {\n        const delay = Math.floor(Math.random() * (max - min)) + min;\n        setTimeout(() => {\n          resolve();\n        }, delay);\n      });\n    }\n\n    return Promise.resolve();\n  }\n}\n"],"sourceRoot":"/source/"}