{"version":3,"sources":["lib/test-backend.js"],"names":["testStations","require","TestBackend","nconf","logger","hilbertCLIConnector","mkLivestatusConnector","state","Map","station_cfg","station","set","id","HostState","DOWN","state_type","StateType","HARD","app_state","ServiceState","UNKNOWN","app_state_type","app_id","name","type","default_app","possible_apps","values","output","Promise","resolve","write","randomDelay","then","stationID","stationState","get","stationCfg","UP","OK","appID","reject","indexOf","min","max","delay","Math","floor","random","setTimeout"],"mappings":"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","file":"lib/test-backend.js","sourcesContent":["import Nagios from './nagios';\nimport TestHilbertCLIConnector from './test-hilbert-cli-connector';\nimport TestMKLivestatusConnector from './test-mk-livestatus-connector';\n\nconst testStations = require('../../data/test_mode/test_stations.json');\n\nexport default class TestBackend {\n\n  constructor(nconf, logger) {\n    this.nconf = nconf;\n    this.logger = logger;\n\n    this.hilbertCLIConnector = new TestHilbertCLIConnector(this, nconf, logger);\n    this.mkLivestatusConnector = new TestMKLivestatusConnector(this, nconf, logger);\n\n    this.state = new Map();\n    this.station_cfg = new Map();\n\n    for (const station of testStations) {\n      this.state.set(station.id, {\n        id: station.id,\n        state: Nagios.HostState.DOWN,\n        state_type: Nagios.StateType.HARD,\n        app_state: Nagios.ServiceState.UNKNOWN,\n        app_state_type: Nagios.StateType.HARD,\n        app_id: '',\n      });\n\n      this.station_cfg.set(station.id, {\n        id: station.id,\n        name: station.name,\n        type: station.type,\n        default_app: station.default_app,\n        possible_apps: station.possible_apps,\n      });\n    }\n  }\n\n  /**\n   * Returns a HilbertCLIConnector stub for testing\n   * @returns {TestHilbertCLIConnector}\n   */\n  getHilbertCLIConnector() {\n    return this.hilbertCLIConnector;\n  }\n\n  /**\n   * Returns a MKLivestatusConnector stub for testing\n   * @returns {TestMKLivestatusConnector}\n   */\n  getMKLivestatusConnector() {\n    return this.mkLivestatusConnector;\n  }\n\n  getStationState() {\n    return this.state.values();\n  }\n\n  /**\n   * Reads the station config\n   * @returns {Promise}\n   * @resolve {Array} - List of stations\n   * @reject {Error}\n   */\n  getStationConfig(output) {\n    return new Promise((resolve) => {\n      output.write(`Simulating reading station configuration. Waiting a random delay...`);\n      this.randomDelay(1000, 3000).then(() => {\n        output.write('Wait finished.');\n        resolve(this.station_cfg.values());\n      });\n    });\n  }\n\n  /**\n   * Starts a station\n   *\n   * @param stationID\n   * @param {stream} output - Command output should be written here\n   * @returns {Promise}\n   */\n  startStation(stationID, output) {\n    return new Promise((resolve) => {\n      output.write(`Simulating starting station ${stationID}. Waiting a random delay...`);\n      this.randomDelay(3000, 8000).then(() => {\n        output.write('Wait finished.');\n        const stationState = this.state.get(stationID);\n        const stationCfg = this.station_cfg.get(stationID);\n        if (stationState && (stationState.state === Nagios.HostState.DOWN)) {\n          stationState.state = Nagios.HostState.UP;\n          stationState.app_state = Nagios.ServiceState.OK;\n          stationState.app_state_type = Nagios.StateType.HARD;\n          stationState.app_id = stationCfg.default_app;\n          output.write(`Station state set to UP with app ${stationState.app_id}.`);\n        }\n      }).then(resolve);\n    });\n  }\n\n  /**\n   * Stops a station\n   *\n   * @param stationID\n   * @param {stream} output - Command output should be written here\n   * @returns {Promise}\n   */\n  stopStation(stationID, output) {\n    return new Promise((resolve) => {\n      output.write(`Simulating stopping station ${stationID}. Waiting a random delay...`);\n      this.randomDelay(2000, 6000).then(() => {\n        output.write('Wait finished.');\n        const stationState = this.state.get(stationID);\n        if (stationState && (stationState.state === Nagios.HostState.UP)) {\n          stationState.state = Nagios.HostState.DOWN;\n          stationState.app_state = Nagios.ServiceState.UNKNOWN;\n          stationState.app_state_type = Nagios.StateType.HARD;\n          stationState.app_id = '';\n          output.write('Station state set to DOWN.');\n        }\n      }).then(resolve);\n    });\n  }\n\n  /**\n   * Change the foreground application running in a station\n   *\n   * @param {string} stationID - ID of the station\n   * @param {string} appID - ID of the app to set\n   * @param {stream} output - Command output should be written here\n   * @returns {Promise}\n   */\n  changeApp(stationID, appID, output) {\n    return new Promise((resolve, reject) => {\n      output.write(\n        `Simulating changing app for station ${stationID} to ${appID}. Waiting a random delay...`);\n      this.randomDelay(1000, 5000).then(() => {\n        output.write('Wait finished.');\n        const stationState = this.state.get(stationID);\n        const stationCfg = this.station_cfg.get(stationID);\n\n        if (stationCfg.possible_apps.indexOf(appID) >= 0) {\n          stationState.app_id = appID;\n          output.write('App changed.');\n        }\n      }).then(() => {\n        if (appID === 'Sky explorer / Aladin lite') {\n          output.write('Simulating failure when changing app to Sky explorer');\n          reject();\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Wait a random amount of time\n   * @private\n   * @param min\n   * @param max\n   * @returns {Promise}\n   */\n  randomDelay(min, max) {\n    return new Promise((resolve) => {\n      const delay = Math.floor(Math.random() * (max - min)) + min;\n      setTimeout(() => { resolve(); }, delay);\n    });\n  }\n}\n"],"sourceRoot":"/source/"}