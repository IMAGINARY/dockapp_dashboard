// Compiled by Babel
// ** DO NOT EDIT THIS FILE DIRECTLY **
//
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Writable = require('stream').Writable;

var TerminalOutputBuffer = function (_Writable) {
  _inherits(TerminalOutputBuffer, _Writable);

  function TerminalOutputBuffer(options) {
    _classCallCheck(this, TerminalOutputBuffer);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(TerminalOutputBuffer).call(this, options));

    _this.lines = [];
    return _this;
  }

  /**
   * Private handler for Writable stream
   * @param chunk
   * @param encoding
   * @param callback
   * @private
   */


  _createClass(TerminalOutputBuffer, [{
    key: '_write',
    value: function _write(chunk, encoding, callback) {
      this.lines.push({
        time: Date.now(),
        data: chunk.toString()
      });

      if (this.lines.length > TerminalOutputBuffer.DEFAULT_MAX_LINES) {
        this.lines.splice(0, this.lines.length - TerminalOutputBuffer.DEFAULT_MAX_LINES);
      }
      callback();
    }

    /**
     * Returns the full output in the buffer
     * @returns {string}
     */

  }, {
    key: 'getAll',
    value: function getAll() {
      return this.getSince(0);
    }

    /**
     * Returns the output in the buffer since a certain time
     * @param {int} aTime - Timestamp
     * @returns {string}
     */

  }, {
    key: 'getSince',
    value: function getSince(aTime) {
      var data = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var lineData = _step.value;

          if (lineData.time > aTime) {
            data.push(lineData.data);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return data;
    }
  }]);

  return TerminalOutputBuffer;
}(Writable);

exports.default = TerminalOutputBuffer;


TerminalOutputBuffer.DEFAULT_MAX_LINES = 80;
//# sourceMappingURL=terminal-output-buffer.js.map
