{"version":3,"sources":["lib/mk-livestatus-query.js"],"names":[],"mappings":"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","file":"lib/mk-livestatus-query.js","sourcesContent":["const Promise = require(\"bluebird\");\n/**\n * Generates MK Livestatus queries\n *\n * This class is responsible for formatting the query and parsing\n * the response, but not with the actual communication. The connector\n * that handles communication is passed on creation.\n *\n * http://mathias-kettner.com/checkmk_livestatus.html\n */\nexport default class MKLivestatusQuery {\n\n  /**\n   * Constructor\n   * @param {MKLivestatusConnector} connector\n   */\n  constructor(connector) {\n    this.connector = connector;\n    this.tableName = null;\n    this.queryColumns = [];\n    this.queryColumnAliases = null;\n    this.queryFilters = [];\n  }\n\n  /**\n   * Inits a GET query\n   * @param {String} tableName\n   * @returns {MKLivestatusQuery}\n   */\n  get(tableName) {\n    this.tableName = tableName;\n    return this;\n  }\n\n  /**\n   * Specifies columns to return\n   *\n   * If this method is never called the query will return all columns\n   * If it's called several times the columns will be added\n   *\n   * @param {Array|String} columnList\n   * @returns {MKLivestatusQuery}\n   */\n  columns(columnList) {\n    this.queryColumns = this.queryColumns.concat(columnList);\n\n    return this;\n  }\n\n  /**\n   * Specifies aliases to column names\n   *\n   * An array with one alias per queries columned must be provided.\n   * @param {Array} columnAliases\n   * @returns {MKLivestatusQuery}\n   */\n  asColumns(columnAliases) {\n    this.queryColumnAliases = columnAliases;\n\n    return this;\n  }\n\n  /**\n   * Adds a filter condition\n   *\n   * This class does not yet support disjunctions (OR)\n   *\n   * @param {String} condition\n   * @returns {MKLivestatusQuery}\n   */\n  filter(condition) {\n    this.queryFilters.push(condition);\n\n    return this;\n  }\n\n  /**\n   * Converts the query to a string command\n   * @returns {string}\n   */\n  toString() {\n    const output = [];\n    output.push(`GET ${this.tableName}`);\n\n    if (this.queryColumns.length > 0) {\n      output.push(`Columns: ${this.queryColumns.join(' ')}`);\n    }\n\n    for (const filter of this.queryFilters) {\n      output.push(`Filter: ${filter}`);\n    }\n\n    output.push('OutputFormat: json');\n    output.push('ColumnHeaders: on');\n\n    return output.join('\\n');\n  }\n\n  /**\n   * Executes the query\n   * @returns {Promise}\n   * @resolve {Array} Response rows\n   * @reject {Error}\n   */\n  execute() {\n    return this.connector.sendCommand(this.toString()).then((response) => {\n      return this.parseResponse(response);\n    });\n  }\n\n  /**\n   * Parses the response arrays to an array of objects\n   * Uses the first row as a list of names.\n   * @private\n   *\n   * @param response {String}\n   * @returns {Array}\n   */\n  parseResponse(response) {\n\n    const rows = JSON.parse(response)\n\n    if (!rows instanceof Array) {\n      throw new Error(`Unable to parse MKLivestatus response: ${response}`);\n    }\n\n    if (rows.length < 1) {\n      throw new Error('Empty MKLivestatus response');\n    }\n\n    const firstRow = rows.slice(0, 1)[0];\n    const nameRow = this.queryColumnAliases !== null ? this.queryColumnAliases : firstRow;\n\n    for (const columnName of nameRow) {\n      if (this.queryColumns.indexOf(columnName) === -1) {\n        throw new Error(`MKLivestatus response includes unexpected column ${columnName}`);\n      }\n    }\n    for (const columnName of this.queryColumns) {\n      if (nameRow.indexOf(columnName) === -1) {\n        throw new Error(`MKLivestatus response missing column ${columnName}`);\n      }\n    }\n\n    const rest = rows.slice(1);\n    const objects = [];\n    for (const row of rest) {\n      const rowObject = {};\n      for (let i = 0; (i !== nameRow.length) && (i < 100); i++) {\n        rowObject[nameRow[i]] = row[i];\n      }\n      objects.push(rowObject);\n    }\n    return objects;\n  }\n}\n"],"sourceRoot":"/source/"}