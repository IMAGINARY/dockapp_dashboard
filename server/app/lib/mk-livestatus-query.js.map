{"version":3,"sources":["lib/mk-livestatus-query.js"],"names":["MKLivestatusQuery","connector","tableName","queryColumns","queryColumnAliases","queryFilters","columnList","concat","columnAliases","condition","push","output","length","join","filter","sendCommand","toString","then","response","parseResponse","rows","JSON","parse","Array","Error","firstRow","slice","nameRow","columnName","indexOf","rest","objects","row","rowObject","i"],"mappings":"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","file":"lib/mk-livestatus-query.js","sourcesContent":["/**\n * Generates MK Livestatus queries\n *\n * This class is responsible for formatting the query and parsing\n * the response, but not with the actual communication. The connector\n * that handles communication is passed on creation.\n *\n * http://mathias-kettner.com/checkmk_livestatus.html\n */\nexport default class MKLivestatusQuery {\n\n  /**\n   * Constructor\n   * @param {MKLivestatusConnector} connector\n   */\n  constructor(connector) {\n    this.connector = connector;\n    this.tableName = null;\n    this.queryColumns = [];\n    this.queryColumnAliases = null;\n    this.queryFilters = [];\n  }\n\n  /**\n   * Inits a GET query\n   * @param {String} tableName\n   * @returns {MKLivestatusQuery}\n   */\n  get(tableName) {\n    this.tableName = tableName;\n    return this;\n  }\n\n  /**\n   * Specifies columns to return\n   *\n   * If this method is never called the query will return all columns\n   * If it's called several times the columns will be added\n   *\n   * @param {Array|String} columnList\n   * @returns {MKLivestatusQuery}\n   */\n  columns(columnList) {\n    this.queryColumns = this.queryColumns.concat(columnList);\n\n    return this;\n  }\n\n  /**\n   * Specifies aliases to column names\n   *\n   * An array with one alias per queries columned must be provided.\n   * @param {Array} columnAliases\n   * @returns {MKLivestatusQuery}\n   */\n  asColumns(columnAliases) {\n    this.queryColumnAliases = columnAliases;\n\n    return this;\n  }\n\n  /**\n   * Adds a filter condition\n   *\n   * This class does not yet support disjunctions (OR)\n   *\n   * @param {String} condition\n   * @returns {MKLivestatusQuery}\n   */\n  filter(condition) {\n    this.queryFilters.push(condition);\n\n    return this;\n  }\n\n  /**\n   * Converts the query to a string command\n   * @returns {string}\n   */\n  toString() {\n    const output = [];\n    output.push(`GET ${this.tableName}`);\n\n    if (this.queryColumns.length > 0) {\n      output.push(`Columns: ${this.queryColumns.join(' ')}`);\n    }\n\n    for (const filter of this.queryFilters) {\n      output.push(`Filter: ${filter}`);\n    }\n\n    output.push('OutputFormat: json');\n    output.push('ColumnHeaders: on');\n\n    return output.join('\\n');\n  }\n\n  /**\n   * Executes the query\n   * @returns {Promise}\n   * @resolve {Array} Response rows\n   * @reject {Error}\n   */\n  execute() {\n    return this.connector\n      .sendCommand(this.toString())\n      .then((response) => this.parseResponse(response));\n  }\n\n  /**\n   * Parses the response arrays to an array of objects\n   * Uses the first row as a list of names.\n   * @private\n   *\n   * @param response {String}\n   * @returns {Array}\n   */\n  parseResponse(response) {\n    const rows = JSON.parse(response);\n\n    if (!rows instanceof Array) {\n      throw new Error(`Unable to parse MKLivestatus response: ${response}`);\n    }\n\n    if (rows.length < 1) {\n      throw new Error('Empty MKLivestatus response');\n    }\n\n    const firstRow = rows.slice(0, 1)[0];\n    const nameRow = this.queryColumnAliases !== null ? this.queryColumnAliases : firstRow;\n\n    for (const columnName of firstRow) {\n      if (this.queryColumns.indexOf(columnName) === -1) {\n        throw new Error(\n          `MKLivestatus response includes unexpected column ${columnName} (${firstRow})`\n        );\n      }\n    }\n    for (const columnName of this.queryColumns) {\n      if (firstRow.indexOf(columnName) === -1) {\n        throw new Error(`MKLivestatus response missing column ${columnName} (${firstRow})`);\n      }\n    }\n\n    const rest = rows.slice(1);\n    const objects = [];\n    for (const row of rest) {\n      const rowObject = {};\n      for (let i = 0; (i !== nameRow.length) && (i < 100); i++) {\n        rowObject[nameRow[i]] = row[i];\n      }\n      objects.push(rowObject);\n    }\n    return objects;\n  }\n}\n"],"sourceRoot":"/source/"}