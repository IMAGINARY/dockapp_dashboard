// Compiled by Babel
// ** DO NOT EDIT THIS FILE DIRECTLY **
//
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _preset = require('./preset');

var _preset2 = _interopRequireDefault(_preset);

var _presetStore = require('./preset-store');

var _presetStore2 = _interopRequireDefault(_presetStore);

var _duplicateIdentifierError = require('./duplicate-identifier-error');

var _duplicateIdentifierError2 = _interopRequireDefault(_duplicateIdentifierError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var validate = require('express-validation');
var Joi = require('joi');
/**
 * Module that adds supports for Presets to the HTTP Api Server
 */

var PresetsModule = function () {
  function PresetsModule(httpApiServer) {
    _classCallCheck(this, PresetsModule);

    this.httpApiServer = httpApiServer;
    this.stationManager = this.httpApiServer.stationManager;
    this.logger = this.httpApiServer.logger;
    this.nconf = this.httpApiServer.nconf;
    this.presetStore = new _presetStore2.default();
  }

  _createClass(PresetsModule, [{
    key: 'init',
    value: function init() {
      this.logger.info('Initializing Presets module');
      return this.presetStore.open(this.nconf.get('db_path'));
    }
  }, {
    key: 'setupRoutes',
    value: function setupRoutes(router) {
      router.get('/presets', this.getAllPresets.bind(this));
      router.post('/preset', validate(PresetsModule.addPresetSchema()), this.addPreset.bind(this));
      router.get('/preset/:id', validate(PresetsModule.getPresetSchema()), this.getPreset.bind(this));
      router.put('/preset/:id', validate(PresetsModule.updatePresetSchema()), this.updatePreset.bind(this));
      router.delete('/preset/:id', validate(PresetsModule.deletePresetSchema()), this.deletePreset.bind(this));
      router.post('/preset/:id/activate', validate(PresetsModule.activatePresetSchema()), this.activatePreset.bind(this));
    }
  }, {
    key: 'getAllPresets',
    value: function getAllPresets(req, res) {
      this.presetStore.loadAllPresets().then(function (allPresets) {
        var jsonPresets = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = allPresets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var preset = _step.value;

            jsonPresets.push(preset.toJSON());
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        res.json({
          presets: jsonPresets
        });
      }).catch(function (err) {
        res.status(500).json({ error: err.message });
      });
    }
  }, {
    key: 'getPreset',
    value: function getPreset(req, res) {
      this.presetStore.loadPreset(req.params.id).then(function (preset) {
        if (preset === null) {
          res.status(404).send('Preset not found');
        } else {
          res.json(preset.toJSON());
        }
      }).catch(function (err) {
        res.status(500).json({ error: err.message });
      });
    }
  }, {
    key: 'addPreset',
    value: function addPreset(req, res) {
      var newPreset = this.presetStore.createPreset(req.body);
      newPreset.save().then(function (preset) {
        res.json(preset.toJSON());
      }).catch(function (err) {
        if (err instanceof _duplicateIdentifierError2.default) {
          res.status(400).json({ error: err.message });
        } else {
          res.status(500).json({ error: err.message });
        }
      });
    }
  }, {
    key: 'updatePreset',
    value: function updatePreset(req, res) {
      this.presetStore.loadPreset(req.params.id).then(function (preset) {
        if (preset === null) {
          res.status(404).send('Preset not found');
        } else {
          if (req.body.name) {
            preset.name = req.body.name;
          }
          if (req.body.stationApps) {
            preset.stationApps = Object.assign({}, req.body.stationApps);
          }
          preset.save().then(function () {
            res.json(preset.toJSON());
          }).catch(function (err) {
            if (err instanceof _duplicateIdentifierError2.default) {
              res.status(400).json({ error: err.message });
            } else {
              res.status(500).json({ error: err.message });
            }
          });
        }
      }).catch(function (err) {
        res.status(500).json({ error: err.message });
      });
    }
  }, {
    key: 'deletePreset',
    value: function deletePreset(req, res) {
      this.presetStore.loadPreset(req.params.id).then(function (preset) {
        if (preset === null) {
          res.status(404).send('Preset not found');
        } else {
          return preset.remove().then(function () {
            res.status(200).send('');
          });
        }
        return Promise.resolve();
      }).catch(function (err) {
        res.status(500).json({ error: err.message });
      });
    }
  }, {
    key: 'activatePreset',
    value: function activatePreset(req, res) {
      var _this = this;

      this.presetStore.loadPreset(req.params.id).then(function (preset) {
        if (preset === null) {
          res.status(404).send('Preset not found');
        } else {
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = Object.entries(preset.stationApps)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var _step2$value = _slicedToArray(_step2.value, 2);

              var stationID = _step2$value[0];
              var appID = _step2$value[1];

              _this.stationManager.changeApp([stationID], appID);
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }

          res.status(200).send('');
        }
      }).catch(function (err) {
        res.status(500).json({ error: err.message });
      });
    }
  }], [{
    key: 'presetIdParamSchema',
    value: function presetIdParamSchema() {
      return {
        params: {
          id: Joi.number().min(1).max(_preset2.default.MAX_ID).required()
        }
      };
    }
  }, {
    key: 'getPresetSchema',
    value: function getPresetSchema() {
      return PresetsModule.presetIdParamSchema();
    }
  }, {
    key: 'addPresetSchema',
    value: function addPresetSchema() {
      return {
        body: {
          name: Joi.string().min(1).max(_preset2.default.MAX_NAME_LEN).required(),
          stationApps: Joi.object().pattern(/./, Joi.string().min(1)).required()
        }
      };
    }
  }, {
    key: 'updatePresetSchema',
    value: function updatePresetSchema() {
      return Object.assign(PresetsModule.presetIdParamSchema(), {
        body: {
          name: Joi.string().min(1).max(_preset2.default.MAX_NAME_LEN),
          stationApps: Joi.object().pattern(/./, Joi.string().min(1))
        }
      });
    }
  }, {
    key: 'deletePresetSchema',
    value: function deletePresetSchema() {
      return PresetsModule.presetIdParamSchema();
    }
  }, {
    key: 'activatePresetSchema',
    value: function activatePresetSchema() {
      return PresetsModule.presetIdParamSchema();
    }
  }]);

  return PresetsModule;
}();

exports.default = PresetsModule;
//# sourceMappingURL=presets-module.js.map
