{"version":3,"sources":["lib/presets/preset.js"],"names":["Preset","presetStore","store","id","name","clearAllStationApps","stationData","stationID","appID","insertPreset","then","updatePreset","removePreset"],"mappings":";;;;;;;;;;AAAA;;;IAGqBA,M;;AAEnB;;;;;;AAMA,kBAAYC,WAAZ,EAAyB;AAAA;;AACvB,SAAKC,KAAL,GAAaD,WAAb;AACA,SAAKE,EAAL,GAAU,IAAV;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,mBAAL;AACD;;AAED;;;;;;;0CAGsB;AACpB,WAAKC,WAAL,GAAmB,EAAnB;AACD;;AAED;;;;;;;;;kCAMcC,S,EAAWC,K,EAAO;AAC9B,WAAKF,WAAL,CAAiBC,SAAjB,IAA8BC,KAA9B;AACD;;AAED;;;;;;;;;kCAMcA,K,EAAO;AACnB,aAAO,KAAKF,WAAL,CAAiBE,KAAjB,CAAP;AACD;;AAED;;;;;;;;;;2BAOO;AAAA;;AACL,UAAI,KAAKL,EAAL,KAAY,IAAhB,EAAsB;AACpB,eAAO,KAAKD,KAAL,CAAWO,YAAX,CAAwB,IAAxB,EAA8BC,IAA9B,CAAmC,UAACP,EAAD,EAAQ;AAChD,gBAAKA,EAAL,GAAUA,EAAV;AACA;AACD,SAHM,CAAP;AAID;AACD,aAAO,KAAKD,KAAL,CAAWS,YAAX,CAAwB,IAAxB,CAAP;AACD;;AAED;;;;;;;;;;6BAOS;AAAA;;AACP,aAAO,KAAKT,KAAL,CAAWU,YAAX,CAAwB,IAAxB,EAA8BF,IAA9B,CAAmC,YAAM;AAC9C,eAAKP,EAAL,GAAU,IAAV;AACD,OAFM,CAAP;AAGD;;;;;;kBAtEkBH,M","file":"lib/presets/preset.js","sourcesContent":["/**\n * Represents a single Preset with its associated data\n */\nexport default class Preset {\n\n  /**\n   * Constructor. Instead of calling this directly use PresetStore::createPreset\n   *\n   * @param {PresetStore} presetStore\n   *  Store where the preset will be persisted\n   */\n  constructor(presetStore) {\n    this.store = presetStore;\n    this.id = null;\n    this.name = null;\n    this.clearAllStationApps();\n  }\n\n  /**\n   * Clears app assignments for all stations\n   */\n  clearAllStationApps() {\n    this.stationData = {};\n  }\n\n  /**\n   * Set the app for a station\n   *\n   * @param {String} stationID\n   * @param {String} appID\n   */\n  setStationApp(stationID, appID) {\n    this.stationData[stationID] = appID;\n  }\n\n  /**\n   * Get the app for a station\n   *\n   * @param {String} appID\n   * @return {Object}\n   */\n  getStationApp(appID) {\n    return this.stationData[appID];\n  }\n\n  /**\n   * Saves the preset in the store\n   *\n   * If the preset's id was null one will be set after calling this function.\n   *\n   * @return {Promise.<Preset>}\n   */\n  save() {\n    if (this.id === null) {\n      return this.store.insertPreset(this).then((id) => {\n        this.id = id;\n        return this;\n      });\n    }\n    return this.store.updatePreset(this);\n  }\n\n  /**\n   * Deletes the preset from the store\n   *\n   * The id field is nulled after deleting.\n   *\n   * @return {Promise.<Preset>}\n   */\n  remove() {\n    return this.store.removePreset(this).then(() => {\n      this.id = null;\n    });\n  }\n}\n"],"sourceRoot":"/source/"}