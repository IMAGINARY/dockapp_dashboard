{"version":3,"sources":["lib/test_model.js"],"names":[],"mappings":"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","file":"lib/test_model.js","sourcesContent":["const testStations = require('../../tests/models/test_stations.json');\nconst iconmap = require('../../iconmap.json');\n\nclass TestModel {\n\n  constructor(config, logger) {\n    this.config = config;\n    this.logger = logger;\n    this.stations = testStations;\n    for (const station of this.stations) {\n      station.icon = this.getIconURL(station.app);\n    }\n    this.logEntries = [];\n  }\n\n  getStations(done) {\n    done(this.stations);\n  }\n\n  startStations(stationIDs) {\n    for (const stationID of stationIDs) {\n      const station = this.getStationState(stationID);\n      if (station) {\n        if (station.state === 'off') {\n          station.state = 'busy';\n          station.status = 'Starting...';\n          setTimeout(() => {\n            station.state = 'on';\n            station.status = '';\n            this.log('message', station, 'Station started');\n          }, this.getRandomInt(1000, 8000));\n        }\n      }\n    }\n  }\n\n  stopStations(stationIDs) {\n    for (const stationID of stationIDs) {\n      const station = this.getStationState(stationID);\n      if (station) {\n        if (station.state === 'on') {\n          station.state = 'busy';\n          station.status = 'Stopping...';\n          setTimeout(() => {\n            station.state = 'off';\n            station.status = '';\n            this.log('message', station, 'Station stopped');\n          }, this.getRandomInt(3000, 8000));\n        }\n      }\n    }\n  }\n\n  changeApp(stationIDs, app) {\n    for (const stationID of stationIDs) {\n      const station = this.getStationState(stationID);\n      if (station) {\n        if (station.state === 'on' && app === 'Sky explorer / Aladin lite') {\n          station.state = 'busy';\n          station.status = `Switching to ${app}...`;\n          station.app = '';\n          setTimeout(() => {\n            station.app = app;\n            station.icon = this.getIconURL(app);\n            station.state = 'error';\n            station.status = 'Failure launching app';\n            this.log('error', station, `Failed to launch app ${app}`);\n          }, this.getRandomInt(1000, 5000));\n        }\n        if (station.state === 'on' && station.possible_apps.indexOf(app) >= 0 &&\n          station.app !== app) {\n          station.state = 'busy';\n          station.status = `Switching to ${app}...`;\n          station.app = '';\n          setTimeout(() => {\n            station.app = app;\n            station.icon = this.getIconURL(app);\n            station.state = 'on';\n            station.status = '';\n            this.log('message', station, `Launched app ${app}`);\n          }, this.getRandomInt(1000, 5000));\n        }\n      }\n    }\n  }\n\n  getIconURL(app) {\n    if (iconmap[app] !== undefined) {\n      return `icons/${iconmap[app]}`;\n    }\n    return 'icons/none.png';\n  }\n\n  getLog() {\n    return { entries: this.logEntries };\n  }\n\n  log(type, station, message) {\n    const newLogEntry = {\n      id: this.logEntries.length + 1,\n      time: new Date().toISOString(),\n      type,\n      message,\n    };\n\n    if (station !== null) {\n      newLogEntry.station_id = station.id;\n      newLogEntry.station_name = station.name;\n    }\n\n    this.logEntries.push(newLogEntry);\n\n    const maxEntries = this.config.get('max_log_length');\n    if (this.logEntries.length > maxEntries) {\n      this.logEntries = this.logEntries.slice(this.logEntries.length - maxEntries);\n    }\n  }\n\n  // @private\n  getStationState(id) {\n    for (const station of this.stations) {\n      if (station.id === id) {\n        return station;\n      }\n    }\n\n    return null;\n  }\n\n  // @private\n  getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n}\n\nmodule.exports = TestModel;\n"],"sourceRoot":"/source/"}