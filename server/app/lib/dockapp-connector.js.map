{"version":3,"sources":["lib/dockapp-connector.js"],"names":[],"mappings":"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","file":"lib/dockapp-connector.js","sourcesContent":["const Promise = require('bluebird');\nconst exec = require('child_process').exec;\n\n/**\n * Interface with DockApp via scripts\n *\n * This class doesn't check the state of the stations before dispatching\n * the commands.\n */\nexport default class DockAppConnector {\n\n  constructor(nconf, logger) {\n    this.nconf = nconf;\n    this.logger = logger;\n  }\n\n  /**\n   * Reads the station config\n   * @param {TerminalOutputBuffer} output\n   * @returns {Promise}\n   * @resolve {Array} - List of stations\n   * @reject {Error}\n   */\n  getStationConfig(output) {\n    this.logger.debug('DockApp: Getting station config');\n    return new Promise((resolve, reject) => {\n      const cmd = `${DockAppConnector.SCRIPT_LIST_STATIONS} ${this.nconf.get('dockapp_path')}`;\n      this.execute(cmd, output)\n        .then((answer) => {\n          this.logger.debug(`DockApp: Station config read:\n${answer}`);\n          const stationCfg = JSON.parse(answer);\n          if (!stationCfg instanceof Array) {\n            throw new Error(`Dockapp returned an invalid station config: ${answer}`);\n          }\n          if (stationCfg.length === 0) {\n            throw new Error('Dockapp returned an empty station config.');\n          }\n          resolve(stationCfg);\n        })\n        .catch((err) => {\n          this.logger.error(`DockApp: Error getting station config '${err.message}'`);\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Start a station\n   * @param {string} stationID - ID of the station\n   * @param {stream} output - Command output should be written here\n   * @returns Promise\n   */\n  startStation(stationID, output) {\n    this.logger.debug(`DockApp: Starting station ${stationID}`);\n    return new Promise((resolve, reject) => {\n      const cmd =\n        `${this.nconf.get('dockapp_path')}/${DockAppConnector.DOCKAPP_SCRIPT_START_STATION}`;\n      this.execute(`${cmd} ${stationID}`, output)\n        .then(() => {\n          resolve();\n        })\n        .catch((err) => {\n          this.logger.error(`DockApp: Error starting station ${stationID}, '${err.message}'`);\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Stop a station\n   * @param {string} stationID - ID of the station\n   * @param {stream} output - Command output should be written here\n   * @returns Promise\n   */\n  stopStation(stationID, output) {\n    this.logger.debug(`DockApp: Stopping station ${stationID}`);\n    return new Promise((resolve, reject) => {\n      const cmd =\n        `${this.nconf.get('dockapp_path')}/${DockAppConnector.DOCKAPP_SCRIPT_STOP_STATION}`;\n      this.execute(`${cmd} ${stationID}`, output)\n        .then(() => {\n          resolve();\n        })\n        .catch((err) => {\n          this.logger.error(`DockApp: Error stopping station ${stationID}, '${err.message}'`);\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Change the foreground application running in a station\n   * @param {string} stationID - ID of the station\n   * @param {string} appID - ID of the app to set\n   * @param {stream} output - Command output should be written here\n   * @returns {Promise}\n   */\n  changeApp(stationID, appID, output) {\n    this.logger.debug(`DockApp: Changing app of station ${stationID} to ${appID}`);\n    return new Promise((resolve, reject) => {\n      const cmd =\n        `${this.nconf.get('dockapp_path')}/${DockAppConnector.DOCKAPP_SCRIPT_CHANGE_APP}`;\n      this.execute(`${cmd} ${stationID} ${appID}`, output)\n        .then(() => {\n          resolve();\n        })\n        .catch((err) => {\n          this.logger.error(\n            `DockApp: Error changing station ${stationID} to app ${appID}, '${err.message}'`);\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Executes a child process\n   * @private\n   *\n   * @param {string} command - Command to execute\n   * @param {stream} output - Command output should be written here\n   * @returns {Promise}\n   * @resolve {String} - stdout output\n   * @reject {Error}\n   */\n  execute(command, output) {\n    return new Promise((resolve, reject) => {\n      let stdoutBuf = '';\n      let alloutBuf = '';\n      this.logger.debug(`Executing '${command}'`);\n      const process = exec(command);\n      process.stdout.on('data', (data) => {\n        stdoutBuf += data;\n        alloutBuf += data;\n        output.write(data);\n      });\n      process.stderr.on('data', (data) => {\n        alloutBuf += data;\n        output.write(data);\n      });\n      process.on('close', (code, signal) => {\n        if (code === 0) {\n          this.logger.debug(`Execution of ${command} finished with code 0 (success).`);\n          resolve(stdoutBuf);\n        } else {\n          let term = `rc=${code}`;\n          if (signal !== null) {\n            term = `${term}, ${signal}`;\n          }\n          this.logger.error(`Execution of ${command} finished with ${term}.`);\n          this.logger.debug('Output:');\n          this.logger.debug(alloutBuf);\n          reject(new Error(`Command '${command}' exited with ${term}. ${alloutBuf}`));\n        }\n      });\n    });\n  }\n}\n\nDockAppConnector.SCRIPT_LIST_STATIONS = './scripts/list_stations.sh';\nDockAppConnector.DOCKAPP_SCRIPT_START_STATION = 'start.sh';\nDockAppConnector.DOCKAPP_SCRIPT_STOP_STATION = 'shutdown.sh';\nDockAppConnector.DOCKAPP_SCRIPT_CHANGE_APP = 'topswitch.sh';\n"],"sourceRoot":"/source/"}