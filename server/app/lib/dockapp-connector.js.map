{"version":3,"sources":["lib/dockapp-connector.js"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAM,UAAU,QAAQ,UAAR,CAAhB;AACA,IAAM,OAAO,QAAQ,eAAR,EAAyB,IAAtC;;;;;;;;;IAQqB,gB;AAEnB,4BAAY,KAAZ,EAAmB,MAAnB,EAA2B;AAAA;;AACzB,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,MAAL,GAAc,MAAd;AACD;;;;;;;;;;;;uCAQkB;AAAA;;AACjB,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,cAAK,OAAL,CAAgB,iBAAiB,oBAAjC,SAAyD,MAAK,KAAL,CAAW,GAAX,CAAe,cAAf,CAAzD,EACG,IADH,CACQ,UAAC,MAAD,EAAY;AAChB,kBAAQ,KAAK,KAAL,CAAW,MAAX,CAAR;AACD,SAHH,EAIG,KAJH,CAIS,UAAC,GAAD;AAAA,iBAAS,OAAO,GAAP,CAAT;AAAA,SAJT;AAKD,OANM,CAAP;AAOD;;;;;;;;;;iCAOY,S,EAAW;AACtB,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC;AACD,OAFM,CAAP;AAGD;;;;;;;;;;gCAOW,S,EAAW;AACrB,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC;AACD,OAFM,CAAP;AAGD;;;;;;;;;;;8BAQS,S,EAAW,K,EAAO;AAC1B,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC;AACD,OAFM,CAAP;AAGD;;;;;;;;;;;;;;4BAWO,O,EAAS;AACf,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,YAAI,YAAY,EAAhB;AACA,YAAI,YAAY,EAAhB;AACA,YAAM,UAAU,KAAK,OAAL,CAAhB;AACA,gBAAQ,MAAR,CAAe,EAAf,CAAkB,MAAlB,EAA0B,UAAC,IAAD,EAAU;AAClC,uBAAa,IAAb;AACD,SAFD;AAGA,gBAAQ,MAAR,CAAe,EAAf,CAAkB,MAAlB,EAA0B,UAAC,IAAD,EAAU;AAClC,uBAAa,IAAb;AACD,SAFD;AAGA,gBAAQ,EAAR,CAAW,OAAX,EAAoB,UAAC,IAAD,EAAO,MAAP,EAAkB;AACpC,cAAI,SAAS,CAAb,EAAgB;AACd,oBAAQ,SAAR;AACD,WAFD,MAEO;AACL,gBAAI,eAAa,IAAjB;AACA,gBAAI,SAAS,EAAb;AACA,gBAAI,WAAW,IAAf,EAAqB;AACnB,qBAAU,IAAV,UAAmB,MAAnB;AACD;AACD,gBAAI,UAAU,MAAd,EAAsB;AACpB,sCAAsB,SAAtB;AACD;AACD,mBAAO,IAAI,KAAJ,gBAAsB,OAAtB,uBAA8C,IAA9C,SAAsD,MAAtD,CAAP;AACD;AACF,SAdD;AAeD,OAzBM,CAAP;AA0BD;;;;;;kBA7FkB,gB;;;AAgGrB,iBAAiB,oBAAjB,GAAwC,0BAAxC","file":"lib/dockapp-connector.js","sourcesContent":["const Promise = require('bluebird');\nconst exec = require('child_process').exec;\n\n/**\n * Interface with DockApp via scripts\n *\n * This class doesn't check the state of the stations before dispatching\n * the commands.\n */\nexport default class DockAppConnector {\n\n  constructor(nconf, logger) {\n    this.nconf = nconf;\n    this.logger = logger;\n  }\n\n  /**\n   * Reads the station config\n   * @returns {Promise}\n   * @resolve {Array} - List of stations\n   * @reject {Error}\n   */\n  getStationConfig() {\n    return new Promise((resolve, reject) => {\n      this.execute(`${DockAppConnector.SCRIPT_LIST_STATIONS} ${this.nconf.get('dockapp_path')}`)\n        .then((output) => {\n          resolve(JSON.parse(output));\n        })\n        .catch((err) => reject(err));\n    });\n  }\n\n  /**\n   * Start a station\n   * @param {string} stationID - ID of the station\n   * @returns Promise\n   */\n  startStation(stationID) {\n    return new Promise((resolve, reject) => {\n      resolve();\n    });\n  }\n\n  /**\n   * Stop a station\n   * @param {string} stationID - ID of the station\n   * @returns Promise\n   */\n  stopStation(stationID) {\n    return new Promise((resolve, reject) => {\n      resolve();\n    });\n  }\n\n  /**\n   * Change the foreground application running in a station\n   * @param {string} stationID - ID of the station\n   * @param {string} appID - ID of the app to set\n   * @returns {Promise}\n   */\n  changeApp(stationID, appID) {\n    return new Promise((resolve, reject) => {\n      resolve();\n    });\n  }\n\n  /**\n   * Executes a child process\n   * @private\n   *\n   * @param command\n   * @returns {Promise}\n   * @resolve {String} - stdout output\n   * @reject {Error}\n   */\n  execute(command) {\n    return new Promise((resolve, reject) => {\n      let stdoutBuf = '';\n      let stderrBuf = '';\n      const process = exec(command);\n      process.stdout.on('data', (data) => {\n        stdoutBuf += data;\n      });\n      process.stderr.on('data', (data) => {\n        stderrBuf += data;\n      });\n      process.on('close', (code, signal) => {\n        if (code === 0) {\n          resolve(stdoutBuf);\n        } else {\n          let term = `rc=${code}`;\n          let output = '';\n          if (signal !== null) {\n            term = `${term}, ${signal}`;\n          }\n          if (stderrBuf.length) {\n            output = `\\nstderr: ${stderrBuf}`;\n          }\n          reject(new Error(`Command '${command}' exited with ${term}.${output}`));\n        }\n      });\n    });\n  }\n}\n\nDockAppConnector.SCRIPT_LIST_STATIONS = 'scripts/list_stations.sh';\n"],"sourceRoot":"/source/"}