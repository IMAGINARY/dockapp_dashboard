{"version":3,"sources":["lib/dockapp-connector.js"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAM,OAAO,QAAQ,eAAR,EAAyB,IAAtC;;;;;;;;;IAQqB,gB;AAEnB,4BAAY,KAAZ,EAAmB,MAAnB,EAA2B;AAAA;;AACzB,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,MAAL,GAAc,MAAd;AACD;;;;gCAEW,I,EAAM,K,EAAO;AACvB,UAAM,wCAAsC,KAAK,MAAL,CAAY,GAAZ,CAAgB,cAAhB,CAA5C;AACA,WAAK,OAAL,EAAc,EAAd,EAAkB,UAAC,GAAD,EAAM,MAAN,EAAiB;AACjC,YAAI,GAAJ,EAAS;AACP,gBAAM,GAAN;AACD,SAFD,MAEO;AACL,cAAM,WAAW,KAAK,KAAL,CAAW,MAAX,CAAjB;AACA,eAAK,IAAI,IAAI,CAAb,EAAgB,MAAM,SAAS,QAAT,CAAkB,MAAxC,EAAgD,GAAhD,EAAqD;AACnD,qBAAS,QAAT,CAAkB,CAAlB,EAAqB,KAArB,GAA6B,IAA7B;AACA,qBAAS,QAAT,CAAkB,CAAlB,EAAqB,MAArB,GAA8B,EAA9B;AACD;AACD,eAAK,SAAS,QAAd;AACD;AACF,OAXD;AAYD;;;;;;;;;;iCAOY,S,EAAW;AACtB,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC;AACD,OAFM,CAAP;AAGD;;;;;;;;;;gCAOW,S,EAAW;AACrB,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC;AACD,OAFM,CAAP;AAGD;;;;;;;;;;;8BAQS,S,EAAW,K,EAAO;AAC1B,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC;AACD,OAFM,CAAP;AAGD;;;;;;kBAvDkB,gB","file":"lib/dockapp-connector.js","sourcesContent":["const exec = require('child_process').exec;\n\n/**\n * Interface with DockApp via scripts\n * \n * This class doesn't check the state of the stations before dispatching\n * the commands.\n */\nexport default class DockAppConnector {\n\n  constructor(nconf, logger) {\n    this.nconf = nconf;\n    this.logger = logger;\n  }\n\n  getStations(done, error) {\n    const command = `scripts/list_stations.sh ${this.config.get('dockapp_path')}`;\n    exec(command, {}, (err, stdout) => {\n      if (err) {\n        error(err);\n      } else {\n        const response = JSON.parse(stdout);\n        for (let i = 0; i !== response.stations.length; i++) {\n          response.stations[i].state = 'on';\n          response.stations[i].status = '';\n        }\n        done(response.stations);\n      }\n    });\n  }\n\n  /**\n   * Start a station\n   * @param {string} stationID - ID of the station\n   * @returns Promise\n   */\n  startStation(stationID) {\n    return new Promise((resolve, reject) => {\n      resolve();\n    });\n  }\n\n  /**\n   * Stop a station\n   * @param {string} stationID - ID of the station\n   * @returns Promise\n   */\n  stopStation(stationID) {\n    return new Promise((resolve, reject) => {\n      resolve();\n    });\n  }\n\n  /**\n   * Change the foreground application running in a station\n   * @param {string} stationID - ID of the station\n   * @param {string} appID - ID of the app to set\n   * @returns Promise\n   */\n  changeApp(stationID, appID) {\n    return new Promise((resolve, reject) => {\n      resolve();\n    });\n  }\n}\n"],"sourceRoot":"/source/"}