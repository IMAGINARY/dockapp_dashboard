// Compiled by Babel
// ** DO NOT EDIT THIS FILE DIRECTLY **
//
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Testing stub for DockAppConnector
 *
 * Simulates the dockapp commands with a random delay
 */

var TestDockAppConnector = function () {

  /**
   * Returns the state of the stations
   * Returns an array of objects with shape
   * {name: 'station name ', state: 0, state_type: 1,
   * app_state: 0, app_state_type: 1, app_name: 'fg app name'}
   *
   * @returns {Promise}
   * @resolve {Array}
   */

  function TestDockAppConnector(testBackend, nconf, logger) {
    _classCallCheck(this, TestDockAppConnector);

    this.nconf = nconf;
    this.logger = logger;
    this.testBackend = testBackend;
  }

  /**
   * Reads the station config
   * @returns {Promise}
   * @resolve {Array} - List of stations
   * @reject {Error}
   */


  _createClass(TestDockAppConnector, [{
    key: "getStationConfig",
    value: function getStationConfig() {
      return this.testBackend.getStationConfig();
    }

    /**
     * Starts a station
     *
     * @param stationID
     * @returns {Promise}
     */

  }, {
    key: "startStation",
    value: function startStation(stationID) {
      return this.testBackend.startStation(stationID);
    }

    /**
     * Stops a station
     *
     * @param stationID
     * @returns {Promise}
     */

  }, {
    key: "stopStation",
    value: function stopStation(stationID) {
      return this.testBackend.stopStation(stationID);
    }

    /**
     * Change the foreground application running in a station
     *
     * @param {string} stationID - ID of the station
     * @param {string} appID - ID of the app to set
     * @returns {Promise}
     */

  }, {
    key: "changeApp",
    value: function changeApp(stationID, appID) {
      return this.testBackend.changeApp(stationID, appID);
    }
  }]);

  return TestDockAppConnector;
}();

exports.default = TestDockAppConnector;
//# sourceMappingURL=test-dockapp-connector.js.map
