// Compiled by Babel
// ** DO NOT EDIT THIS FILE DIRECTLY **
//
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var exec = require('child_process').exec;

var Dockapp = function () {
  function Dockapp(config) {
    _classCallCheck(this, Dockapp);

    this.config = config;
  }

  _createClass(Dockapp, [{
    key: 'getStations',
    value: function getStations(done, error) {
      var command = 'scripts/list_stations.sh ' + this.config.get('dockapp_path');
      exec(command, {}, function (err, stdout) {
        if (err) {
          error(err);
        } else {
          var response = JSON.parse(stdout);
          for (var i = 0; i !== response.stations.length; i++) {
            response.stations[i].state = 'on';
            response.stations[i].status = '';
          }
          done(response.stations);
        }
      });
    }
  }]);

  return Dockapp;
}();

module.exports = Dockapp;
//# sourceMappingURL=dockapp_model.js.map
