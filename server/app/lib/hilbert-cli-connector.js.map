{"version":3,"sources":["lib/hilbert-cli-connector.js"],"names":["Promise","require","exec","HilbertCLIConnector","nconf","logger","output","verbose","resolve","reject","execute","get","COMMAND_DUMP_CFG","then","answer","debug","stationCfg","JSON","parse","Object","Error","length","catch","err","error","message","stationID","SCRIPT_START_STATION","SCRIPT_STOP_STATION","appID","SCRIPT_CHANGE_APP","command","options","stdoutBuf","alloutBuf","execOptions","assign","env","process","HILBERT_CLI_PATH","HILBERT_SERVER_CONFIG_PATH","LC_CTYPE","childProcess","stdout","on","data","write","stderr","code","signal","term"],"mappings":"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","file":"lib/hilbert-cli-connector.js","sourcesContent":["const Promise = require('bluebird');\nconst exec = require('child_process').exec;\n\n/**\n * Interface with hilbert-cli\n *\n * This class doesn't check the state of the stations before dispatching\n * the commands.\n */\nexport default class HilbertCLIConnector {\n\n  constructor(nconf, logger) {\n    this.nconf = nconf;\n    this.logger = logger;\n  }\n\n  /**\n   * Reads the station config\n   * @param {TerminalOutputBuffer} output\n   * @returns {Promise}\n   * @resolve {Array} - List of stations\n   * @reject {Error}\n   */\n  getHilbertCfg(output) {\n    this.logger.verbose('hilbert-cli: Getting station config');\n    return new Promise((resolve, reject) => {\n      this.execute(`${this.nconf.get('hilbert_cli')} ${HilbertCLIConnector.COMMAND_DUMP_CFG}`, output)\n        .then((answer) => {\n          this.logger.debug(`hilbert-cli: Station config read:\n${answer}`);\n          const stationCfg = JSON.parse(answer);\n          if (!(stationCfg instanceof Object)) {\n            throw new Error(`hilbert-cli returned an invalid station config: ${answer}`);\n          }\n          if (stationCfg.length === 0) {\n            throw new Error('hilbert-cli returned an empty station config.');\n          }\n          resolve(stationCfg);\n        })\n        .catch((err) => {\n          this.logger.error(`hilbert-cli: Error getting station config '${err.message}'`);\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Start a station\n   * @param {string} stationID - ID of the station\n   * @param {stream} output - Command output should be written here\n   * @returns Promise\n   */\n  startStation(stationID, output) {\n    this.logger.verbose(`hilbert-cli: Starting station ${stationID}`);\n    return new Promise((resolve, reject) => {\n      this.execute(`${HilbertCLIConnector.SCRIPT_START_STATION} ${stationID}`, output)\n        .then(() => {\n          resolve();\n        })\n        .catch((err) => {\n          this.logger.error(`hilbert-cli: Error starting station ${stationID}, '${err.message}'`);\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Stop a station\n   * @param {string} stationID - ID of the station\n   * @param {stream} output - Command output should be written here\n   * @returns Promise\n   */\n  stopStation(stationID, output) {\n    this.logger.verbose(`hilbert-cli: Stopping station ${stationID}`);\n    return new Promise((resolve, reject) => {\n      this.execute(`${HilbertCLIConnector.SCRIPT_STOP_STATION} ${stationID}`, output)\n        .then(() => {\n          resolve();\n        })\n        .catch((err) => {\n          this.logger.error(`hilbert-cli: Error stopping station ${stationID}, '${err.message}'`);\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Change the foreground application running in a station\n   * @param {string} stationID - ID of the station\n   * @param {string} appID - ID of the app to set\n   * @param {stream} output - Command output should be written here\n   * @returns {Promise}\n   */\n  changeApp(stationID, appID, output) {\n    this.logger.verbose(`hilbert-cli: Changing app of station ${stationID} to ${appID}`);\n    return new Promise((resolve, reject) => {\n      this.execute(`${HilbertCLIConnector.SCRIPT_CHANGE_APP} ${stationID} ${appID}`, output)\n        .then(() => {\n          resolve();\n        })\n        .catch((err) => {\n          this.logger.error(\n            `hilbert-cli: Error changing station ${stationID} to app ${appID}, '${err.message}'`);\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Executes a child process\n   * @private\n   *\n   * @param {string} command - Command to execute\n   * @param {stream} output - Command output should be written here\n   * @param {object} options - Options to pass child_process.exec\n   * @returns {Promise}\n   * @resolve {String} - stdout output\n   * @reject {Error}\n   */\n  execute(command, output, options) {\n    return new Promise((resolve, reject) => {\n      let stdoutBuf = '';\n      let alloutBuf = '';\n      this.logger.verbose(`Executing '${command}'`);\n\n      const execOptions = Object.assign({}, options); // clone\n\n      if (!('env' in execOptions)) {\n        execOptions.env = Object.assign({}, process.env);\n      } else {\n        execOptions.env = Object.assign({}, process.env, execOptions.env);\n      }\n      if (!('HILBERT_CLI_PATH' in execOptions.env)) {\n        execOptions.env.HILBERT_CLI_PATH = this.nconf.get('hilbert_cli');\n      }\n      if (!('HILBERT_SERVER_CONFIG_PATH' in execOptions.env)) {\n        execOptions.env.HILBERT_SERVER_CONFIG_PATH = this.nconf.get('hilbert_cfg');\n      }\n\n      // This setting below is needed to avoid issues in mac\n      // When running from the IDE my env had the invalid locale en_AR.UTF-8\n      // (Argentine english???) and this caused a fallback to ascii for ruamel\n      // reading the config file.\n      execOptions.env.LC_CTYPE = 'UTF-8';\n\n      const childProcess = exec(command, execOptions);\n      childProcess.stdout.on('data', (data) => {\n        stdoutBuf += data;\n        alloutBuf += data;\n        output.write(data);\n      });\n      childProcess.stderr.on('data', (data) => {\n        alloutBuf += data;\n        output.write(data);\n      });\n      childProcess.on('close', (code, signal) => {\n        if (code === 0) {\n          this.logger.verbose(`Execution of ${command} finished with code 0 (success).`);\n          resolve(stdoutBuf);\n        } else {\n          let term = `rc=${code}`;\n          if (signal !== null) {\n            term = `${term}, ${signal}`;\n          }\n          this.logger.error(`Execution of ${command} finished with ${term}.`);\n          this.logger.verbose('Output:');\n          this.logger.verbose(alloutBuf);\n          reject(new Error(`Command '${command}' exited with ${term}. ${alloutBuf}`));\n        }\n      });\n    });\n  }\n}\n\nHilbertCLIConnector.COMMAND_DUMP_CFG = 'cfg_query -f json';\nHilbertCLIConnector.SCRIPT_START_STATION = './scripts/start_station.sh';\nHilbertCLIConnector.SCRIPT_STOP_STATION = './scripts/stop_station.sh';\nHilbertCLIConnector.SCRIPT_CHANGE_APP = './scripts/appchange_station.sh';\n"],"sourceRoot":"/source/"}