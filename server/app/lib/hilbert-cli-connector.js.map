{"version":3,"sources":["lib/hilbert-cli-connector.js"],"names":["Promise","require","exec","HilbertCLIConnector","nconf","logger","output","verbose","resolve","reject","execute","SCRIPT_LIST_STATIONS","then","answer","debug","stationCfg","JSON","parse","Array","Error","length","catch","err","error","message","stationID","SCRIPT_START_STATION","SCRIPT_STOP_STATION","appID","SCRIPT_CHANGE_APP","command","options","stdoutBuf","alloutBuf","execOptions","Object","assign","hasOwnProperty","env","HILBERT_CLI_PATH","get","process","stdout","on","data","write","stderr","code","signal","term"],"mappings":"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","file":"lib/hilbert-cli-connector.js","sourcesContent":["const Promise = require('bluebird');\nconst exec = require('child_process').exec;\n\n/**\n * Interface with hilbert-cli\n *\n * This class doesn't check the state of the stations before dispatching\n * the commands.\n */\nexport default class HilbertCLIConnector {\n\n  constructor(nconf, logger) {\n    this.nconf = nconf;\n    this.logger = logger;\n  }\n\n  /**\n   * Reads the station config\n   * @param {TerminalOutputBuffer} output\n   * @returns {Promise}\n   * @resolve {Array} - List of stations\n   * @reject {Error}\n   */\n  getStationConfig(output) {\n    this.logger.verbose('hilbert-cli: Getting station config');\n    return new Promise((resolve, reject) => {\n      this.execute(HilbertCLIConnector.SCRIPT_LIST_STATIONS, output)\n        .then((answer) => {\n          this.logger.debug(`hilbert-cli: Station config read:\n${answer}`);\n          const stationCfg = JSON.parse(answer);\n          if (!stationCfg instanceof Array) {\n            throw new Error(`hilbert-cli returned an invalid station config: ${answer}`);\n          }\n          if (stationCfg.length === 0) {\n            throw new Error('hilbert-cli returned an empty station config.');\n          }\n          resolve(stationCfg);\n        })\n        .catch((err) => {\n          this.logger.error(`hilbert-cli: Error getting station config '${err.message}'`);\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Start a station\n   * @param {string} stationID - ID of the station\n   * @param {stream} output - Command output should be written here\n   * @returns Promise\n   */\n  startStation(stationID, output) {\n    this.logger.verbose(`hilbert-cli: Starting station ${stationID}`);\n    return new Promise((resolve, reject) => {\n      this.execute(`${HilbertCLIConnector.SCRIPT_START_STATION} ${stationID}`, output)\n        .then(() => {\n          resolve();\n        })\n        .catch((err) => {\n          this.logger.error(`hilbert-cli: Error starting station ${stationID}, '${err.message}'`);\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Stop a station\n   * @param {string} stationID - ID of the station\n   * @param {stream} output - Command output should be written here\n   * @returns Promise\n   */\n  stopStation(stationID, output) {\n    this.logger.verbose(`hilbert-cli: Stopping station ${stationID}`);\n    return new Promise((resolve, reject) => {\n      this.execute(`${HilbertCLIConnector.SCRIPT_STOP_STATION} ${stationID}`, output)\n        .then(() => {\n          resolve();\n        })\n        .catch((err) => {\n          this.logger.error(`hilbert-cli: Error stopping station ${stationID}, '${err.message}'`);\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Change the foreground application running in a station\n   * @param {string} stationID - ID of the station\n   * @param {string} appID - ID of the app to set\n   * @param {stream} output - Command output should be written here\n   * @returns {Promise}\n   */\n  changeApp(stationID, appID, output) {\n    this.logger.verbose(`hilbert-cli: Changing app of station ${stationID} to ${appID}`);\n    return new Promise((resolve, reject) => {\n      this.execute(`${HilbertCLIConnector.SCRIPT_CHANGE_APP} ${stationID} ${appID}`, output)\n        .then(() => {\n          resolve();\n        })\n        .catch((err) => {\n          this.logger.error(\n            `hilbert-cli: Error changing station ${stationID} to app ${appID}, '${err.message}'`);\n          reject(err);\n        });\n    });\n  }\n\n  /**\n   * Executes a child process\n   * @private\n   *\n   * @param {string} command - Command to execute\n   * @param {stream} output - Command output should be written here\n   * @param {object} options - Options to pass child_process.exec\n   * @returns {Promise}\n   * @resolve {String} - stdout output\n   * @reject {Error}\n   */\n  execute(command, output, options) {\n    return new Promise((resolve, reject) => {\n      let stdoutBuf = '';\n      let alloutBuf = '';\n      this.logger.verbose(`Executing '${command}'`);\n\n      const execOptions = Object.assign({}, options); // clone\n\n      if (!execOptions.hasOwnProperty('env')) {\n        execOptions.env = {};\n      }\n      if (!execOptions.env.hasOwnProperty('HILBERT_CLI_PATH')) {\n        execOptions.env.HILBERT_CLI_PATH = this.nconf.get('hilbert_cli_path');\n      }\n\n      const process = exec(command, execOptions);\n      process.stdout.on('data', (data) => {\n        stdoutBuf += data;\n        alloutBuf += data;\n        output.write(data);\n      });\n      process.stderr.on('data', (data) => {\n        alloutBuf += data;\n        output.write(data);\n      });\n      process.on('close', (code, signal) => {\n        if (code === 0) {\n          this.logger.verbose(`Execution of ${command} finished with code 0 (success).`);\n          resolve(stdoutBuf);\n        } else {\n          let term = `rc=${code}`;\n          if (signal !== null) {\n            term = `${term}, ${signal}`;\n          }\n          this.logger.error(`Execution of ${command} finished with ${term}.`);\n          this.logger.verbose('Output:');\n          this.logger.verbose(alloutBuf);\n          reject(new Error(`Command '${command}' exited with ${term}. ${alloutBuf}`));\n        }\n      });\n    });\n  }\n}\n\nHilbertCLIConnector.SCRIPT_LIST_STATIONS = './scripts/list_stations.sh';\nHilbertCLIConnector.SCRIPT_START_STATION = './scripts/start_station.sh';\nHilbertCLIConnector.SCRIPT_STOP_STATION = './scripts/stop_station.sh';\nHilbertCLIConnector.SCRIPT_CHANGE_APP = './scripts/appchange_station.sh';\n"],"sourceRoot":"/source/"}