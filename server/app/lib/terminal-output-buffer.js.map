{"version":3,"sources":["lib/terminal-output-buffer.js"],"names":["Writable","require","TerminalOutputBuffer","options","lines","chunk","encoding","callback","push","time","Date","now","data","toString","length","DEFAULT_MAX_LINES","splice","getSince","aTime","lineData"],"mappings":";;;;;;;;;;;;;;AAAA,IAAMA,WAAWC,QAAQ,QAAR,EAAkBD,QAAnC;;IAEqBE,oB;;;AAEnB,gCAAYC,OAAZ,EAAqB;AAAA;;AAAA,4IACbA,OADa;;AAGnB,UAAKC,KAAL,GAAa,EAAb;AAHmB;AAIpB;;AAED;;;;;;;;;;;2BAOOC,K,EAAOC,Q,EAAUC,Q,EAAU;AAChC,WAAKH,KAAL,CAAWI,IAAX,CAAgB;AACdC,cAAMC,KAAKC,GAAL,EADQ;AAEdC,cAAMP,MAAMQ,QAAN;AAFQ,OAAhB;;AAKA,UAAI,KAAKT,KAAL,CAAWU,MAAX,GAAoBZ,qBAAqBa,iBAA7C,EAAgE;AAC9D,aAAKX,KAAL,CAAWY,MAAX,CAAkB,CAAlB,EAAqB,KAAKZ,KAAL,CAAWU,MAAX,GAAoBZ,qBAAqBa,iBAA9D;AACD;AACDR;AACD;;AAED;;;;;;;6BAIS;AACP,aAAO,KAAKU,QAAL,CAAc,CAAd,CAAP;AACD;;AAED;;;;;;;;6BAKSC,K,EAAO;AACd,UAAMN,OAAO,EAAb;AADc;AAAA;AAAA;;AAAA;AAEd,6BAAuB,KAAKR,KAA5B,8HAAmC;AAAA,cAAxBe,QAAwB;;AACjC,cAAIA,SAASV,IAAT,IAAiBS,KAArB,EAA4B;AAC1BN,iBAAKJ,IAAL,CAAUW,SAASP,IAAnB;AACD;AACF;AANa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQd,aAAOA,IAAP;AACD;;;;EAjD+CZ,Q;;kBAA7BE,oB;;;AAoDrBA,qBAAqBa,iBAArB,GAAyC,EAAzC","file":"lib/terminal-output-buffer.js","sourcesContent":["const Writable = require('stream').Writable;\n\nexport default class TerminalOutputBuffer extends Writable {\n\n  constructor(options) {\n    super(options);\n\n    this.lines = [];\n  }\n\n  /**\n   * Private handler for Writable stream\n   * @param chunk\n   * @param encoding\n   * @param callback\n   * @private\n   */\n  _write(chunk, encoding, callback) {\n    this.lines.push({\n      time: Date.now(),\n      data: chunk.toString(),\n    });\n\n    if (this.lines.length > TerminalOutputBuffer.DEFAULT_MAX_LINES) {\n      this.lines.splice(0, this.lines.length - TerminalOutputBuffer.DEFAULT_MAX_LINES);\n    }\n    callback();\n  }\n\n  /**\n   * Returns the full output in the buffer\n   * @returns {string}\n   */\n  getAll() {\n    return this.getSince(0);\n  }\n\n  /**\n   * Returns the output in the buffer since a certain time\n   * @param {int} aTime - Timestamp\n   * @returns {string}\n   */\n  getSince(aTime) {\n    const data = [];\n    for (const lineData of this.lines) {\n      if (lineData.time >= aTime) {\n        data.push(lineData.data);\n      }\n    }\n\n    return data;\n  }\n}\n\nTerminalOutputBuffer.DEFAULT_MAX_LINES = 80;\n"],"sourceRoot":"/source/"}