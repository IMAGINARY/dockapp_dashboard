{"version":3,"sources":["lib/terminal-output-buffer.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,IAAM,WAAW,QAAQ,QAAR,EAAkB,QAAnC;;IAEqB,oB;;;AAEnB,gCAAY,OAAZ,EAAqB;AAAA;;AAAA,wGACb,OADa;;AAGnB,UAAK,KAAL,GAAa,EAAb;AAHmB;AAIpB;;;;;;;;;;;;;2BASM,K,EAAO,Q,EAAU,Q,EAAU;AAChC,WAAK,KAAL,CAAW,IAAX,CAAgB;AACd,cAAM,KAAK,GAAL,EADQ;AAEd,cAAM,MAAM,QAAN;AAFQ,OAAhB;;AAKA,UAAI,KAAK,KAAL,CAAW,MAAX,GAAoB,qBAAqB,iBAA7C,EAAgE;AAC9D,aAAK,KAAL,CAAW,MAAX,CAAkB,CAAlB,EAAqB,KAAK,KAAL,CAAW,MAAX,GAAoB,qBAAqB,iBAA9D;AACD;AACD;AACD;;;;;;;;;6BAMQ;AACP,aAAO,KAAK,QAAL,CAAc,CAAd,CAAP;AACD;;;;;;;;;;6BAOQ,K,EAAO;AACd,UAAM,OAAO,EAAb;AADc;AAAA;AAAA;;AAAA;AAEd,6BAAuB,KAAK,KAA5B,8HAAmC;AAAA,cAAxB,QAAwB;;AACjC,cAAI,SAAS,IAAT,IAAiB,KAArB,EAA4B;AAC1B,iBAAK,IAAL,CAAU,SAAS,IAAnB;AACD;AACF;AANa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQd,aAAO,IAAP;AACD;;;;EAjD+C,Q;;kBAA7B,oB;;;AAoDrB,qBAAqB,iBAArB,GAAyC,EAAzC","file":"lib/terminal-output-buffer.js","sourcesContent":["const Writable = require('stream').Writable;\n\nexport default class TerminalOutputBuffer extends Writable {\n\n  constructor(options) {\n    super(options);\n\n    this.lines = [];\n  }\n\n  /**\n   * Private handler for Writable stream\n   * @param chunk\n   * @param encoding\n   * @param callback\n   * @private\n   */\n  _write(chunk, encoding, callback) {\n    this.lines.push({\n      time: Date.now(),\n      data: chunk.toString(),\n    });\n\n    if (this.lines.length > TerminalOutputBuffer.DEFAULT_MAX_LINES) {\n      this.lines.splice(0, this.lines.length - TerminalOutputBuffer.DEFAULT_MAX_LINES);\n    }\n    callback();\n  }\n\n  /**\n   * Returns the full output in the buffer\n   * @returns {string}\n   */\n  getAll() {\n    return this.getSince(0);\n  }\n\n  /**\n   * Returns the output in the buffer since a certain time\n   * @param {int} aTime - Timestamp\n   * @returns {string}\n   */\n  getSince(aTime) {\n    const data = [];\n    for (const lineData of this.lines) {\n      if (lineData.time >= aTime) {\n        data.push(lineData.data);\n      }\n    }\n\n    return data;\n  }\n}\n\nTerminalOutputBuffer.DEFAULT_MAX_LINES = 80;\n"],"sourceRoot":"/source/"}