// Compiled by Babel
// ** DO NOT EDIT THIS FILE DIRECTLY **
//
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var exec = require('child_process').exec;

/**
 * Interface with DockApp via scripts
 * 
 * This class doesn't check the state of the stations before dispatching
 * the commands.
 */

var DockAppConnector = function () {
  function DockAppConnector(nconf, logger) {
    _classCallCheck(this, DockAppConnector);

    this.nconf = nconf;
    this.logger = logger;
  }

  _createClass(DockAppConnector, [{
    key: 'getStations',
    value: function getStations(done, error) {
      var command = 'scripts/list_stations.sh ' + this.config.get('dockapp_path');
      exec(command, {}, function (err, stdout) {
        if (err) {
          error(err);
        } else {
          var response = JSON.parse(stdout);
          for (var i = 0; i !== response.stations.length; i++) {
            response.stations[i].state = 'on';
            response.stations[i].status = '';
          }
          done(response.stations);
        }
      });
    }

    /**
     * Start a station
     * @param {string} stationID - ID of the station
     * @returns Promise
     */

  }, {
    key: 'startStation',
    value: function startStation(stationID) {
      return new Promise(function (resolve, reject) {
        resolve();
      });
    }

    /**
     * Stop a station
     * @param {string} stationID - ID of the station
     * @returns Promise
     */

  }, {
    key: 'stopStation',
    value: function stopStation(stationID) {
      return new Promise(function (resolve, reject) {
        resolve();
      });
    }

    /**
     * Change the foreground application running in a station
     * @param {string} stationID - ID of the station
     * @param {string} appID - ID of the app to set
     * @returns Promise
     */

  }, {
    key: 'changeApp',
    value: function changeApp(stationID, appID) {
      return new Promise(function (resolve, reject) {
        resolve();
      });
    }
  }]);

  return DockAppConnector;
}();

exports.default = DockAppConnector;
//# sourceMappingURL=dockapp-connector.js.map
