// Compiled by Babel
// ** DO NOT EDIT THIS FILE DIRECTLY **
//
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Promise = require('bluebird');
var exec = require('child_process').exec;

/**
 * Interface with DockApp via scripts
 *
 * This class doesn't check the state of the stations before dispatching
 * the commands.
 */

var DockAppConnector = function () {
  function DockAppConnector(nconf, logger) {
    _classCallCheck(this, DockAppConnector);

    this.nconf = nconf;
    this.logger = logger;
  }

  /**
   * Reads the station config
   * @returns {Promise}
   * @resolve {Array} - List of stations
   * @reject {Error}
   */


  _createClass(DockAppConnector, [{
    key: 'getStationConfig',
    value: function getStationConfig() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        _this.execute(DockAppConnector.SCRIPT_LIST_STATIONS + ' ' + _this.nconf.get('dockapp_path')).then(function (output) {
          resolve(JSON.parse(output));
        }).catch(function (err) {
          return reject(err);
        });
      });
    }

    /**
     * Start a station
     * @param {string} stationID - ID of the station
     * @returns Promise
     */

  }, {
    key: 'startStation',
    value: function startStation(stationID) {
      return new Promise(function (resolve, reject) {
        resolve();
      });
    }

    /**
     * Stop a station
     * @param {string} stationID - ID of the station
     * @returns Promise
     */

  }, {
    key: 'stopStation',
    value: function stopStation(stationID) {
      return new Promise(function (resolve, reject) {
        resolve();
      });
    }

    /**
     * Change the foreground application running in a station
     * @param {string} stationID - ID of the station
     * @param {string} appID - ID of the app to set
     * @returns {Promise}
     */

  }, {
    key: 'changeApp',
    value: function changeApp(stationID, appID) {
      return new Promise(function (resolve, reject) {
        resolve();
      });
    }

    /**
     * Executes a child process
     * @private
     *
     * @param command
     * @returns {Promise}
     * @resolve {String} - stdout output
     * @reject {Error}
     */

  }, {
    key: 'execute',
    value: function execute(command) {
      return new Promise(function (resolve, reject) {
        var stdoutBuf = '';
        var stderrBuf = '';
        var process = exec(command);
        process.stdout.on('data', function (data) {
          stdoutBuf += data;
        });
        process.stderr.on('data', function (data) {
          stderrBuf += data;
        });
        process.on('close', function (code, signal) {
          if (code === 0) {
            resolve(stdoutBuf);
          } else {
            var term = 'rc=' + code;
            var output = '';
            if (signal !== null) {
              term = term + ', ' + signal;
            }
            if (stderrBuf.length) {
              output = '\nstderr: ' + stderrBuf;
            }
            reject(new Error('Command \'' + command + '\' exited with ' + term + '.' + output));
          }
        });
      });
    }
  }]);

  return DockAppConnector;
}();

exports.default = DockAppConnector;


DockAppConnector.SCRIPT_LIST_STATIONS = 'scripts/list_stations.sh';
//# sourceMappingURL=dockapp-connector.js.map
