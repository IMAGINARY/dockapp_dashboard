// Compiled by Babel
// ** DO NOT EDIT THIS FILE DIRECTLY **
//
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _httpApiServer = require('../http-api-server');

var _httpApiServer2 = _interopRequireDefault(_httpApiServer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var validate = require('express-validation');
var Joi = require('joi');
/**
 * Module that allows the client to set parameters for the test backend
 */

var TestControllerModule = function () {
  function TestControllerModule(httpApiServer) {
    _classCallCheck(this, TestControllerModule);

    this.httpApiServer = httpApiServer;
    this.stationManager = this.httpApiServer.stationManager;
    this.logger = this.httpApiServer.logger;
    this.nconf = this.httpApiServer.nconf;
  }

  _createClass(TestControllerModule, [{
    key: 'init',
    value: function init() {
      this.logger.info('Initializing Test Controller module');
      return true;
    }
  }, {
    key: 'setupRoutes',
    value: function setupRoutes(router) {
      router.get('/test-backend/flags', this.getTestFlags.bind(this));
      router.post('/test-backend/flags', validate(TestControllerModule.setTestFlagsSchema()), this.setTestFlags.bind(this));
      router.post('/test-backend/stations/unreachable', validate(TestControllerModule.stationIDListSchema()), this.makeStationsUnreachable.bind(this));
      router.post('/test-backend/stations/reachable', validate(TestControllerModule.stationIDListSchema()), this.makeStationsReachable.bind(this));
      router.post('/test-backend/stations/stop-unexpectedly', validate(TestControllerModule.stationIDListSchema()), this.stopStationsUnexpectedly.bind(this));
    }
  }, {
    key: 'getTestFlags',
    value: function getTestFlags(req, res) {
      var _this = this;

      var flags = {};
      TestControllerModule.FlagNames.forEach(function (name) {
        flags[name] = _this.nconf.get('test-backend:' + name) || false;
      });
      res.json({
        testMode: this.nconf.get('test'),
        flags: flags
      });
    }
  }, {
    key: 'setTestFlags',
    value: function setTestFlags(req, res) {
      var _this2 = this;

      TestControllerModule.FlagNames.forEach(function (name) {
        if (req.body[name] !== undefined) {
          _this2.nconf.set('test-backend:' + name, req.body[name] === true);
        }
      });

      return this.getTestFlags(req, res);
    }
  }, {
    key: 'makeStationsUnreachable',
    value: function makeStationsUnreachable(req, res) {
      var unreachable = new Set(this.nconf.get('test-backend:unreachable') || []);
      req.body.ids.forEach(function (a) {
        return unreachable.add(a);
      });
      var aUnreachable = Array.from(unreachable);
      this.nconf.set('test-backend:unreachable', aUnreachable);
      res.json({ ids: aUnreachable });
    }
  }, {
    key: 'makeStationsReachable',
    value: function makeStationsReachable(req, res) {
      var unreachable = new Set(this.nconf.get('test-backend:unreachable') || []);
      req.body.ids.forEach(function (a) {
        return unreachable.delete(a);
      });
      var aUnreachable = Array.from(unreachable);
      this.nconf.set('test-backend:unreachable', aUnreachable);
      res.json({ ids: aUnreachable });
    }
  }, {
    key: 'stopStationsUnexpectedly',
    value: function stopStationsUnexpectedly(req, res) {
      this.nconf.set('test-backend:stop-unexpectedly', req.body.ids);
      res.json({});
    }
  }], [{
    key: 'setTestFlagsSchema',
    value: function setTestFlagsSchema() {
      var schema = {
        body: {}
      };

      TestControllerModule.FlagNames.forEach(function (name) {
        schema.body[name] = Joi.boolean();
      });

      return schema;
    }
  }, {
    key: 'stationIDListSchema',
    value: function stationIDListSchema() {
      return {
        body: {
          ids: Joi.array().items(Joi.string()).required()
        }
      };
    }
  }]);

  return TestControllerModule;
}();

exports.default = TestControllerModule;


TestControllerModule.FlagNames = ['sim-fail-cli', 'sim-timeout', 'sim-unexpected-off'];
//# sourceMappingURL=test-controller-module.js.map
