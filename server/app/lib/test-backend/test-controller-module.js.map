{"version":3,"sources":["lib/test-backend/test-controller-module.js"],"names":["validate","require","Joi","TestControllerModule","httpApiServer","stationManager","logger","nconf","info","router","get","getTestFlags","bind","post","setTestFlagsSchema","setTestFlags","stationIDListSchema","makeStationsUnreachable","makeStationsReachable","stopStationsUnexpectedly","req","res","flags","FlagNames","forEach","name","json","testMode","body","undefined","set","unreachable","Set","ids","add","a","aUnreachable","Array","from","delete","schema","boolean","array","items","string","required"],"mappings":"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","file":"lib/test-backend/test-controller-module.js","sourcesContent":["import HttpAPIServer from \"../http-api-server\";\n\nconst validate = require('express-validation');\nconst Joi = require('joi');\n/**\n * Module that allows the client to set parameters for the test backend\n */\nexport default class TestControllerModule {\n  constructor(httpApiServer) {\n    this.httpApiServer = httpApiServer;\n    this.stationManager = this.httpApiServer.stationManager;\n    this.logger = this.httpApiServer.logger;\n    this.nconf = this.httpApiServer.nconf;\n  }\n\n  init() {\n    this.logger.info('Initializing Test Controller module');\n    return true;\n  }\n\n  setupRoutes(router) {\n    router.get('/test-backend/flags', this.getTestFlags.bind(this));\n    router.post('/test-backend/flags', validate(TestControllerModule.setTestFlagsSchema()), this.setTestFlags.bind(this));\n    router.post('/test-backend/stations/unreachable', validate(TestControllerModule.stationIDListSchema()), this.makeStationsUnreachable.bind(this));\n    router.post('/test-backend/stations/reachable', validate(TestControllerModule.stationIDListSchema()), this.makeStationsReachable.bind(this));\n    router.post('/test-backend/stations/stop-unexpectedly', validate(TestControllerModule.stationIDListSchema()), this.stopStationsUnexpectedly.bind(this));\n  }\n\n  getTestFlags(req, res) {\n    const flags = {};\n    TestControllerModule.FlagNames.forEach((name) => {\n      flags[name] = (this.nconf.get(`test-backend:${name}`) || false);\n    });\n    res.json({\n      testMode: this.nconf.get('test'),\n      flags,\n    });\n  }\n\n  setTestFlags(req, res) {\n    TestControllerModule.FlagNames.forEach((name) => {\n      if (req.body[name] !== undefined) {\n        this.nconf.set(`test-backend:${name}`, (req.body[name] === true));\n      }\n    });\n\n    return this.getTestFlags(req, res);\n  }\n\n  makeStationsUnreachable(req, res) {\n    const unreachable = new Set(this.nconf.get('test-backend:unreachable') || []);\n    req.body.ids.forEach(a => unreachable.add(a));\n    const aUnreachable = Array.from(unreachable);\n    this.nconf.set('test-backend:unreachable', aUnreachable);\n    res.json({ ids: aUnreachable });\n  }\n\n  makeStationsReachable(req, res) {\n    const unreachable = new Set(this.nconf.get('test-backend:unreachable') || []);\n    req.body.ids.forEach(a => unreachable.delete(a));\n    const aUnreachable = Array.from(unreachable);\n    this.nconf.set('test-backend:unreachable', aUnreachable);\n    res.json({ ids: aUnreachable });\n  }\n\n  stopStationsUnexpectedly(req, res) {\n    this.nconf.set('test-backend:stop-unexpectedly', req.body.ids);\n    res.json({});\n  }\n\n  static setTestFlagsSchema() {\n    const schema = {\n      body: {},\n    };\n\n    TestControllerModule.FlagNames.forEach((name) => {\n      schema.body[name] = Joi.boolean();\n    });\n\n    return schema;\n  }\n\n  static stationIDListSchema() {\n    return {\n      body: {\n        ids: Joi.array().items(Joi.string()).required(),\n      },\n    };\n  }\n}\n\nTestControllerModule.FlagNames = [\n  'sim-fail-cli',\n  'sim-timeout',\n];\n"],"sourceRoot":"/source/"}