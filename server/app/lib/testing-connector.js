// Compiled by Babel
// ** DO NOT EDIT THIS FILE DIRECTLY **
//
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Testing stub to replace DockAppConnector
 *
 * Simulates the dockapp commands with a random delay
 */

var TestingConnector = function () {
  function TestingConnector(nconf, logger) {
    _classCallCheck(this, TestingConnector);

    this.nconf = nconf;
    this.logger = logger;
  }

  _createClass(TestingConnector, [{
    key: 'startStation',
    value: function startStation(stationID) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        _this.randomDelay(3000, 8000).then(resolve);
      });
    }
  }, {
    key: 'stopStation',
    value: function stopStation(stationID) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        _this2.randomDelay(2000, 6000).then(resolve);
      });
    }
  }, {
    key: 'changeApp',
    value: function changeApp(stationID, appID) {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        _this3.randomDelay(1000, 5000).then(function () {
          if (appID === 'Sky explorer / Aladin lite') {
            reject();
          } else {
            resolve();
          }
        });
      });
    }

    /**
     * Wait a random amount of time
     * @private
     * @param min
     * @param max
     * @returns {Promise}
     */

  }, {
    key: 'randomDelay',
    value: function randomDelay(min, max) {
      return new Promise(function (resolve, reject) {
        var delay = Math.floor(Math.random() * (max - min)) + min;
        setTimeout(function () {
          resolve();
        }, delay);
      });
    }
  }]);

  return TestingConnector;
}();

exports.default = TestingConnector;
//# sourceMappingURL=testing-connector.js.map
