{"version":3,"sources":["lib/mk-livestatus-connector.js"],"names":["Promise","require","MKLivestatusConnector","nconf","logger","minTime","timestamp","stationMinTime","stationID","debug","state","Map","getStationState","then","stations","station","set","id","getForegroundApps","has","stationState","get","HostState","DOWN","app_state","ServiceState","UNKNOWN","app_state_type","StateType","HARD","app_id","values","catch","err","error","message","query","columns","asColumns","execute","filter","last_check","undefined","SOFT","matches","match","OK","length","CRITICAL","queryString","resolve","MKLivestatusCommand","process","stdoutBuf","stdout","on","data","stderr","stdin","end","Math","floor","Date","now","main","module","mkLivestatusConnector","console","log","getState"],"mappings":"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","file":"lib/mk-livestatus-connector.js","sourcesContent":["import { exec } from 'child_process';\nimport Nagios from './nagios';\nimport MKLivestatusQuery from './mk-livestatus-query';\n\nconst Promise = require('bluebird');\n\n/**\n * Connects to the MK Livestatus service and\n * retrieves status data\n *\n * http://mathias-kettner.com/checkmk_livestatus.html\n */\nexport default class MKLivestatusConnector {\n\n  constructor(nconf, logger) {\n    this.nconf = nconf;\n    this.logger = logger;\n    this.minTime = MKLivestatusConnector.timestamp();\n    this.stationMinTime = {};\n  }\n\n  /**\n   * Mark the current app_state / app_id reported by CheckMK stale until the next check.\n   *\n   * The connector will store a timestamp associated with the station and will only use the reported\n   * app_state and app_id if CheckMK checked them at a latter time.\n   * @param stationID\n   */\n  invalidateAppState(stationID) {\n    this.stationMinTime[stationID] = MKLivestatusConnector.timestamp();\n  }\n\n  /**\n   * Returns the state of the stations\n   * Returns an array of objects with shape\n   * {id: 'station name', state: 0, state_type: 1,\n   * app_state: 0, app_state_type: 1, app_id: 'fg app name'}\n   *\n   * @returns {Promise}\n   * @resolve {Array}\n   */\n  getState() {\n    this.logger.debug('MKLivestatus: Querying');\n    const state = new Map();\n    return this.getStationState()\n      .then((stations) => {\n        this.logger.debug('MKLivestatus: host state response received. Updating stations.');\n        for (const station of stations) {\n          if ('id' in station) {\n            state.set(station.id, station);\n          }\n        }\n        return this.getForegroundApps();\n      })\n      .then((stations) => {\n        this.logger.debug('MKLivestatus: app state response received. Updating stations.');\n        for (const station of stations) {\n          if ('id' in station && state.has(station.id)) {\n            const stationState = state.get(station.id);\n            if (stationState.state === Nagios.HostState.DOWN) {\n              // If the station is down let's ignore the app state, which is definitely stale.\n              stationState.app_state = Nagios.ServiceState.UNKNOWN;\n              stationState.app_state_type = Nagios.StateType.HARD;\n              stationState.app_id = '';\n            } else {\n              stationState.app_state = station.app_state;\n              stationState.app_state_type = station.app_state_type;\n              stationState.app_id = station.app_id;\n            }\n          }\n        }\n\n        return state.values();\n      })\n      .catch((err) => {\n        this.logger.error(`MKLivestatus: Error querying '${err.message}'`);\n        throw err;\n      });\n  }\n\n  /**\n   * Queries the state of the stations\n   * Returns an array of objects with shape\n   * {id: 'station name ', state: 0, state_type: 1}\n   * @private\n   *\n   * @returns {Promise}\n   * @resolve {Array}\n   * @reject {Error}\n   */\n  getStationState() {\n    this.logger.debug('MKLivestatus: Querying host state');\n    return this.query()\n      .get('hosts')\n      .columns(['name', 'state', 'state_type'])\n      .asColumns(['id', 'state', 'state_type'])\n      .execute();\n  }\n\n  /**\n   * Queries the foreground apps running in the stations\n   * Returns an array of objects with shape\n   * {id: 'station name', app_state: 0, app_state_type: 1, app_id: 'app name'}\n   * @private\n   *\n   * @returns {Promise}\n   */\n  getForegroundApps() {\n    this.logger.debug('MKLivestatus: Querying app state');\n    return this.query()\n      .get('services')\n      .columns(['host_name', 'last_check', 'state', 'state_type', 'plugin_output'])\n      .asColumns(['id', 'last_check', 'app_state', 'app_state_type', 'app_id'])\n      .filter('description = dockapp_top1')\n      .execute()\n      .then((stations) => {\n        for (const station of stations) {\n          // Check the timestamp of the last check to see if this data is current\n          if (station.last_check <= this.minTime ||\n              (this.stationMinTime[station.id] !== undefined &&\n               station.last_check <= this.stationMinTime[station.id])\n          ) {\n            // The timestamp of the last check is previous to the global minTime\n            // (creation of the MKLivestatusConnector) or the stations' minTime\n            // (time of start) so the status is stale and has to be ignored.\n            station.app_id = '';\n            station.app_state = Nagios.ServiceState.UNKNOWN;\n            station.app_state_type = Nagios.StateType.SOFT;\n          } else {\n            // Current data\n            const matches = station.app_id.match(/^[^:]+:\\s*(.*)@\\[.*\\]$/);\n            if (station.app_state === Nagios.ServiceState.OK &&\n              matches !== null && ('length' in matches) && matches.length > 1) {\n              station.app_id = matches[1];\n            } else if (station.app_state === Nagios.ServiceState.CRITICAL &&\n              station.app_id === 'CRIT - CRITICAL - no running TOP app!') {\n              // Not really a critical error\n              // There's just no app running. It happens. No need to call the Avengers.\n              station.app_id = '';\n              station.app_state = Nagios.ServiceState.OK;\n              station.app_state_type = Nagios.StateType.SOFT;\n            }\n          }\n        }\n        return stations;\n      });\n  }\n\n  /**\n   * Creates a query\n   * @private\n   *\n   * @returns {MKLivestatusQuery}\n   */\n  query() {\n    return new MKLivestatusQuery(this);\n  }\n\n  /**\n   * Sends a query command to MKLivestatus\n   *\n   * @param {String} queryString\n   * @returns {bluebird}\n   * @resolve {Array} Response rows\n   * @reject {Error}\n   */\n  sendCommand(queryString) {\n    return new Promise((resolve) => {\n      const MKLivestatusCommand = this.nconf.get('mkls_cmd');\n      this.logger.debug(`MKLivestatus: executing query through '${MKLivestatusCommand}'`);\n      this.logger.debug(`sending query '${queryString}'`);\n      const process = exec(MKLivestatusCommand);\n\n      let stdoutBuf = '';\n\n      process.stdout.on('data', (data) => {\n        stdoutBuf += data;\n      }).on('end', () => {\n        this.logger.debug(`MKLivestatus stdout: '${stdoutBuf}'`);\n        resolve(stdoutBuf);\n      });\n\n      process.stderr.on('data', (data) => {\n        this.logger.error(`MKLivestatus stderr: ${data}`);\n      });\n\n      process.stdin.end(`${queryString}\\n\\n`);\n    });\n  }\n\n  static timestamp() {\n    return Math.floor(Date.now() / 1000);\n  }\n}\n\n// When executed directly it performs a query\nif (require.main === module) {\n  const mkLivestatusConnector = new MKLivestatusConnector();\n  console.log('Querying');\n  mkLivestatusConnector.getState().then((state) => {\n    console.log(state);\n  });\n}\n"],"sourceRoot":"/source/"}