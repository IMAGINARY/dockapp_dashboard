{"version":3,"sources":["lib/mk-livestatus-connector.js"],"names":["Promise","require","MKLivestatusConnector","nconf","logger","debug","state","Map","getStationState","then","stations","station","set","id","getForegroundApps","has","stationState","get","app_state","app_state_type","app_id","values","catch","err","error","message","query","columns","asColumns","execute","filter","matches","match","length","Error","queryString","resolve","MKLivestatusCommand","process","stdoutBuf","stdout","on","data","stderr","stdin","end","main","module","mkLivestatusConnector","console","log","getState"],"mappings":"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","file":"lib/mk-livestatus-connector.js","sourcesContent":["import { exec } from 'child_process';\nimport MKLivestatusQuery from './mk-livestatus-query';\n\nconst Promise = require('bluebird');\n\n/**\n * Connects to the MK Livestatus service and\n * retrieves status data\n *\n * http://mathias-kettner.com/checkmk_livestatus.html\n */\nexport default class MKLivestatusConnector {\n\n  constructor(nconf, logger) {\n    this.nconf = nconf;\n    this.logger = logger;\n  }\n\n  /**\n   * Returns the state of the stations\n   * Returns an array of objects with shape\n   * {id: 'station name', state: 0, state_type: 1,\n   * app_state: 0, app_state_type: 1, app_id: 'fg app name'}\n   *\n   * @returns {Promise}\n   * @resolve {Array}\n   */\n  getState() {\n    this.logger.debug('MKLivestatus: Querying');\n    const state = new Map();\n    return this.getStationState()\n      .then((stations) => {\n        this.logger.debug('MKLivestatus: host state response received. Updating stations.');\n        for (const station of stations) {\n          if (!('id' in station)) {\n            state.set(station.id, station);\n          }\n        }\n        return this.getForegroundApps();\n      })\n      .then((stations) => {\n        this.logger.debug('MKLivestatus: app state response received. Updating stations.');\n        for (const station of stations) {\n          if ('id' in station && state.has(station.id)) {\n            const stationState = state.get(station.id);\n            stationState.app_state = station.app_state;\n            stationState.app_state_type = station.app_state_type;\n            stationState.app_id = station.app_id;\n          }\n        }\n\n        return state.values();\n      })\n      .catch((err) => {\n        this.logger.error(`MKLivestatus: Error querying '${err.message}'`);\n        throw err;\n      });\n  }\n\n  /**\n   * Queries the state of the stations\n   * Returns an array of objects with shape\n   * {id: 'station name ', state: 0, state_type: 1}\n   * @private\n   *\n   * @returns {Promise}\n   * @resolve {Array}\n   * @reject {Error}\n   */\n  getStationState() {\n    this.logger.debug('MKLivestatus: Querying host state');\n    return this.query()\n      .get('hosts')\n      .columns(['name', 'state', 'state_type'])\n      .asColumns(['id', 'state', 'state_type'])\n      .execute();\n  }\n\n  /**\n   * Queries the foreground apps running in the stations\n   * Returns an array of objects with shape\n   * {id: 'station name', app_state: 0, app_state_type: 1, app_id: 'app name'}\n   * @private\n   *\n   * @returns {Promise}\n   */\n  getForegroundApps() {\n    this.logger.debug('MKLivestatus: Querying app state');\n    return this.query()\n      .get('services')\n      .columns(['host_name', 'state', 'state_type', 'plugin_output'])\n      .asColumns(['id', 'app_state', 'app_state_type', 'app_id'])\n      .filter('description = dockapp_top1')\n      .execute()\n      .then((stations) => {\n        for (const station of stations) {\n          // todo: replace for better regexp / parsing\n          const matches = station.app_id.match(/^[^:]+:\\s*(.*)@\\[.*\\]$/);\n          if (matches !== null && ('length' in matches) && matches.length > 1) {\n            station.app_id = matches[1];\n          } else if (station.app_id === 'CRIT - CRITICAL - no running TOP app!') {\n            station.app_id = '';\n          } else {\n            throw new Error(`Error parsing app_id of station ${station.id}: ${station.app_id}`);\n          }\n        }\n        return stations;\n      });\n  }\n\n  /**\n   * Creates a query\n   * @private\n   *\n   * @returns {MKLivestatusQuery}\n   */\n  query() {\n    return new MKLivestatusQuery(this);\n  }\n\n  /**\n   * Sends a query command to MKLivestatus\n   *\n   * @param {String} queryString\n   * @returns {bluebird}\n   * @resolve {Array} Response rows\n   * @reject {Error}\n   */\n  sendCommand(queryString) {\n    return new Promise((resolve) => {\n      const MKLivestatusCommand = this.nconf.get('mkls_cmd');\n      this.logger.debug(`MKLivestatus: executing query through '${MKLivestatusCommand}'`);\n      this.logger.debug(`sending query '${queryString}'`);\n      const process = exec(MKLivestatusCommand);\n\n      let stdoutBuf = '';\n\n      process.stdout.on('data', (data) => {\n        stdoutBuf += data;\n      }).on('end', () => {\n        this.logger.debug(`MKLivestatus stdout: '${stdoutBuf}'`);\n        resolve(stdoutBuf);\n      });\n\n      process.stderr.on('data', (data) => {\n        this.logger.error(`MKLivestatus stderr: ${data}`);\n      });\n\n      process.stdin.end(`${queryString}\\n\\n`);\n    });\n  }\n}\n\n// When executed directly it performs a query\nif (require.main === module) {\n  const mkLivestatusConnector = new MKLivestatusConnector();\n  console.log('Querying');\n  mkLivestatusConnector.getState().then((state) => {\n    console.log(state);\n  });\n}\n"],"sourceRoot":"/source/"}