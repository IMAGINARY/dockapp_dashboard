{"version":3,"sources":["lib/mk-livestatus-connector.js"],"names":[],"mappings":"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","file":"lib/mk-livestatus-connector.js","sourcesContent":["const Promise = require('bluebird');\nimport { exec } from 'child_process';\nimport MKLivestatusQuery from './mk-livestatus-query';\n\n/**\n * Connects to the MK Livestatus service and\n * retrieves status data\n *\n * http://mathias-kettner.com/checkmk_livestatus.html\n */\nexport default class MKLivestatusConnector {\n\n  constructor(nconf, logger) {\n    this.nconf = nconf;\n    this.logger = logger;\n  }\n\n  /**\n   * Returns the state of the stations\n   * Returns an array of objects with shape\n   * {id: 'station name', state: 0, state_type: 1,\n   * app_state: 0, app_state_type: 1, app_id: 'fg app name'}\n   *\n   * @returns {Promise}\n   * @resolve {Array}\n   */\n  getState() {\n    const state = new Map();\n    return this.getStationState()\n      .then((stations) => {\n        for (const station of stations) {\n          if (station.hasOwnProperty('id')) {\n            state.set(station.id, station);\n          }\n        }\n        return this.getForegroundApps();\n      })\n      .then((stations) => {\n        for (const station of stations) {\n          if (station.hasOwnProperty('id') &&\n              state.has(station.id)) {\n            const stationState = state.get(station.id);\n            stationState.app_state = station.app_state;\n            stationState.app_state_type = station.app_state_type;\n            stationState.app_id = station.app_id;\n          }\n        }\n\n        return state.values();\n      });\n  }\n\n  /**\n   * Queries the state of the stations\n   * Returns an array of objects with shape\n   * {id: 'station name ', state: 0, state_type: 1}\n   * @private\n   *\n   * @returns {Promise}\n   * @resolve {Array}\n   * @reject {Error}\n   */\n  getStationState() {\n    return this.query()\n      .get('hosts')\n      .columns(['name', 'state', 'state_type'])\n      .asColumns(['id', 'state', 'state_type'])\n      .execute();\n  }\n\n  /**\n   * Queries the foreground apps running in the stations\n   * Returns an array of objects with shape\n   * {id: 'station name', app_state: 0, app_state_type: 1, app_id: 'app name'}\n   * @private\n   *\n   * @returns {Promise}\n   */\n  getForegroundApps() {\n    return this.query()\n      .get('services')\n      .columns(['host_name', 'state', 'state_type', 'plugin_output'])\n      .asColumns(['id', 'app_state', 'app_state_type', 'app_id'])\n      .filter('description = dockapp_top1')\n      .execute()\n      .then((stations) => {\n        for (const station of stations) {\n          // todo: replace for better regexp / parsing\n          const matches = station.app_id.match(/^[^:]+:\\s*(.*)@\\[.*\\]$/);\n          if (matches.hasOwnProperty('length') && matches.length > 1) {\n            station.app_id = matches[1];\n          }\n        }\n        return stations;\n      });\n  }\n\n  /**\n   * Creates a query\n   * @private\n   *\n   * @returns {MKLivestatusQuery}\n   */\n  query() {\n    return new MKLivestatusQuery(this);\n  }\n\n  /**\n   * Sends a query command to MKLivestatus\n   * @private\n   *\n   * @param {String} queryString\n   * @returns {Promise}\n   * @resolve {Array} Response rows\n   * @reject {Error}\n   */\n  sendCommand(queryString) {\n    return new Promise((resolve) => {\n      const process = exec('ssh elondaits@supernova.mfo.de \"nc localhost 6557\"');\n\n      let stdoutBuf = '';\n\n      process.stdout.on('data', (data) => {\n        stdoutBuf += data;\n      }).on('end', () => {\n        resolve(stdoutBuf);\n      });\n\n      process.stderr.on('data', (data) => {\n        console.error(data);\n      });\n\n      process.stdin.end(`${queryString}\\n\\n`);\n    });\n  }\n}\n//\n// const dockAppConnector = new MKLivestatusConnector();\n// console.log('Querying');\n// dockAppConnector.getState().then((state) => {\n//   console.log(state);\n// });\n\n"],"sourceRoot":"/source/"}