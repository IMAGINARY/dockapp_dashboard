// Compiled by Babel
// ** DO NOT EDIT THIS FILE DIRECTLY **
//
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var testStations = require('../../tests/models/test_stations.json');
var iconmap = require('../../iconmap.json');

var TestModel = function () {
  function TestModel(config, logger) {
    _classCallCheck(this, TestModel);

    this.config = config;
    this.logger = logger;
    this.stations = testStations;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = this.stations[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var station = _step.value;

        station.icon = this.getIconURL(station.app);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    this.logEntries = [];
  }

  _createClass(TestModel, [{
    key: 'getStations',
    value: function getStations(done) {
      done(this.stations);
    }
  }, {
    key: 'startStations',
    value: function startStations(stationIDs) {
      var _this = this;

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        var _loop = function _loop() {
          var stationID = _step2.value;

          var station = _this.getStationState(stationID);
          if (station) {
            if (station.state === 'off') {
              station.state = 'busy';
              station.status = 'Starting...';
              setTimeout(function () {
                station.state = 'on';
                station.status = '';
                _this.log('message', station, 'Station started');
              }, _this.getRandomInt(1000, 8000));
            }
          }
        };

        for (var _iterator2 = stationIDs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          _loop();
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }, {
    key: 'stopStations',
    value: function stopStations(stationIDs) {
      var _this2 = this;

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        var _loop2 = function _loop2() {
          var stationID = _step3.value;

          var station = _this2.getStationState(stationID);
          if (station) {
            if (station.state === 'on') {
              station.state = 'busy';
              station.status = 'Stopping...';
              setTimeout(function () {
                station.state = 'off';
                station.status = '';
                _this2.log('message', station, 'Station stopped');
              }, _this2.getRandomInt(3000, 8000));
            }
          }
        };

        for (var _iterator3 = stationIDs[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          _loop2();
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }
  }, {
    key: 'changeApp',
    value: function changeApp(stationIDs, app) {
      var _this3 = this;

      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        var _loop3 = function _loop3() {
          var stationID = _step4.value;

          var station = _this3.getStationState(stationID);
          if (station) {
            if (station.state === 'on' && app === 'Sky explorer / Aladin lite') {
              station.state = 'busy';
              station.status = 'Switching to ' + app + '...';
              station.app = '';
              setTimeout(function () {
                station.app = app;
                station.icon = _this3.getIconURL(app);
                station.state = 'error';
                station.status = 'Failure launching app';
                _this3.log('error', station, 'Failed to launch app ' + app);
              }, _this3.getRandomInt(1000, 5000));
            }
            if (station.state === 'on' && station.possible_apps.indexOf(app) >= 0 && station.app !== app) {
              station.state = 'busy';
              station.status = 'Switching to ' + app + '...';
              station.app = '';
              setTimeout(function () {
                station.app = app;
                station.icon = _this3.getIconURL(app);
                station.state = 'on';
                station.status = '';
                _this3.log('message', station, 'Launched app ' + app);
              }, _this3.getRandomInt(1000, 5000));
            }
          }
        };

        for (var _iterator4 = stationIDs[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          _loop3();
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }
    }
  }, {
    key: 'getIconURL',
    value: function getIconURL(app) {
      if (iconmap[app] !== undefined) {
        return 'icons/' + iconmap[app];
      }
      return 'icons/none.png';
    }
  }, {
    key: 'getLog',
    value: function getLog() {
      return { entries: this.logEntries };
    }
  }, {
    key: 'log',
    value: function log(type, station, message) {
      var newLogEntry = {
        id: this.logEntries.length + 1,
        time: new Date().toISOString(),
        type: type,
        message: message
      };

      if (station !== null) {
        newLogEntry.station_id = station.id;
        newLogEntry.station_name = station.name;
      }

      this.logEntries.push(newLogEntry);

      var maxEntries = this.config.get('max_log_length');
      if (this.logEntries.length > maxEntries) {
        this.logEntries = this.logEntries.slice(this.logEntries.length - maxEntries);
      }
    }

    // @private

  }, {
    key: 'getStationState',
    value: function getStationState(id) {
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = this.stations[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var _station = _step5.value;

          if (_station.id === id) {
            return _station;
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      return null;
    }

    // @private

  }, {
    key: 'getRandomInt',
    value: function getRandomInt(min, max) {
      return Math.floor(Math.random() * (max - min)) + min;
    }
  }]);

  return TestModel;
}();

module.exports = TestModel;
//# sourceMappingURL=test_model.js.map
