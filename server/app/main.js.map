{"version":3,"sources":["main.js"],"names":["appPackage","require","logger","nconf","testData","env","argv","file","defaults","port","hilbert_cli_path","test","scriptConcurrency","max_log_length","log_directory","log_level","mkls_poll_delay","mkls_cmd","long_poll_timeout","db_path","add","transports","File","filename","get","level","handleExceptions","json","process","on","err","error","message","exitCode","info","version","hilbertCLIConnector","mkLivestatusConnector","testBackend","simulateDelays","load","getHilbertCLIConnector","getMKLivestatusConnector","stationManager","server","init","then","listen","catch","exit"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,aAAaC,QAAQ,iBAAR,CAAnB;AACA,IAAMC,SAASD,QAAQ,SAAR,CAAf;AACA,IAAME,QAAQF,QAAQ,OAAR,CAAd;;AAEA,IAAMG,WAAWH,QAAQ,sCAAR,CAAjB;;AAEAE,MAAME,GAAN,GAAYC,IAAZ;AACAH,MAAMI,IAAN,CAAW,aAAX;AACAJ,MAAMK,QAAN,CAAe;AACbC,QAAM,MADO;AAEbC,oBAAkB,iBAFL;AAGbC,QAAM,KAHO;AAIbC,qBAAmB,EAJN;AAKbC,kBAAgB,GALH;AAMbC,iBAAe,OANF;AAObC,aAAW,MAPE,EAOM;AACnBC,mBAAiB,IARJ;AASbC,YAAU,mBATG;AAUbC,qBAAmB,EAVN;AAWbC,WAAS;AAXI,CAAf;;AAcAjB,OAAOkB,GAAP,CAAWlB,OAAOmB,UAAP,CAAkBC,IAA7B,EAAmC;AACjCC,YAAapB,MAAMqB,GAAN,CAAU,eAAV,CAAb,oBADiC;AAEjCC,SAAOtB,MAAMqB,GAAN,CAAU,WAAV,CAF0B;AAGjCE,oBAAkB,IAHe;AAIjCC,QAAM;AAJ2B,CAAnC;;AAOAzB,OAAOuB,KAAP,GAAetB,MAAMqB,GAAN,CAAU,WAAV,CAAf;;AAEAI,QAAQC,EAAR,CAAW,mBAAX,EAAgC,UAACC,GAAD,EAAS;AACvC5B,SAAO6B,KAAP,0BAAoCD,IAAIE,OAAxC;AACAJ,UAAQK,QAAR,GAAmB,CAAnB;AACD,CAHD;;AAKA/B,OAAOgC,IAAP,mCAA4ClC,WAAWmC,OAAvD;;AAEA,IAAIC,sBAAsB,IAA1B;AACA,IAAIC,wBAAwB,IAA5B;;AAEA,IAAIlC,MAAMqB,GAAN,CAAU,MAAV,CAAJ,EAAuB;AACrBtB,SAAOgC,IAAP,CAAY,sBAAZ;AACA,MAAMI,cAAc,0BAAgBnC,KAAhB,EAAuBD,MAAvB,CAApB;AACAoC,cAAYC,cAAZ,GAA6B,IAA7B;AACAD,cAAYE,IAAZ,CAAiBpC,QAAjB;AACAgC,wBAAsBE,YAAYG,sBAAZ,EAAtB;AACAJ,0BAAwBC,YAAYI,wBAAZ,EAAxB;AACD,CAPD,MAOO;AACLN,wBAAsB,kCAAwBjC,KAAxB,EAA+BD,MAA/B,CAAtB;AACAmC,0BAAwB,oCAA0BlC,KAA1B,EAAiCD,MAAjC,CAAxB;AACD;;AAED,IAAMyC,iBAAiB,6BACrBxC,KADqB,EAErBD,MAFqB,EAGrBkC,mBAHqB,EAIrBC,qBAJqB,CAAvB;;AAOA,IAAIO,SAAS,IAAb;AACAD,eAAeE,IAAf,GACGC,IADH,CACQ,YAAM;AACVF,WAAS,4BAAkBD,cAAlB,EAAkCxC,KAAlC,EAAyCD,MAAzC,CAAT;AACA,SAAO0C,OAAOC,IAAP,EAAP;AACD,CAJH,EAKGC,IALH,CAKQ,YAAM;AACVF,SAAOG,MAAP,CAAc5C,MAAMqB,GAAN,CAAU,MAAV,CAAd;AACD,CAPH,EAQGwB,KARH,CAQS,UAAClB,GAAD,EAAS;AACd5B,SAAO6B,KAAP,0CAAoDD,IAAIE,OAAxD;AACAJ,UAAQqB,IAAR,CAAa,CAAb;AACD,CAXH","file":"main.js","sourcesContent":["import 'babel-polyfill';\nimport StationManager from './lib/station-manager';\nimport HilbertCLIConnector from './lib/hilbert-cli-connector';\nimport MKLivestatusConnector from './lib/mk-livestatus-connector';\nimport HttpAPIServer from './lib/http-api-server';\nimport TestBackend from './lib/test-backend';\n\nconst appPackage = require('../package.json');\nconst logger = require('winston');\nconst nconf = require('nconf');\n\nconst testData = require('../data/test_mode/test_stations.json');\n\nnconf.env().argv();\nnconf.file('config.json');\nnconf.defaults({\n  port: '3000',\n  hilbert_cli_path: '../work/dockapp',\n  test: false,\n  scriptConcurrency: 20,\n  max_log_length: 100,\n  log_directory: './log',\n  log_level: 'info', // error, warn, info, verbose, debug, silly\n  mkls_poll_delay: 1000,\n  mkls_cmd: 'nc localhost 6557',\n  long_poll_timeout: 15,\n  db_path: '',\n});\n\nlogger.add(logger.transports.File, {\n  filename: `${nconf.get('log_directory')}/hilbert-ui.log`,\n  level: nconf.get('log_level'),\n  handleExceptions: true,\n  json: false,\n});\n\nlogger.level = nconf.get('log_level');\n\nprocess.on('uncaughtException', (err) => {\n  logger.error(`Uncaught exception: ${err.message}. Exiting process.`);\n  process.exitCode = 1;\n});\n\nlogger.info(`Starting hilbert-ui server (v${appPackage.version})`);\n\nlet hilbertCLIConnector = null;\nlet mkLivestatusConnector = null;\n\nif (nconf.get('test')) {\n  logger.info('Running in Test Mode');\n  const testBackend = new TestBackend(nconf, logger);\n  testBackend.simulateDelays = true;\n  testBackend.load(testData);\n  hilbertCLIConnector = testBackend.getHilbertCLIConnector();\n  mkLivestatusConnector = testBackend.getMKLivestatusConnector();\n} else {\n  hilbertCLIConnector = new HilbertCLIConnector(nconf, logger);\n  mkLivestatusConnector = new MKLivestatusConnector(nconf, logger);\n}\n\nconst stationManager = new StationManager(\n  nconf,\n  logger,\n  hilbertCLIConnector,\n  mkLivestatusConnector\n);\n\nlet server = null;\nstationManager.init()\n  .then(() => {\n    server = new HttpAPIServer(stationManager, nconf, logger);\n    return server.init();\n  })\n  .then(() => {\n    server.listen(nconf.get('port'));\n  })\n  .catch((err) => {\n    logger.error(`Error initializing Station Manager: ${err.message}. Exiting process.`);\n    process.exit(1);\n  });\n"],"sourceRoot":"/source/"}