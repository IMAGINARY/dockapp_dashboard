{"version":3,"sources":["main.js"],"names":["appPackage","require","logger","nconf","express","app","bodyParser","EventEmitter","iconmap","use","json","env","argv","file","defaults","port","hilbert_cli_path","test","scriptConcurrency","max_log_length","log_directory","log_level","mkls_poll_delay","mkls_cmd","add","transports","File","filename","get","level","handleExceptions","process","on","err","error","message","exitCode","info","version","hilbertCLIConnector","mkLivestatusConnector","testBackend","getHilbertCLIConnector","getMKLivestatusConnector","stationManager","init","then","catch","exit","getIconURL","appID","undefined","req","res","writeJSONResponse","stationDataResponse","pollUpdateEmitter","setMaxListeners","updateID","pollTimeoutDelay","data","writeHead","end","JSON","stringify","stations","getStations","station","icon","emptyResponse","Number","query","lastUpdateID","pollTimeout","setTimeout","emit","once","clearTimeout","events","post","debug","body","ids","startStations","stopStations","changeApp","params","id","getStationByID","lines","outputBuffer","getAll","globalHilbertCLIOutputBuffer","lastState","lastMKLivestatusDump","notifications","getLog","listen"],"mappings":";;AAAA;;AAUA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAXA,IAAMA,aAAaC,QAAQ,iBAAR,CAAnB;AACA,IAAMC,SAASD,QAAQ,SAAR,CAAf;AACA,IAAME,QAAQF,QAAQ,OAAR,CAAd;AACA,IAAMG,UAAUH,QAAQ,SAAR,CAAhB;AACA,IAAMI,MAAMD,SAAZ;AACA,IAAME,aAAaL,QAAQ,aAAR,CAAnB;AACA,IAAMM,eAAeN,QAAQ,QAAR,EAAkBM,YAAvC;;AAOA,IAAMC,UAAUP,QAAQ,iBAAR,CAAhB;;AAEA;;;;AAIAI,IAAII,GAAJ,CAAQH,WAAWI,IAAX,EAAR;;AAEAP,MAAMQ,GAAN,GAAYC,IAAZ;AACAT,MAAMU,IAAN,CAAW,aAAX;AACAV,MAAMW,QAAN,CAAe;AACbC,QAAM,MADO;AAEbC,oBAAkB,iBAFL;AAGbC,QAAM,KAHO;AAIbC,qBAAmB,EAJN;AAKbC,kBAAgB,GALH;AAMbC,iBAAe,OANF;AAObC,aAAW,MAPE,EAOM;AACnBC,mBAAiB,IARJ;AASbC,YAAU;AATG,CAAf;;AAYArB,OAAOsB,GAAP,CAAWtB,OAAOuB,UAAP,CAAkBC,IAA7B,EAAmC;AACjCC,YAAaxB,MAAMyB,GAAN,CAAU,eAAV,CAAb,oBADiC;AAEjCC,SAAO1B,MAAMyB,GAAN,CAAU,WAAV,CAF0B;AAGjCE,oBAAkB,IAHe;AAIjCpB,QAAM;AAJ2B,CAAnC;;AAOAR,OAAO2B,KAAP,GAAe1B,MAAMyB,GAAN,CAAU,WAAV,CAAf;;AAEAG,QAAQC,EAAR,CAAW,mBAAX,EAAgC,UAACC,GAAD,EAAS;AACvC/B,SAAOgC,KAAP,0BAAoCD,IAAIE,OAAxC;AACAJ,UAAQK,QAAR,GAAmB,CAAnB;AACD,CAHD;;AAKAlC,OAAOmC,IAAP,mCAA4CrC,WAAWsC,OAAvD;;AAEA,IAAIC,sBAAsB,IAA1B;AACA,IAAIC,wBAAwB,IAA5B;;AAEA,IAAIrC,MAAMyB,GAAN,CAAU,MAAV,CAAJ,EAAuB;AACrB1B,SAAOmC,IAAP,CAAY,sBAAZ;AACA,MAAMI,cAAc,0BAAgBtC,KAAhB,EAAuBD,MAAvB,CAApB;AACAqC,wBAAsBE,YAAYC,sBAAZ,EAAtB;AACAF,0BAAwBC,YAAYE,wBAAZ,EAAxB;AACD,CALD,MAKO;AACLJ,wBAAsB,kCAAwBpC,KAAxB,EAA+BD,MAA/B,CAAtB;AACAsC,0BAAwB,oCAA0BrC,KAA1B,EAAiCD,MAAjC,CAAxB;AACD;;AAED,IAAM0C,iBAAiB,6BAAmBzC,KAAnB,EAA0BD,MAA1B,EAAkCqC,mBAAlC,EAAuDC,qBAAvD,CAAvB;AACAI,eAAeC,IAAf,GAAsBC,IAAtB,CAA2B,YAAM,CAEhC,CAFD,EAEGC,KAFH,CAES,UAACd,GAAD,EAAS;AAChB/B,SAAOgC,KAAP,0CAAoDD,IAAIE,OAAxD;AACAJ,UAAQiB,IAAR,CAAa,CAAb;AACD,CALD;;AAOA;;;;;;AAMA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,MAAI1C,QAAQ0C,KAAR,MAAmBC,SAAvB,EAAkC;AAChC,sBAAgB3C,QAAQ0C,KAAR,CAAhB;AACD;AACD,SAAO,gBAAP;AACD;;AAED;;;;AAIA7C,IAAIuB,GAAJ,CAAQ,WAAR,EAAqB,UAACwB,GAAD,EAAMC,GAAN,EAAc;AACjCC,oBAAkBD,GAAlB,EAAuBE,qBAAvB;AACD,CAFD;;AAIA;;AAEA,IAAMC,oBAAoB,IAAIjD,YAAJ,EAA1B;AACAiD,kBAAkBC,eAAlB,CAAkC,GAAlC;AACA,IAAIC,WAAW,CAAf;AACA,IAAMC,mBAAmB,KAAzB;;AAEA,SAASL,iBAAT,CAA2BD,GAA3B,EAAgCO,IAAhC,EAAsC;AACpCP,MAAIQ,SAAJ,CAAc,GAAd,EAAmB,EAAE,gBAAgB,kBAAlB,EAAnB;AACAR,MAAIS,GAAJ,CAAQC,KAAKC,SAAL,CAAeJ,IAAf,CAAR;AACD;;AAED,SAASL,mBAAT,GAA+B;AAC7B,MAAMU,WAAWrB,eAAesB,WAAf,EAAjB;AAD6B;AAAA;AAAA;;AAAA;AAE7B,yBAAsBD,QAAtB,8HAAgC;AAAA,UAArBE,OAAqB;;AAC9BA,cAAQC,IAAR,GAAenB,WAAWkB,QAAQ9D,GAAnB,CAAf;AACD;AAJ4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAM7B,SAAO;AACLqD,sBADK;AAELO;AAFK,GAAP;AAID;;AAED,SAASI,aAAT,GAAyB;AACvB,SAAO,EAAP;AACD;;AAEDhE,IAAIuB,GAAJ,CAAQ,gBAAR,EAA0B,UAACwB,GAAD,EAAMC,GAAN,EAAc;AACtC;AACA,MAAIiB,OAAOlB,IAAImB,KAAJ,CAAUC,YAAjB,MAAmCd,QAAvC,EAAiD;AAC/CJ,sBAAkBD,GAAlB,EAAuBE,qBAAvB;AACD,GAFD,MAEO;AAAA;AACL;;AAEA;AACA,UAAMkB,cAAcC,WAAW,YAAM;AACnClB,0BAAkBmB,IAAlB,CAAuB,wBAAvB,EAAiDN,eAAjD;AACD,OAFmB,EAEjBV,gBAFiB,CAApB;;AAIA;AACAH,wBAAkBoB,IAAlB,CAAuB,wBAAvB,EAAiD,UAAChB,IAAD,EAAU;AACzDiB,qBAAaJ,WAAb;AACAnB,0BAAkBD,GAAlB,EAAuBO,IAAvB;AACD,OAHD;AATK;AAaN;AACF,CAlBD;;AAoBAhB,eAAekC,MAAf,CAAsB9C,EAAtB,CAAyB,eAAzB,EAA0C,YAAM;AAC9C0B;AACAF,oBAAkBmB,IAAlB,CAAuB,wBAAvB,EAAiDpB,qBAAjD;AACD,CAHD;;AAKA;;AAEAlD,IAAI0E,IAAJ,CAAS,iBAAT,EAA4B,UAAC3B,GAAD,EAAMC,GAAN,EAAc;AACxCnD,SAAO8E,KAAP,4CAAsD5B,IAAI6B,IAAJ,CAASC,GAA/D;AACAtC,iBAAeuC,aAAf,CAA6B/B,IAAI6B,IAAJ,CAASC,GAAtC;AACA5B,oBAAkBD,GAAlB,EAAuBgB,eAAvB;AACD,CAJD;;AAMAhE,IAAI0E,IAAJ,CAAS,gBAAT,EAA2B,UAAC3B,GAAD,EAAMC,GAAN,EAAc;AACvCnD,SAAO8E,KAAP,2CAAqD5B,IAAI6B,IAAJ,CAASC,GAA9D;AACAtC,iBAAewC,YAAf,CAA4BhC,IAAI6B,IAAJ,CAASC,GAArC;AACA5B,oBAAkBD,GAAlB,EAAuBgB,eAAvB;AACD,CAJD;;AAMAhE,IAAI0E,IAAJ,CAAS,sBAAT,EAAiC,UAAC3B,GAAD,EAAMC,GAAN,EAAc;AAC7CnD,SAAO8E,KAAP,oDACmD5B,IAAI6B,IAAJ,CAASC,GAD5D,YACsE9B,IAAI6B,IAAJ,CAAS5E,GAD/E;AAEAuC,iBAAeyC,SAAf,CAAyBjC,IAAI6B,IAAJ,CAASC,GAAlC,EAAuC9B,IAAI6B,IAAJ,CAAS5E,GAAhD;AACAiD,oBAAkBD,GAAlB,EAAuBgB,eAAvB;AACD,CALD;;AAOAhE,IAAIuB,GAAJ,CAAQ,qBAAR,EAA+B,UAACwB,GAAD,EAAMC,GAAN,EAAc;AAC3CnD,SAAO8E,KAAP,mDAA6D5B,IAAIkC,MAAJ,CAAWC,EAAxE;AACA,MAAMpB,UAAUvB,eAAe4C,cAAf,CAA8BpC,IAAIkC,MAAJ,CAAWC,EAAzC,CAAhB;AACA,MAAIpB,OAAJ,EAAa;AACXb,sBAAkBD,GAAlB,EAAuB;AACrBoC,aAAOtB,QAAQuB,YAAR,CAAqBC,MAArB;AADc,KAAvB;AAGD,GAJD,MAIO;AACLzF,WAAOgC,KAAP,+CAAyDkB,IAAIkC,MAAJ,CAAWC,EAApE;AACAlC,QAAIQ,SAAJ,CAAc,GAAd,EAAmB,mBAAnB;AACAR,QAAIS,GAAJ;AACD;AACF,CAZD;;AAcAzD,IAAIuB,GAAJ,CAAQ,gBAAR,EAA0B,UAACwB,GAAD,EAAMC,GAAN,EAAc;AACtCnD,SAAO8E,KAAP,mDAA6D5B,IAAIkC,MAAJ,CAAWC,EAAxE;AACAjC,oBAAkBD,GAAlB,EAAuB;AACrBoC,WAAO7C,eAAegD,4BAAf,CAA4CD,MAA5C;AADc,GAAvB;AAGD,CALD;;AAOAtF,IAAIuB,GAAJ,CAAQ,sBAAR,EAAgC,UAACwB,GAAD,EAAMC,GAAN,EAAc;AAC5CnD,SAAO8E,KAAP,CAAa,oDAAb;AACA1B,oBAAkBD,GAAlB,EAAuB;AACrBwC,eAAWjD,eAAekD;AADL,GAAvB;AAGD,CALD;;AAOAzF,IAAIuB,GAAJ,CAAQ,gBAAR,EAA0B,UAACwB,GAAD,EAAMC,GAAN,EAAc;AACtCnD,SAAO8E,KAAP,CAAa,0CAAb;AACA1B,oBAAkBD,GAAlB,EAAuB,EAAE0C,eAAenD,eAAeoD,MAAf,EAAjB,EAAvB;AACD,CAHD;;AAKA;AACA,IAAMjF,OAAOZ,MAAMyB,GAAN,CAAU,MAAV,CAAb;AACAvB,IAAI4F,MAAJ,CAAWlF,IAAX;AACAb,OAAOmC,IAAP,+BAAwCtB,IAAxC","file":"main.js","sourcesContent":["import 'babel-polyfill';\n\nconst appPackage = require('../package.json');\nconst logger = require('winston');\nconst nconf = require('nconf');\nconst express = require('express');\nconst app = express();\nconst bodyParser = require('body-parser');\nconst EventEmitter = require('events').EventEmitter;\n\nimport StationManager from './lib/station-manager';\nimport HilbertCLIConnector from './lib/hilbert-cli-connector';\nimport MKLivestatusConnector from './lib/mk-livestatus-connector';\nimport TestBackend from './lib/test-backend';\n\nconst iconmap = require('../iconmap.json');\n\n/**\n ** Setup\n **/\n\napp.use(bodyParser.json());\n\nnconf.env().argv();\nnconf.file('config.json');\nnconf.defaults({\n  port: '3000',\n  hilbert_cli_path: '../work/dockapp',\n  test: false,\n  scriptConcurrency: 20,\n  max_log_length: 100,\n  log_directory: './log',\n  log_level: 'info', // error, warn, info, verbose, debug, silly\n  mkls_poll_delay: 1000,\n  mkls_cmd: 'nc localhost 6557',\n});\n\nlogger.add(logger.transports.File, {\n  filename: `${nconf.get('log_directory')}/hilbert-ui.log`,\n  level: nconf.get('log_level'),\n  handleExceptions: true,\n  json: false,\n});\n\nlogger.level = nconf.get('log_level');\n\nprocess.on('uncaughtException', (err) => {\n  logger.error(`Uncaught exception: ${err.message}. Exiting process.`);\n  process.exitCode = 1;\n});\n\nlogger.info(`Starting hilbert-ui server (v${appPackage.version})`);\n\nlet hilbertCLIConnector = null;\nlet mkLivestatusConnector = null;\n\nif (nconf.get('test')) {\n  logger.info('Running in Test Mode');\n  const testBackend = new TestBackend(nconf, logger);\n  hilbertCLIConnector = testBackend.getHilbertCLIConnector();\n  mkLivestatusConnector = testBackend.getMKLivestatusConnector();\n} else {\n  hilbertCLIConnector = new HilbertCLIConnector(nconf, logger);\n  mkLivestatusConnector = new MKLivestatusConnector(nconf, logger);\n}\n\nconst stationManager = new StationManager(nconf, logger, hilbertCLIConnector, mkLivestatusConnector);\nstationManager.init().then(() => {\n\n}).catch((err) => {\n  logger.error(`Error initializing Station Manager: ${err.message}. Exiting process.`);\n  process.exit(1);\n});\n\n/**\n * Return the URL of the icon of the specified app\n *\n * @param {string} appID - ID of the app\n * @returns {string} - URL of the icon\n */\nfunction getIconURL(appID) {\n  if (iconmap[appID] !== undefined) {\n    return `icons/${iconmap[appID]}`;\n  }\n  return 'icons/none.png';\n}\n\n/**\n ** Routes\n **/\n\napp.get('/stations', (req, res) => {\n  writeJSONResponse(res, stationDataResponse());\n});\n\n// Longpoll begin\n\nconst pollUpdateEmitter = new EventEmitter();\npollUpdateEmitter.setMaxListeners(100);\nlet updateID = 1;\nconst pollTimeoutDelay = 15000;\n\nfunction writeJSONResponse(res, data) {\n  res.writeHead(200, { 'Content-Type': 'application/json' });\n  res.end(JSON.stringify(data));\n}\n\nfunction stationDataResponse() {\n  const stations = stationManager.getStations();\n  for (const station of stations) {\n    station.icon = getIconURL(station.app);\n  }\n\n  return {\n    updateID,\n    stations,\n  };\n}\n\nfunction emptyResponse() {\n  return {};\n}\n\napp.get('/stations/poll', (req, res) => {\n  // if the client is out of sync respond immediately\n  if (Number(req.query.lastUpdateID) !== updateID) {\n    writeJSONResponse(res, stationDataResponse());\n  } else {\n    // ... otherwise wait for an updateFromMKLivestatus to respond\n\n    // On timeout send an empty updateFromMKLivestatus\n    const pollTimeout = setTimeout(() => {\n      pollUpdateEmitter.emit('updateFromMKLivestatus', emptyResponse());\n    }, pollTimeoutDelay);\n\n    // If there was an updateFromMKLivestatus respond\n    pollUpdateEmitter.once('updateFromMKLivestatus', (data) => {\n      clearTimeout(pollTimeout);\n      writeJSONResponse(res, data);\n    });\n  }\n});\n\nstationManager.events.on('stationUpdate', () => {\n  updateID++;\n  pollUpdateEmitter.emit('updateFromMKLivestatus', stationDataResponse());\n});\n\n// Longpoll end\n\napp.post('/stations/start', (req, res) => {\n  logger.debug(`HTTP request received: Start stations ${req.body.ids}`);\n  stationManager.startStations(req.body.ids);\n  writeJSONResponse(res, emptyResponse());\n});\n\napp.post('/stations/stop', (req, res) => {\n  logger.debug(`HTTP request received: Stop stations ${req.body.ids}`);\n  stationManager.stopStations(req.body.ids);\n  writeJSONResponse(res, emptyResponse());\n});\n\napp.post('/stations/change_app', (req, res) => {\n  logger.debug(\n    `HTTP request received: Change app of stations ${req.body.ids} to ${req.body.app}`);\n  stationManager.changeApp(req.body.ids, req.body.app);\n  writeJSONResponse(res, emptyResponse());\n});\n\napp.get('/station/:id/output', (req, res) => {\n  logger.debug(`HTTP request received: Get output of station ${req.params.id}`);\n  const station = stationManager.getStationByID(req.params.id);\n  if (station) {\n    writeJSONResponse(res, {\n      lines: station.outputBuffer.getAll(),\n    });\n  } else {\n    logger.error(`Requested output of non existant station ${req.params.id}`);\n    res.writeHead(404, 'Station not found');\n    res.end();\n  }\n});\n\napp.get('/server/output', (req, res) => {\n  logger.debug(`HTTP request received: Get output of station ${req.params.id}`);\n  writeJSONResponse(res, {\n    lines: stationManager.globalHilbertCLIOutputBuffer.getAll(),\n  });\n});\n\napp.get('/server/mklivestatus', (req, res) => {\n  logger.debug('HTTP request received: Get last MKLivestatus state');\n  writeJSONResponse(res, {\n    lastState: stationManager.lastMKLivestatusDump,\n  });\n});\n\napp.get('/notifications', (req, res) => {\n  logger.debug('HTTP request received: Get notifications');\n  writeJSONResponse(res, { notifications: stationManager.getLog() });\n});\n\n// Spawn server\nconst port = nconf.get('port');\napp.listen(port);\nlogger.info(`Server listening on port ${port}.`);\n\n"],"sourceRoot":"/source/"}