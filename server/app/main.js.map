{"version":3,"sources":["main.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["const appPackage = require('../package.json');\nconst logger = require('winston');\nconst nconf = require('nconf');\nconst express = require('express');\nconst app = express();\nconst bodyParser = require('body-parser');\nconst EventEmitter = require('events').EventEmitter;\n\nimport StationManager from './lib/station-manager';\nimport DockAppConnector from './lib/dockapp-connector';\nimport MKLivestatusConnector from './lib/mk-livestatus-connector';\nimport TestBackend from './lib/test-backend';\n\nconst iconmap = require('../iconmap.json');\n\nprocess.on('uncaughtException', (err) => {\n  console.log(err);\n  process.exitCode = 1;\n});\n\napp.use(bodyParser.json());\n\nnconf.env().argv();\nnconf.file('config.json');\nnconf.defaults({\n  port: '3000',\n  dockapp_path: '../work/dockapp',\n  test: false,\n  scriptConcurrency: 2,\n  max_log_length: 100,\n  log_directory: './log',\n  log_level: 'info', // error, warn, info, verbose, debug, silly\n  MKLivestatusPollDelay: 1000,\n});\n\nlogger.add(logger.transports.File, {\n  filename: `${nconf.get('log_directory')}/dockapp_dashboard.log`,\n  level: nconf.get('log_level'),\n  handleExceptions: true,\n  json: false,\n});\n\nlogger.info(`Starting dockapp_dashboard server (v${appPackage.version})`);\n\nlet dockAppConnector = null;\nlet mkLivestatusConnector = null;\n\nif (nconf.get('test')) {\n  logger.info('Running in Test Mode');\n  const testBackend = new TestBackend(nconf, logger);\n  dockAppConnector = testBackend.getDockappConnector();\n  mkLivestatusConnector = testBackend.getMKLivestatusConnector();\n} else {\n  dockAppConnector = new DockAppConnector(nconf, logger);\n  mkLivestatusConnector = new MKLivestatusConnector(nconf, logger);\n}\n\nconst stationManager = new StationManager(nconf, logger, dockAppConnector, mkLivestatusConnector);\n\n\n/**\n * Return the URL of the icon of the specified app\n *\n * @param {string} appID - ID of the app\n * @returns {string} - URL of the icon\n */\nfunction getIconURL(appID) {\n  if (iconmap[appID] !== undefined) {\n    return `icons/${iconmap[appID]}`;\n  }\n  return 'icons/none.png';\n}\n\n// Longpoll begin\n\nconst pollUpdateEmitter = new EventEmitter();\npollUpdateEmitter.setMaxListeners(100);\nlet updateID = 1;\nconst pollTimeoutDelay = 15000;\n\nfunction respondJSON(res, data) {\n  res.writeHead(200, { 'Content-Type': 'application/json' });\n  res.end(JSON.stringify(data));\n}\n\nfunction stationDataResponse() {\n  const stations = stationManager.getStations();\n  for (const station of stations) {\n    station.icon = getIconURL(station.app);\n  }\n\n  return {\n    updateID,\n    stations,\n  };\n}\n\nfunction emptyResponse() {\n  return {};\n}\n\napp.get('/poll.json', (req, res) => {\n  // if the client is out of sync respond immediately\n  if (Number(req.query.lastSeen) !== updateID) {\n    respondJSON(res, stationDataResponse());\n  } else {\n    // ... otherwise wait for an updateFromMKLivestatus to respond\n\n    // On timeout send an empty updateFromMKLivestatus\n    const pollTimeout = setTimeout(() => {\n      pollUpdateEmitter.emit('updateFromMKLivestatus', emptyResponse());\n    }, pollTimeoutDelay);\n\n    // If there was an updateFromMKLivestatus respond\n    pollUpdateEmitter.once('updateFromMKLivestatus', (data) => {\n      clearTimeout(pollTimeout);\n      respondJSON(res, data);\n    });\n  }\n});\n\nstationManager.events.on('stationUpdate', () => {\n  updateID++;\n  pollUpdateEmitter.emit('updateFromMKLivestatus', stationDataResponse());\n});\n\n// Longpoll end\n\napp.get('/stations.json', (req, res) => {\n  respondJSON(res, stationDataResponse());\n});\n\napp.post('/stations.json', (req, res) => {\n  if (req.body.action === 'start') {\n    stationManager.startStations(req.body.stationIDs);\n    respondJSON(res, emptyResponse());\n  } else if (req.body.action === 'stop') {\n    stationManager.stopStations(req.body.stationIDs);\n    respondJSON(res, emptyResponse());\n  } else if (req.body.action === 'change_app') {\n    stationManager.changeApp(req.body.stationIDs, req.body.app);\n    respondJSON(res, emptyResponse());\n  } else {\n    res.writeHead(404, 'Action not found');\n    res.end();\n  }\n});\n\napp.get('/station_output.json', (req, res) => {\n  const station = stationManager.getStationByID(req.query.stationID);\n  respondJSON(res, {\n    lines: station.outputBuffer.getAll(),\n  });\n});\n\napp.get('/log.json', (req, res) => {\n  respondJSON(res, { entries: stationManager.getLog() });\n});\n\n// Spawn server\nconst port = nconf.get('port');\napp.listen(port);\nlogger.info(`Server listening on port ${port}.`);\n\n"],"sourceRoot":"/source/"}