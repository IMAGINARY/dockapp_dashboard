// Compiled by Babel
// ** DO NOT EDIT THIS FILE DIRECTLY **
//
'use strict';

var _stationManager = require('../lib/station-manager');

var _stationManager2 = _interopRequireDefault(_stationManager);

var _httpApiServer = require('../lib/http-api-server');

var _httpApiServer2 = _interopRequireDefault(_httpApiServer);

var _testBackend = require('../lib/test-backend');

var _testBackend2 = _interopRequireDefault(_testBackend);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var request = require('supertest');
var logger = require('winston');
var nconf = require('nconf');

describe('Presets HTTP API', function () {
  var apiServer = null;

  beforeEach(function (done) {
    nconf.defaults({
      port: '3000',
      hilbert_cli_path: '../work/dockapp',
      test: true,
      scriptConcurrency: 20,
      max_log_length: 100,
      log_directory: './log',
      log_level: 'info', // error, warn, info, verbose, debug, silly
      mkls_poll_delay: 1000,
      mkls_cmd: 'nc localhost 6557',
      long_poll_timeout: 0,
      db_path: ''
    });

    var testBackend = new _testBackend2.default(nconf, logger);
    testBackend.addStation({
      id: 'station_a',
      name: 'Station A',
      type: 'type_a',
      default_app: 'app_a',
      possible_apps: ['app_a', 'app_b', 'app_c']
    });
    var stationManager = new _stationManager2.default(nconf, logger, testBackend.getHilbertCLIConnector(), testBackend.getMKLivestatusConnector());

    stationManager.init().then(function () {
      var httpAPIServer = new _httpApiServer2.default(stationManager, nconf, logger);
      httpAPIServer.init().then(function () {
        apiServer = httpAPIServer.getServer();
        done();
      });
    });
  });

  describe('GET /presets without presets', function () {
    it('responds with JSON', function () {
      return request(apiServer).get('/presets').set('Accept', 'application/json').expect('Content-Type', /json/).expect(200).then(function (response) {
        response.body.should.deepEqual({ presets: [] });
      });
    });
  });

  describe('GET /presets with presets', function () {
    beforeEach(function () {
      return request(apiServer).post('/preset').send({
        name: 'My Preset',
        stationData: {
          station_a: 'app_a'
        }
      }).set('Accept', 'application/json').expect('Content-Type', /json/).expect(200);
    });

    it('responds with JSON', function () {
      return request(apiServer).get('/presets').set('Accept', 'application/json').expect('Content-Type', /json/).expect(200).then(function (response) {
        response.body.should.deepEqual({ presets: [{
            id: 1,
            name: 'My Preset'
          }] });
      });
    });
  });

  describe('GET /preset/:id', function () {
    beforeEach(function () {
      return request(apiServer).post('/preset').send({
        name: 'My Preset',
        stationData: {
          station_a: 'app_a'
        }
      }).set('Accept', 'application/json').expect('Content-Type', /json/).expect(200);
    });

    it('fails with no arguments', function (done) {
      request(apiServer).get('/preset').set('Accept', 'application/json').expect(404, done);
    });

    it('fails if the requested station does not exist', function (done) {
      request(apiServer).get('/preset/777').set('Accept', 'application/json').expect(404, done);
    });

    it('responds with JSON', function () {
      return request(apiServer).get('/preset/1').set('Accept', 'application/json').expect('Content-Type', /json/).expect(200).then(function (response) {
        response.body.should.deepEqual({
          id: 1,
          name: 'My Preset',
          stationData: {
            station_a: 'app_a'
          }
        });
      });
    });
  });

  describe('POST /preset', function () {
    beforeEach(function () {
      return request(apiServer).post('/preset').send({
        name: 'My Preset',
        stationData: {
          station_a: 'app_a'
        }
      }).set('Accept', 'application/json').expect('Content-Type', /json/).expect(200);
    });

    it('responds with JSON', function () {
      return request(apiServer).post('/preset').send({
        name: 'My Preset 2',
        stationData: {
          station_a: 'app_a'
        }
      }).set('Accept', 'application/json').expect('Content-Type', /json/).expect(200).then(function (response) {
        response.body.should.deepEqual({
          id: 2,
          name: 'My Preset 2',
          stationData: {
            station_a: 'app_a'
          }
        });
      });
    });

    it('fails when adding a preset with an existing name', function () {
      return request(apiServer).post('/preset').send({
        name: 'My Preset',
        stationData: {
          station_a: 'app_a'
        }
      }).set('Accept', 'application/json').expect(400);
    });
  });

  describe('PUT /preset/:id', function () {
    beforeEach(function () {
      return request(apiServer).post('/preset').send({
        name: 'My Preset',
        stationData: {
          station_a: 'app_a'
        }
      }).set('Accept', 'application/json').expect('Content-Type', /json/).expect(200);
    });

    beforeEach(function () {
      return request(apiServer).post('/preset').send({
        name: 'My Preset 2',
        stationData: {
          station_a: 'app_a'
        }
      }).set('Accept', 'application/json').expect('Content-Type', /json/).expect(200);
    });

    it('fails with no arguments', function () {
      return request(apiServer).put('/preset').set('Accept', 'application/json').expect(404);
    });

    it('fails if the preset does not exist', function () {
      return request(apiServer).put('/preset/8').send({
        name: 'My Preset B',
        stationData: {
          station_a: 'app_a'
        }
      }).set('Accept', 'application/json').expect(404);
    });

    it('fails if the name already exists', function () {
      return request(apiServer).put('/preset/2').send({
        name: 'My Preset',
        stationData: {
          station_a: 'app_a'
        }
      }).set('Accept', 'application/json').expect(400);
    });

    it('responds with JSON', function () {
      return request(apiServer).put('/preset/1').send({
        name: 'My Preset 1',
        stationData: {
          station_a: 'app_a'
        }
      }).set('Accept', 'application/json').expect('Content-Type', /json/).expect(200);
    });
  });

  describe('DELETE /preset/:id', function () {
    beforeEach(function () {
      return request(apiServer).post('/preset').send({
        name: 'My Preset',
        stationData: {
          station_a: 'app_a'
        }
      }).set('Accept', 'application/json').expect('Content-Type', /json/).expect(200);
    });

    it('fails with no arguments', function () {
      return request(apiServer).delete('/preset').set('Accept', 'application/json').expect(404);
    });

    it('fails if the preset does not exist', function () {
      return request(apiServer).delete('/preset/8').set('Accept', 'application/json').expect(404);
    });

    it('responds with JSON', function () {
      return request(apiServer).delete('/preset/1').set('Accept', 'application/json').expect(200);
    });
  });
});
//# sourceMappingURL=test-presets-api.test.js.map
