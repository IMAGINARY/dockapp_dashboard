// Compiled by Babel
// ** DO NOT EDIT THIS FILE DIRECTLY **
//
'use strict';

var _presetStore = require('../lib/presets/preset-store');

var _presetStore2 = _interopRequireDefault(_presetStore);

var _duplicateIdentifierError = require('../lib/presets/duplicate-identifier-error');

var _duplicateIdentifierError2 = _interopRequireDefault(_duplicateIdentifierError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* globals should */
var tmp = require('tmp');
require('should');

describe('Preset Store', function () {
  var store = null;
  var testName = 'My test preset';
  var stationIdA = 'A Station';
  var stationIdB = 'B Station';
  var testData = 'App 1';
  var testDataB = 'App 2';

  beforeEach(function () {
    store = new _presetStore2.default();
  });

  it('Allows storing presets on a new empty db', function () {
    var storedID = null;
    return store.open('').then(function () {
      var preset = store.createPreset();
      preset.name = testName;
      preset.setStationApp(stationIdA, testData);
      preset.setStationApp(stationIdB, testDataB);
      return preset.save().then(function () {
        storedID = preset.id;
      });
    }).then(function () {
      return store.loadPreset(storedID);
    }).then(function (retrieved) {
      retrieved.name.should.equal(testName);
      retrieved.getStationApp(stationIdA).should.deepEqual(testData);
      retrieved.getStationApp(stationIdB).should.deepEqual(testDataB);
    }).then(function () {
      return store.close();
    });
  });

  it('Persists data after closing the db', function (done) {
    var storedID = null;
    tmp.file(function (err, path, fd, cleanup) {
      store.open(path).then(function () {
        var preset = store.createPreset();
        preset.name = testName;
        preset.setStationApp(stationIdA, testData);
        preset.setStationApp(stationIdB, testDataB);
        return preset.save().then(function () {
          storedID = preset.id;
        });
      }).then(function () {
        return store.close();
      }).then(function () {
        return store.open(path);
      }).then(function () {
        return store.loadPreset(storedID);
      }).then(function (retrieved) {
        retrieved.name.should.equal(testName);
        retrieved.getStationApp(stationIdA).should.deepEqual(testData);
        retrieved.getStationApp(stationIdB).should.deepEqual(testDataB);
      }).then(function () {
        return store.close();
      }).then(function () {
        cleanup();
        done();
      });
    });
  });

  it('Allows updating presets', function () {
    var storedID = null;
    return store.open('').then(function () {
      var preset = store.createPreset();
      preset.name = testName + '_a';
      preset.setStationApp(stationIdA, testData);
      preset.setStationApp(stationIdB, testDataB);
      return preset.save().then(function () {
        storedID = preset.id;
      });
    }).then(function () {
      return store.loadPreset(storedID);
    }).then(function (storedPreset) {
      storedPreset.name.should.equal(testName + '_a');
      storedPreset.getStationApp(stationIdA).should.deepEqual(testData);
      storedPreset.getStationApp(stationIdB).should.deepEqual(testDataB);
      testData.should.not.deepEqual(testDataB);
      storedPreset.name = testName + '_b'; // eslint-disable-line no-param-reassign
      storedPreset.setStationApp(stationIdA, testDataB);
      storedPreset.setStationApp(stationIdB, testData);
      return storedPreset.save();
    }).then(function () {
      return store.loadPreset(storedID);
    }).then(function (storedPreset) {
      storedPreset.name.should.equal(testName + '_b');
      storedPreset.getStationApp(stationIdA).should.deepEqual(testDataB);
      storedPreset.getStationApp(stationIdB).should.deepEqual(testData);
    });
  });

  it('Lists stored presets', function () {
    return store.open('').then(function () {
      return store.listAllPresets();
    }).then(function (allPresets) {
      allPresets.length.should.equal(0);
    }).then(function () {
      var preset = store.createPreset();
      preset.name = testName + '_0';
      preset.setStationApp(stationIdA, testData);
      return preset.save();
    }).then(function () {
      return store.listAllPresets();
    }).then(function (allPresets) {
      allPresets.length.should.equal(1);
    }).then(function () {
      var preset = store.createPreset();
      preset.name = testName + '_1';
      preset.setStationApp(stationIdA, testData);
      return preset.save();
    }).then(function () {
      return store.listAllPresets();
    }).then(function (allPresets) {
      allPresets.length.should.equal(2);
    }).then(function () {
      var preset = store.createPreset();
      preset.name = testName + '_2';
      preset.setStationApp(stationIdA, testData);
      return preset.save();
    }).then(function () {
      return store.listAllPresets();
    }).then(function (allPresets) {
      allPresets.length.should.equal(3);
      allPresets.should.deepEqual([{ id: 1, name: testName + '_0' }, { id: 2, name: testName + '_1' }, { id: 3, name: testName + '_2' }]);
    }).then(function () {
      return store.close();
    });
  });

  it('Fails when saving two presets with the same name', function () {
    return store.open('').then(function () {
      return store.listAllPresets();
    }).then(function (allPresets) {
      allPresets.length.should.equal(0);
    }).then(function () {
      var preset = store.createPreset();
      preset.name = testName;
      preset.setStationApp(stationIdA, testData);
      return preset.save();
    }).then(function () {
      return store.listAllPresets();
    }).then(function (allPresets) {
      allPresets.length.should.equal(1);
    }).then(function () {
      var preset = store.createPreset();
      preset.name = testName;
      preset.setStationApp(stationIdA, testData);
      return preset.save();
    }).should.be.rejectedWith(_duplicateIdentifierError2.default);
  });

  it('Fails when changing the name of a preset to an existing one', function () {
    var storedID = null;
    return store.open('').then(function () {
      return store.listAllPresets();
    }).then(function (allPresets) {
      allPresets.length.should.equal(0);
    }).then(function () {
      var preset = store.createPreset();
      preset.name = testName + '_a';
      preset.setStationApp(stationIdA, testData);
      return preset.save();
    }).then(function () {
      return store.listAllPresets();
    }).then(function (allPresets) {
      allPresets.length.should.equal(1);
    }).then(function () {
      var preset = store.createPreset();
      preset.name = testName + '_b';
      preset.setStationApp(stationIdA, testData);
      return preset.save().then(function () {
        storedID = preset.id;
      });
    }).then(function () {
      return store.loadPreset(storedID);
    }).then(function (storedPreset) {
      storedPreset.name = testName + '_a'; // eslint-disable-line no-param-reassign
      return storedPreset.save();
    }).should.be.rejectedWith(_duplicateIdentifierError2.default);
  });
});
//# sourceMappingURL=test-presets-store.test.js.map
