{"version":3,"sources":["test/test-presets-store.test.js"],"names":["tmp","require","describe","store","testName","stationIdA","stationIdB","testData","testDataB","beforeEach","it","storedID","open","then","preset","createPreset","name","setStationApp","save","id","loadPreset","retrieved","should","equal","getStationApp","deepEqual","close","done","file","err","path","fd","cleanup","storedPreset","not","listAllPresets","allPresets","length","loadAllPresets","allPresetData","push","toJSON","stationApps","be","rejectedWith"],"mappings":";;AACA;;;;AACA;;;;;;AAFA;AAIA,IAAMA,MAAMC,QAAQ,KAAR,CAAZ;AACAA,QAAQ,QAAR;;AAEAC,SAAS,cAAT,EAAyB,YAAM;AAC7B,MAAIC,QAAQ,IAAZ;AACA,MAAMC,WAAW,gBAAjB;AACA,MAAMC,aAAa,WAAnB;AACA,MAAMC,aAAa,WAAnB;AACA,MAAMC,WAAW,OAAjB;AACA,MAAMC,YAAY,OAAlB;;AAEAC,aAAW,YAAM;AACfN,YAAQ,2BAAR;AACD,GAFD;;AAIAO,KAAG,0CAAH,EAA+C,YAAM;AACnD,QAAIC,WAAW,IAAf;AACA,WAAOR,MAAMS,IAAN,CAAW,EAAX,EACJC,IADI,CACC,YAAM;AACV,UAAMC,SAASX,MAAMY,YAAN,EAAf;AACAD,aAAOE,IAAP,GAAcZ,QAAd;AACAU,aAAOG,aAAP,CAAqBZ,UAArB,EAAiCE,QAAjC;AACAO,aAAOG,aAAP,CAAqBX,UAArB,EAAiCE,SAAjC;AACA,aAAOM,OAAOI,IAAP,GAAcL,IAAd,CAAmB,YAAM;AAC9BF,mBAAWG,OAAOK,EAAlB;AACD,OAFM,CAAP;AAGD,KATI,EAUJN,IAVI,CAUC;AAAA,aAAMV,MAAMiB,UAAN,CAAiBT,QAAjB,CAAN;AAAA,KAVD,EAWJE,IAXI,CAWC,UAACQ,SAAD,EAAe;AACnBA,gBAAUL,IAAV,CAAeM,MAAf,CAAsBC,KAAtB,CAA4BnB,QAA5B;AACAiB,gBAAUG,aAAV,CAAwBnB,UAAxB,EAAoCiB,MAApC,CAA2CG,SAA3C,CAAqDlB,QAArD;AACAc,gBAAUG,aAAV,CAAwBlB,UAAxB,EAAoCgB,MAApC,CAA2CG,SAA3C,CAAqDjB,SAArD;AACD,KAfI,EAgBJK,IAhBI,CAgBC;AAAA,aAAMV,MAAMuB,KAAN,EAAN;AAAA,KAhBD,CAAP;AAiBD,GAnBD;;AAqBAhB,KAAG,oCAAH,EAAyC,UAACiB,IAAD,EAAU;AACjD,QAAIhB,WAAW,IAAf;AACAX,QAAI4B,IAAJ,CAAS,UAACC,GAAD,EAAMC,IAAN,EAAYC,EAAZ,EAAgBC,OAAhB,EAA4B;AACnC7B,YAAMS,IAAN,CAAWkB,IAAX,EACGjB,IADH,CACQ,YAAM;AACV,YAAMC,SAASX,MAAMY,YAAN,EAAf;AACAD,eAAOE,IAAP,GAAcZ,QAAd;AACAU,eAAOG,aAAP,CAAqBZ,UAArB,EAAiCE,QAAjC;AACAO,eAAOG,aAAP,CAAqBX,UAArB,EAAiCE,SAAjC;AACA,eAAOM,OAAOI,IAAP,GAAcL,IAAd,CAAmB,YAAM;AAC9BF,qBAAWG,OAAOK,EAAlB;AACD,SAFM,CAAP;AAGD,OATH,EAUGN,IAVH,CAUQ;AAAA,eAAMV,MAAMuB,KAAN,EAAN;AAAA,OAVR,EAWGb,IAXH,CAWQ;AAAA,eAAMV,MAAMS,IAAN,CAAWkB,IAAX,CAAN;AAAA,OAXR,EAYGjB,IAZH,CAYQ;AAAA,eAAMV,MAAMiB,UAAN,CAAiBT,QAAjB,CAAN;AAAA,OAZR,EAaGE,IAbH,CAaQ,UAACQ,SAAD,EAAe;AACnBA,kBAAUL,IAAV,CAAeM,MAAf,CAAsBC,KAAtB,CAA4BnB,QAA5B;AACAiB,kBAAUG,aAAV,CAAwBnB,UAAxB,EAAoCiB,MAApC,CAA2CG,SAA3C,CAAqDlB,QAArD;AACAc,kBAAUG,aAAV,CAAwBlB,UAAxB,EAAoCgB,MAApC,CAA2CG,SAA3C,CAAqDjB,SAArD;AACD,OAjBH,EAkBGK,IAlBH,CAkBQ;AAAA,eAAMV,MAAMuB,KAAN,EAAN;AAAA,OAlBR,EAmBGb,IAnBH,CAmBQ,YAAM;AACVmB;AACAL;AACD,OAtBH;AAuBD,KAxBD;AAyBD,GA3BD;;AA6BAjB,KAAG,yBAAH,EAA8B,YAAM;AAClC,QAAIC,WAAW,IAAf;AACA,WAAOR,MAAMS,IAAN,CAAW,EAAX,EACJC,IADI,CACC,YAAM;AACV,UAAMC,SAASX,MAAMY,YAAN,EAAf;AACAD,aAAOE,IAAP,GAAiBZ,QAAjB;AACAU,aAAOG,aAAP,CAAqBZ,UAArB,EAAiCE,QAAjC;AACAO,aAAOG,aAAP,CAAqBX,UAArB,EAAiCE,SAAjC;AACA,aAAOM,OAAOI,IAAP,GAAcL,IAAd,CAAmB,YAAM;AAC9BF,mBAAWG,OAAOK,EAAlB;AACD,OAFM,CAAP;AAGD,KATI,EAUJN,IAVI,CAUC;AAAA,aAAMV,MAAMiB,UAAN,CAAiBT,QAAjB,CAAN;AAAA,KAVD,EAWJE,IAXI,CAWC,UAACoB,YAAD,EAAkB;AACtBA,mBAAajB,IAAb,CAAkBM,MAAlB,CAAyBC,KAAzB,CAAkCnB,QAAlC;AACA6B,mBAAaT,aAAb,CAA2BnB,UAA3B,EAAuCiB,MAAvC,CAA8CG,SAA9C,CAAwDlB,QAAxD;AACA0B,mBAAaT,aAAb,CAA2BlB,UAA3B,EAAuCgB,MAAvC,CAA8CG,SAA9C,CAAwDjB,SAAxD;AACAD,eAASe,MAAT,CAAgBY,GAAhB,CAAoBT,SAApB,CAA8BjB,SAA9B;AACAyB,mBAAajB,IAAb,GAAuBZ,QAAvB,QALsB,CAKe;AACrC6B,mBAAahB,aAAb,CAA2BZ,UAA3B,EAAuCG,SAAvC;AACAyB,mBAAahB,aAAb,CAA2BX,UAA3B,EAAuCC,QAAvC;AACA,aAAO0B,aAAaf,IAAb,EAAP;AACD,KApBI,EAqBJL,IArBI,CAqBC;AAAA,aAAMV,MAAMiB,UAAN,CAAiBT,QAAjB,CAAN;AAAA,KArBD,EAsBJE,IAtBI,CAsBC,UAACoB,YAAD,EAAkB;AACtBA,mBAAajB,IAAb,CAAkBM,MAAlB,CAAyBC,KAAzB,CAAkCnB,QAAlC;AACA6B,mBAAaT,aAAb,CAA2BnB,UAA3B,EAAuCiB,MAAvC,CAA8CG,SAA9C,CAAwDjB,SAAxD;AACAyB,mBAAaT,aAAb,CAA2BlB,UAA3B,EAAuCgB,MAAvC,CAA8CG,SAA9C,CAAwDlB,QAAxD;AACD,KA1BI,CAAP;AA2BD,GA7BD;;AA+BAG,KAAG,sBAAH,EAA2B;AAAA,WAAMP,MAAMS,IAAN,CAAW,EAAX,EAC5BC,IAD4B,CACvB;AAAA,aAAMV,MAAMgC,cAAN,EAAN;AAAA,KADuB,EAE5BtB,IAF4B,CAEvB,UAACuB,UAAD,EAAgB;AACpBA,iBAAWC,MAAX,CAAkBf,MAAlB,CAAyBC,KAAzB,CAA+B,CAA/B;AACD,KAJ4B,EAK5BV,IAL4B,CAKvB,YAAM;AACV,UAAMC,SAASX,MAAMY,YAAN,EAAf;AACAD,aAAOE,IAAP,GAAiBZ,QAAjB;AACAU,aAAOG,aAAP,CAAqBZ,UAArB,EAAiCE,QAAjC;AACA,aAAOO,OAAOI,IAAP,EAAP;AACD,KAV4B,EAW5BL,IAX4B,CAWvB;AAAA,aAAMV,MAAMgC,cAAN,EAAN;AAAA,KAXuB,EAY5BtB,IAZ4B,CAYvB,UAACuB,UAAD,EAAgB;AACpBA,iBAAWC,MAAX,CAAkBf,MAAlB,CAAyBC,KAAzB,CAA+B,CAA/B;AACD,KAd4B,EAe5BV,IAf4B,CAevB,YAAM;AACV,UAAMC,SAASX,MAAMY,YAAN,EAAf;AACAD,aAAOE,IAAP,GAAiBZ,QAAjB;AACAU,aAAOG,aAAP,CAAqBZ,UAArB,EAAiCE,QAAjC;AACA,aAAOO,OAAOI,IAAP,EAAP;AACD,KApB4B,EAqB5BL,IArB4B,CAqBvB;AAAA,aAAMV,MAAMgC,cAAN,EAAN;AAAA,KArBuB,EAsB5BtB,IAtB4B,CAsBvB,UAACuB,UAAD,EAAgB;AACpBA,iBAAWC,MAAX,CAAkBf,MAAlB,CAAyBC,KAAzB,CAA+B,CAA/B;AACD,KAxB4B,EAyB5BV,IAzB4B,CAyBvB,YAAM;AACV,UAAMC,SAASX,MAAMY,YAAN,EAAf;AACAD,aAAOE,IAAP,GAAiBZ,QAAjB;AACAU,aAAOG,aAAP,CAAqBZ,UAArB,EAAiCE,QAAjC;AACA,aAAOO,OAAOI,IAAP,EAAP;AACD,KA9B4B,EA+B5BL,IA/B4B,CA+BvB;AAAA,aAAMV,MAAMgC,cAAN,EAAN;AAAA,KA/BuB,EAgC5BtB,IAhC4B,CAgCvB,UAACuB,UAAD,EAAgB;AACpBA,iBAAWC,MAAX,CAAkBf,MAAlB,CAAyBC,KAAzB,CAA+B,CAA/B;AACAa,iBAAWd,MAAX,CAAkBG,SAAlB,CAA4B,CAC1B,EAAEN,IAAI,CAAN,EAASH,MAASZ,QAAT,OAAT,EAD0B,EAE1B,EAAEe,IAAI,CAAN,EAASH,MAASZ,QAAT,OAAT,EAF0B,EAG1B,EAAEe,IAAI,CAAN,EAASH,MAASZ,QAAT,OAAT,EAH0B,CAA5B;AAKD,KAvC4B,EAwC5BS,IAxC4B,CAwCvB;AAAA,aAAMV,MAAMuB,KAAN,EAAN;AAAA,KAxCuB,CAAN;AAAA,GAA3B;;AA2CAhB,KAAG,uBAAH,EAA4B;AAAA,WAAMP,MAAMS,IAAN,CAAW,EAAX,EAC/BC,IAD+B,CAC1B,YAAM;AACV,UAAMC,SAASX,MAAMY,YAAN,EAAf;AACAD,aAAOE,IAAP,GAAiBZ,QAAjB;AACAU,aAAOG,aAAP,CAAqBZ,UAArB,EAAiCE,QAAjC;AACA,aAAOO,OAAOI,IAAP,EAAP;AACD,KAN+B,EAO/BL,IAP+B,CAO1B,YAAM;AACV,UAAMC,SAASX,MAAMY,YAAN,EAAf;AACAD,aAAOE,IAAP,GAAiBZ,QAAjB;AACAU,aAAOG,aAAP,CAAqBZ,UAArB,EAAiCE,QAAjC;AACA,aAAOO,OAAOI,IAAP,EAAP;AACD,KAZ+B,EAa/BL,IAb+B,CAa1B,YAAM;AACV,UAAMC,SAASX,MAAMY,YAAN,EAAf;AACAD,aAAOE,IAAP,GAAiBZ,QAAjB;AACAU,aAAOG,aAAP,CAAqBZ,UAArB,EAAiCE,QAAjC;AACA,aAAOO,OAAOI,IAAP,EAAP;AACD,KAlB+B,EAmB/BL,IAnB+B,CAmB1B;AAAA,aAAMV,MAAMmC,cAAN,EAAN;AAAA,KAnB0B,EAoB/BzB,IApB+B,CAoB1B,UAACuB,UAAD,EAAgB;AACpB,UAAMG,gBAAgB,EAAtB;AADoB;AAAA;AAAA;;AAAA;AAEpB,6BAAqBH,UAArB,8HAAiC;AAAA,cAAtBtB,MAAsB;;AAC/ByB,wBAAcC,IAAd,CAAmB1B,OAAO2B,MAAP,EAAnB;AACD;AAJmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKpBF,oBAAcjB,MAAd,CAAqBG,SAArB,CAA+B,CAC7B,EAAEN,IAAI,CAAN,EAASH,MAASZ,QAAT,OAAT,EAAgCsC,aAAa,EAAE,aAAanC,QAAf,EAA7C,EAD6B,EAE7B,EAAEY,IAAI,CAAN,EAASH,MAASZ,QAAT,OAAT,EAAgCsC,aAAa,EAAE,aAAanC,QAAf,EAA7C,EAF6B,EAG7B,EAAEY,IAAI,CAAN,EAASH,MAASZ,QAAT,OAAT,EAAgCsC,aAAa,EAAE,aAAanC,QAAf,EAA7C,EAH6B,CAA/B;AAKD,KA9B+B,EA+B/BM,IA/B+B,CA+B1B;AAAA,aAAMV,MAAMuB,KAAN,EAAN;AAAA,KA/B0B,CAAN;AAAA,GAA5B;;AAkCAhB,KAAG,kDAAH,EAAuD;AAAA,WAAMP,MAAMS,IAAN,CAAW,EAAX,EACxDC,IADwD,CACnD;AAAA,aAAMV,MAAMgC,cAAN,EAAN;AAAA,KADmD,EAExDtB,IAFwD,CAEnD,UAACuB,UAAD,EAAgB;AACpBA,iBAAWC,MAAX,CAAkBf,MAAlB,CAAyBC,KAAzB,CAA+B,CAA/B;AACD,KAJwD,EAKxDV,IALwD,CAKnD,YAAM;AACV,UAAMC,SAASX,MAAMY,YAAN,EAAf;AACAD,aAAOE,IAAP,GAAcZ,QAAd;AACAU,aAAOG,aAAP,CAAqBZ,UAArB,EAAiCE,QAAjC;AACA,aAAOO,OAAOI,IAAP,EAAP;AACD,KAVwD,EAWxDL,IAXwD,CAWnD;AAAA,aAAMV,MAAMgC,cAAN,EAAN;AAAA,KAXmD,EAYxDtB,IAZwD,CAYnD,UAACuB,UAAD,EAAgB;AACpBA,iBAAWC,MAAX,CAAkBf,MAAlB,CAAyBC,KAAzB,CAA+B,CAA/B;AACD,KAdwD,EAexDV,IAfwD,CAenD,YAAM;AACV,UAAMC,SAASX,MAAMY,YAAN,EAAf;AACAD,aAAOE,IAAP,GAAcZ,QAAd;AACAU,aAAOG,aAAP,CAAqBZ,UAArB,EAAiCE,QAAjC;AACA,aAAOO,OAAOI,IAAP,EAAP;AACD,KApBwD,EAqBxDI,MArBwD,CAqBjDqB,EArBiD,CAqB9CC,YArB8C,oCAAN;AAAA,GAAvD;;AAwBAlC,KAAG,6DAAH,EAAkE,YAAM;AACtE,QAAIC,WAAW,IAAf;AACA,WAAOR,MAAMS,IAAN,CAAW,EAAX,EACJC,IADI,CACC;AAAA,aAAMV,MAAMgC,cAAN,EAAN;AAAA,KADD,EAEJtB,IAFI,CAEC,UAACuB,UAAD,EAAgB;AACpBA,iBAAWC,MAAX,CAAkBf,MAAlB,CAAyBC,KAAzB,CAA+B,CAA/B;AACD,KAJI,EAKJV,IALI,CAKC,YAAM;AACV,UAAMC,SAASX,MAAMY,YAAN,EAAf;AACAD,aAAOE,IAAP,GAAiBZ,QAAjB;AACAU,aAAOG,aAAP,CAAqBZ,UAArB,EAAiCE,QAAjC;AACA,aAAOO,OAAOI,IAAP,EAAP;AACD,KAVI,EAWJL,IAXI,CAWC;AAAA,aAAMV,MAAMgC,cAAN,EAAN;AAAA,KAXD,EAYJtB,IAZI,CAYC,UAACuB,UAAD,EAAgB;AACpBA,iBAAWC,MAAX,CAAkBf,MAAlB,CAAyBC,KAAzB,CAA+B,CAA/B;AACD,KAdI,EAeJV,IAfI,CAeC,YAAM;AACV,UAAMC,SAASX,MAAMY,YAAN,EAAf;AACAD,aAAOE,IAAP,GAAiBZ,QAAjB;AACAU,aAAOG,aAAP,CAAqBZ,UAArB,EAAiCE,QAAjC;AACA,aAAOO,OAAOI,IAAP,GAAcL,IAAd,CAAmB,YAAM;AAC9BF,mBAAWG,OAAOK,EAAlB;AACD,OAFM,CAAP;AAGD,KAtBI,EAuBJN,IAvBI,CAuBC;AAAA,aAAMV,MAAMiB,UAAN,CAAiBT,QAAjB,CAAN;AAAA,KAvBD,EAwBJE,IAxBI,CAwBC,UAACoB,YAAD,EAAkB;AACtBA,mBAAajB,IAAb,GAAuBZ,QAAvB,QADsB,CACe;AACrC,aAAO6B,aAAaf,IAAb,EAAP;AACD,KA3BI,EA4BJI,MA5BI,CA4BGqB,EA5BH,CA4BMC,YA5BN,oCAAP;AA6BD,GA/BD;AAgCD,CAlOD","file":"test/test-presets-store.test.js","sourcesContent":["/* globals should */\nimport PresetStore from '../lib/presets/preset-store';\nimport DuplicateIdentifierError from '../lib/presets/duplicate-identifier-error';\n\nconst tmp = require('tmp');\nrequire('should');\n\ndescribe('Preset Store', () => {\n  let store = null;\n  const testName = 'My test preset';\n  const stationIdA = 'A Station';\n  const stationIdB = 'B Station';\n  const testData = 'App 1';\n  const testDataB = 'App 2';\n\n  beforeEach(() => {\n    store = new PresetStore();\n  });\n\n  it('Allows storing presets on a new empty db', () => {\n    let storedID = null;\n    return store.open('')\n      .then(() => {\n        const preset = store.createPreset();\n        preset.name = testName;\n        preset.setStationApp(stationIdA, testData);\n        preset.setStationApp(stationIdB, testDataB);\n        return preset.save().then(() => {\n          storedID = preset.id;\n        });\n      })\n      .then(() => store.loadPreset(storedID))\n      .then((retrieved) => {\n        retrieved.name.should.equal(testName);\n        retrieved.getStationApp(stationIdA).should.deepEqual(testData);\n        retrieved.getStationApp(stationIdB).should.deepEqual(testDataB);\n      })\n      .then(() => store.close());\n  });\n\n  it('Persists data after closing the db', (done) => {\n    let storedID = null;\n    tmp.file((err, path, fd, cleanup) => {\n      store.open(path)\n        .then(() => {\n          const preset = store.createPreset();\n          preset.name = testName;\n          preset.setStationApp(stationIdA, testData);\n          preset.setStationApp(stationIdB, testDataB);\n          return preset.save().then(() => {\n            storedID = preset.id;\n          });\n        })\n        .then(() => store.close())\n        .then(() => store.open(path))\n        .then(() => store.loadPreset(storedID))\n        .then((retrieved) => {\n          retrieved.name.should.equal(testName);\n          retrieved.getStationApp(stationIdA).should.deepEqual(testData);\n          retrieved.getStationApp(stationIdB).should.deepEqual(testDataB);\n        })\n        .then(() => store.close())\n        .then(() => {\n          cleanup();\n          done();\n        });\n    });\n  });\n\n  it('Allows updating presets', () => {\n    let storedID = null;\n    return store.open('')\n      .then(() => {\n        const preset = store.createPreset();\n        preset.name = `${testName}_a`;\n        preset.setStationApp(stationIdA, testData);\n        preset.setStationApp(stationIdB, testDataB);\n        return preset.save().then(() => {\n          storedID = preset.id;\n        });\n      })\n      .then(() => store.loadPreset(storedID))\n      .then((storedPreset) => {\n        storedPreset.name.should.equal(`${testName}_a`);\n        storedPreset.getStationApp(stationIdA).should.deepEqual(testData);\n        storedPreset.getStationApp(stationIdB).should.deepEqual(testDataB);\n        testData.should.not.deepEqual(testDataB);\n        storedPreset.name = `${testName}_b`; // eslint-disable-line no-param-reassign\n        storedPreset.setStationApp(stationIdA, testDataB);\n        storedPreset.setStationApp(stationIdB, testData);\n        return storedPreset.save();\n      })\n      .then(() => store.loadPreset(storedID))\n      .then((storedPreset) => {\n        storedPreset.name.should.equal(`${testName}_b`);\n        storedPreset.getStationApp(stationIdA).should.deepEqual(testDataB);\n        storedPreset.getStationApp(stationIdB).should.deepEqual(testData);\n      });\n  });\n\n  it('Lists stored presets', () => store.open('')\n      .then(() => store.listAllPresets())\n      .then((allPresets) => {\n        allPresets.length.should.equal(0);\n      })\n      .then(() => {\n        const preset = store.createPreset();\n        preset.name = `${testName}_0`;\n        preset.setStationApp(stationIdA, testData);\n        return preset.save();\n      })\n      .then(() => store.listAllPresets())\n      .then((allPresets) => {\n        allPresets.length.should.equal(1);\n      })\n      .then(() => {\n        const preset = store.createPreset();\n        preset.name = `${testName}_1`;\n        preset.setStationApp(stationIdA, testData);\n        return preset.save();\n      })\n      .then(() => store.listAllPresets())\n      .then((allPresets) => {\n        allPresets.length.should.equal(2);\n      })\n      .then(() => {\n        const preset = store.createPreset();\n        preset.name = `${testName}_2`;\n        preset.setStationApp(stationIdA, testData);\n        return preset.save();\n      })\n      .then(() => store.listAllPresets())\n      .then((allPresets) => {\n        allPresets.length.should.equal(3);\n        allPresets.should.deepEqual([\n          { id: 1, name: `${testName}_0` },\n          { id: 2, name: `${testName}_1` },\n          { id: 3, name: `${testName}_2` },\n        ]);\n      })\n      .then(() => store.close())\n  );\n\n  it('Retrieves all presets', () => store.open('')\n    .then(() => {\n      const preset = store.createPreset();\n      preset.name = `${testName}_0`;\n      preset.setStationApp(stationIdA, testData);\n      return preset.save();\n    })\n    .then(() => {\n      const preset = store.createPreset();\n      preset.name = `${testName}_1`;\n      preset.setStationApp(stationIdA, testData);\n      return preset.save();\n    })\n    .then(() => {\n      const preset = store.createPreset();\n      preset.name = `${testName}_2`;\n      preset.setStationApp(stationIdA, testData);\n      return preset.save();\n    })\n    .then(() => store.loadAllPresets())\n    .then((allPresets) => {\n      const allPresetData = [];\n      for (const preset of allPresets) {\n        allPresetData.push(preset.toJSON());\n      }\n      allPresetData.should.deepEqual([\n        { id: 1, name: `${testName}_0`, stationApps: { 'A Station': testData } },\n        { id: 2, name: `${testName}_1`, stationApps: { 'A Station': testData } },\n        { id: 3, name: `${testName}_2`, stationApps: { 'A Station': testData } },\n      ]);\n    })\n    .then(() => store.close())\n  );\n\n  it('Fails when saving two presets with the same name', () => store.open('')\n      .then(() => store.listAllPresets())\n      .then((allPresets) => {\n        allPresets.length.should.equal(0);\n      })\n      .then(() => {\n        const preset = store.createPreset();\n        preset.name = testName;\n        preset.setStationApp(stationIdA, testData);\n        return preset.save();\n      })\n      .then(() => store.listAllPresets())\n      .then((allPresets) => {\n        allPresets.length.should.equal(1);\n      })\n      .then(() => {\n        const preset = store.createPreset();\n        preset.name = testName;\n        preset.setStationApp(stationIdA, testData);\n        return preset.save();\n      })\n      .should.be.rejectedWith(DuplicateIdentifierError)\n  );\n\n  it('Fails when changing the name of a preset to an existing one', () => {\n    let storedID = null;\n    return store.open('')\n      .then(() => store.listAllPresets())\n      .then((allPresets) => {\n        allPresets.length.should.equal(0);\n      })\n      .then(() => {\n        const preset = store.createPreset();\n        preset.name = `${testName}_a`;\n        preset.setStationApp(stationIdA, testData);\n        return preset.save();\n      })\n      .then(() => store.listAllPresets())\n      .then((allPresets) => {\n        allPresets.length.should.equal(1);\n      })\n      .then(() => {\n        const preset = store.createPreset();\n        preset.name = `${testName}_b`;\n        preset.setStationApp(stationIdA, testData);\n        return preset.save().then(() => {\n          storedID = preset.id;\n        });\n      })\n      .then(() => store.loadPreset(storedID))\n      .then((storedPreset) => {\n        storedPreset.name = `${testName}_a`; // eslint-disable-line no-param-reassign\n        return storedPreset.save();\n      })\n      .should.be.rejectedWith(DuplicateIdentifierError);\n  });\n});\n"],"sourceRoot":"/source/"}