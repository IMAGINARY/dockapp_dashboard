{"version":3,"sources":["test/test-presets-api.test.js"],"names":["request","require","logger","nconf","describe","apiServer","beforeEach","done","defaults","port","hilbert_cli_path","test","scriptConcurrency","max_log_length","log_directory","log_level","mkls_poll_delay","mkls_cmd","long_poll_timeout","db_path","testBackend","addStation","id","name","type","default_app","possible_apps","stationManager","getHilbertCLIConnector","getMKLivestatusConnector","init","then","httpAPIServer","getServer","it","get","set","expect","response","body","should","deepEqual","presets","post","send","stationData","station_a","put","delete"],"mappings":"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","file":"test/test-presets-api.test.js","sourcesContent":["import StationManager from '../lib/station-manager';\nimport HttpAPIServer from '../lib/http-api-server';\nimport TestBackend from '../lib/test-backend';\n\nconst request = require('supertest');\nconst logger = require('winston');\nconst nconf = require('nconf');\n\ndescribe('Presets HTTP API', () => {\n  let apiServer = null;\n\n  beforeEach((done) => {\n    nconf.defaults({\n      port: '3000',\n      hilbert_cli_path: '../work/dockapp',\n      test: true,\n      scriptConcurrency: 20,\n      max_log_length: 100,\n      log_directory: './log',\n      log_level: 'info', // error, warn, info, verbose, debug, silly\n      mkls_poll_delay: 1000,\n      mkls_cmd: 'nc localhost 6557',\n      long_poll_timeout: 0,\n      db_path: '',\n    });\n\n    const testBackend = new TestBackend(nconf, logger);\n    testBackend.addStation({\n      id: 'station_a',\n      name: 'Station A',\n      type: 'type_a',\n      default_app: 'app_a',\n      possible_apps: ['app_a', 'app_b', 'app_c'],\n    });\n    const stationManager = new StationManager(\n      nconf,\n      logger,\n      testBackend.getHilbertCLIConnector(),\n      testBackend.getMKLivestatusConnector()\n    );\n\n    stationManager.init()\n    .then(() => {\n      const httpAPIServer = new HttpAPIServer(stationManager, nconf, logger);\n      httpAPIServer.init().then(() => {\n        apiServer = httpAPIServer.getServer();\n        done();\n      });\n    });\n  });\n\n  describe('GET /presets without presets', () => {\n    it('responds with JSON', () => request(apiServer)\n      .get('/presets')\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n      .then((response) => {\n        response.body.should.deepEqual({ presets: [] });\n      })\n    );\n  });\n\n  describe('GET /presets with presets', () => {\n    beforeEach(() => request(apiServer)\n      .post('/preset')\n      .send({\n        name: 'My Preset',\n        stationData: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n    );\n\n    it('responds with JSON', () => request(apiServer)\n      .get('/presets')\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n      .then((response) => {\n        response.body.should.deepEqual({ presets: [\n          {\n            id: 1,\n            name: 'My Preset',\n          },\n        ] });\n      })\n    );\n  });\n\n  describe('GET /preset/:id', () => {\n    beforeEach(() => request(apiServer)\n      .post('/preset')\n      .send({\n        name: 'My Preset',\n        stationData: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n    );\n\n    it('fails with no arguments', (done) => {\n      request(apiServer)\n        .get('/preset')\n        .set('Accept', 'application/json')\n        .expect(404, done);\n    });\n\n    it('fails if the requested station does not exist', (done) => {\n      request(apiServer)\n        .get('/preset/777')\n        .set('Accept', 'application/json')\n        .expect(404, done);\n    });\n\n    it('responds with JSON', () => request(apiServer)\n      .get('/preset/1')\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n      .then((response) => {\n        response.body.should.deepEqual(\n          {\n            id: 1,\n            name: 'My Preset',\n            stationData: {\n              station_a: 'app_a',\n            },\n          }\n        );\n      })\n    );\n  });\n\n  describe('POST /preset', () => {\n    beforeEach(() => request(apiServer)\n      .post('/preset')\n      .send({\n        name: 'My Preset',\n        stationData: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n    );\n\n    it('responds with JSON', () => request(apiServer)\n      .post('/preset')\n      .send({\n        name: 'My Preset 2',\n        stationData: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n      .then((response) => {\n        response.body.should.deepEqual(\n          {\n            id: 2,\n            name: 'My Preset 2',\n            stationData: {\n              station_a: 'app_a',\n            },\n          }\n        );\n      })\n    );\n\n    it('fails when adding a preset with an existing name', () => request(apiServer)\n      .post('/preset')\n      .send({\n        name: 'My Preset',\n        stationData: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n  });\n\n  describe('PUT /preset/:id', () => {\n    beforeEach(() => request(apiServer)\n      .post('/preset')\n      .send({\n        name: 'My Preset',\n        stationData: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n    );\n\n    beforeEach(() => request(apiServer)\n      .post('/preset')\n      .send({\n        name: 'My Preset 2',\n        stationData: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n    );\n\n    it('fails with no arguments', () => request(apiServer)\n      .put('/preset')\n      .set('Accept', 'application/json')\n      .expect(404)\n    );\n\n    it('fails if the preset does not exist', () => request(apiServer)\n      .put('/preset/8')\n      .send({\n        name: 'My Preset B',\n        stationData: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect(404)\n    );\n\n    it('fails if the name already exists', () => request(apiServer)\n      .put('/preset/2')\n      .send({\n        name: 'My Preset',\n        stationData: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('responds with JSON', () => request(apiServer)\n      .put('/preset/1')\n      .send({\n        name: 'My Preset 1',\n        stationData: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n    );\n  });\n\n  describe('DELETE /preset/:id', () => {\n    beforeEach(() => request(apiServer)\n      .post('/preset')\n      .send({\n        name: 'My Preset',\n        stationData: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n    );\n\n    it('fails with no arguments', () => request(apiServer)\n      .delete('/preset')\n      .set('Accept', 'application/json')\n      .expect(404)\n    );\n\n    it('fails if the preset does not exist', () => request(apiServer)\n      .delete('/preset/8')\n      .set('Accept', 'application/json')\n      .expect(404)\n    );\n\n    it('responds with JSON', () => request(apiServer)\n      .delete('/preset/1')\n      .set('Accept', 'application/json')\n      .expect(200)\n    );\n  });\n});\n"],"sourceRoot":"/source/"}