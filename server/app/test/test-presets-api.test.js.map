{"version":3,"sources":["test/test-presets-api.test.js"],"names":["request","require","logger","nconf","testCfgB","describe","apiServer","testBackend","stationManager","beforeEach","done","defaults","port","test","scriptConcurrency","max_notifications","log_directory","log_level","mkls_poll_delay","mkls_cmd","long_poll_timeout","db_path","load","getHilbertCLIConnector","getMKLivestatusConnector","init","then","startStations","pollMKLivestatus","httpAPIServer","getServer","it","get","set","expect","response","body","should","deepEqual","presets","post","send","name","stationApps","station_a","id","station_b","put","delete","station_x","getStationByID","state","equal","switching_app"],"mappings":"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","file":"test/test-presets-api.test.js","sourcesContent":["import StationManager from '../lib/station-manager';\nimport HttpAPIServer from '../lib/http-api-server';\nimport TestBackend from '../lib/test-backend/test-backend';\n\nconst request = require('supertest');\nconst logger = require('winston');\nconst nconf = require('nconf');\n\nconst testCfgB = require('../../data/test_mode/test_cfg_b.json');\n\ndescribe('Presets HTTP API', () => {\n  let apiServer = null;\n  let testBackend = null;\n  let stationManager = null;\n\n  beforeEach((done) => {\n    nconf.defaults({\n      port: '3000',\n      test: true,\n      scriptConcurrency: 20,\n      max_notifications: 100,\n      log_directory: './log',\n      log_level: 'info', // error, warn, info, verbose, debug, silly\n      mkls_poll_delay: 1000,\n      mkls_cmd: 'nc localhost 6557',\n      long_poll_timeout: 0,\n      db_path: '',\n    });\n\n    testBackend = new TestBackend(nconf, logger);\n    testBackend.load(testCfgB);\n\n    stationManager = new StationManager(\n      nconf,\n      logger,\n      testBackend.getHilbertCLIConnector(),\n      testBackend.getMKLivestatusConnector()\n    );\n\n    stationManager.init()\n    .then(() => stationManager.startStations(['station_a', 'station_b', 'station_c']))\n    .then(() => stationManager.pollMKLivestatus())\n    .then(() => stationManager.pollMKLivestatus())\n    .then(() => {\n      const httpAPIServer = new HttpAPIServer(stationManager, nconf, logger);\n      httpAPIServer.init().then(() => {\n        apiServer = httpAPIServer.getServer();\n        done();\n      });\n    });\n  });\n\n  describe('GET /presets without presets', () => {\n    it('responds with JSON', () => request(apiServer)\n      .get('/presets')\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n      .then((response) => {\n        response.body.should.deepEqual({ presets: [] });\n      })\n    );\n  });\n\n  describe('GET /presets with presets', () => {\n    beforeEach(() => request(apiServer)\n      .post('/preset')\n      .send({\n        name: 'My Preset',\n        stationApps: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n    );\n\n    it('responds with JSON', () => request(apiServer)\n      .get('/presets')\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n      .then((response) => {\n        response.body.should.deepEqual({ presets: [\n          {\n            id: 1,\n            name: 'My Preset',\n            stationApps: { station_a: 'app_a' },\n          },\n        ] });\n      })\n    );\n  });\n\n  describe('GET /preset/:id', () => {\n    beforeEach(() => request(apiServer)\n      .post('/preset')\n      .send({\n        name: 'My Preset',\n        stationApps: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n    );\n\n    it('fails with no arguments', (done) => {\n      request(apiServer)\n        .get('/preset')\n        .set('Accept', 'application/json')\n        .expect(404, done);\n    });\n\n    it('fails with a non numeric id', () => request(apiServer)\n      .get('/preset/xxxx')\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails with id = 0', () => request(apiServer)\n      .get('/preset/0')\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails with a negative id', () => request(apiServer)\n      .get('/preset/-1')\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails with a very large id', () => request(apiServer)\n      .get('/preset/99999999999')\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails if the requested station does not exist', (done) => {\n      request(apiServer)\n        .get('/preset/777')\n        .set('Accept', 'application/json')\n        .expect(404, done);\n    });\n\n    it('responds with JSON', () => request(apiServer)\n      .get('/preset/1')\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n      .then((response) => {\n        response.body.should.deepEqual(\n          {\n            id: 1,\n            name: 'My Preset',\n            stationApps: {\n              station_a: 'app_a',\n            },\n          }\n        );\n      })\n    );\n  });\n\n  describe('POST /preset', () => {\n    beforeEach(() => request(apiServer)\n      .post('/preset')\n      .send({\n        name: 'My Preset',\n        stationApps: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n    );\n\n    it('responds with JSON', () => request(apiServer)\n      .post('/preset')\n      .send({\n        name: 'My Preset 2',\n        stationApps: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n      .then((response) => {\n        response.body.should.deepEqual(\n          {\n            id: 2,\n            name: 'My Preset 2',\n            stationApps: {\n              station_a: 'app_a',\n            },\n          }\n        );\n      })\n    );\n\n    it('fails when adding a preset with an existing name', () => request(apiServer)\n      .post('/preset')\n      .send({\n        name: 'My Preset',\n        stationApps: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails if the preset does not have a name', () => request(apiServer)\n      .post('/preset')\n      .send({\n        stationApps: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails if the preset has an empty name', () => request(apiServer)\n      .post('/preset')\n      .send({\n        name: '',\n        stationApps: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails if the preset has a name that is too long', () => request(apiServer)\n      .post('/preset')\n      .send({\n        name: '123456789012345678901234567890123456789012345678901',\n        stationApps: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails if the preset does not have stationApps', () => request(apiServer)\n      .post('/preset')\n      .send({\n        name: 'My Preset 2',\n      })\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails if stationApps is the wrong format', () => request(apiServer)\n      .post('/preset')\n      .send({\n        name: 'My Preset 2',\n        stationApps: {\n          station_a: 'an_app',\n          station_b: [1, 2, 3],\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n  });\n\n  describe('PUT /preset/:id', () => {\n    beforeEach(() => request(apiServer)\n      .post('/preset')\n      .send({\n        name: 'My Preset',\n        stationApps: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n    );\n\n    beforeEach(() => request(apiServer)\n      .post('/preset')\n      .send({\n        name: 'My Preset 2',\n        stationApps: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n    );\n\n    it('fails with no arguments', () => request(apiServer)\n      .put('/preset')\n      .set('Accept', 'application/json')\n      .expect(404)\n    );\n\n    it('fails with a non numeric id', () => request(apiServer)\n      .put('/preset/xxxx')\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails with id = 0', () => request(apiServer)\n      .put('/preset/0')\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails with a negative id', () => request(apiServer)\n      .put('/preset/-1')\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails with a very large id', () => request(apiServer)\n      .put('/preset/99999999999')\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails if the preset does not exist', () => request(apiServer)\n      .put('/preset/8')\n      .send({\n        name: 'My Preset B',\n        stationApps: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect(404)\n    );\n\n    it('fails if the name already exists', () => request(apiServer)\n      .put('/preset/2')\n      .send({\n        name: 'My Preset',\n        stationApps: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails if the preset has an empty name', () => request(apiServer)\n      .put('/preset/1')\n      .send({\n        name: '',\n        stationApps: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails if the preset has a name that is too long', () => request(apiServer)\n      .put('/preset/1')\n      .send({\n        name: '123456789012345678901234567890123456789012345678901',\n        stationApps: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails if stationApps is the wrong format', () => request(apiServer)\n      .put('/preset/1')\n      .send({\n        name: 'My Preset 2',\n        stationApps: {\n          station_a: 'an_app',\n          station_b: [1, 2, 3],\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('responds with JSON', () => request(apiServer)\n      .put('/preset/1')\n      .send({\n        name: 'My Preset 1',\n        stationApps: {\n          station_a: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n    );\n  });\n\n  describe('DELETE /preset/:id', () => {\n    beforeEach(() => request(apiServer)\n      .post('/preset')\n      .send({\n        name: 'My Preset',\n        stationApps: {\n          station_a: 'app_d',\n          station_b: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n    );\n\n    it('fails with no arguments', () => request(apiServer)\n      .delete('/preset')\n      .set('Accept', 'application/json')\n      .expect(404)\n    );\n\n    it('fails with a non numeric id', () => request(apiServer)\n      .delete('/preset/xxxx')\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails with id = 0', () => request(apiServer)\n      .delete('/preset/0')\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails with a negative id', () => request(apiServer)\n      .delete('/preset/-1')\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails with a very large id', () => request(apiServer)\n      .delete('/preset/99999999999')\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails if the preset does not exist', () => request(apiServer)\n      .delete('/preset/8')\n      .set('Accept', 'application/json')\n      .expect(404)\n    );\n\n    it('responds with JSON', () => request(apiServer)\n      .delete('/preset/1')\n      .set('Accept', 'application/json')\n      .expect(200)\n    );\n  });\n\n  describe('POST /preset/:id/activate', () => {\n    beforeEach(() => request(apiServer)\n      .post('/preset')\n      .send({\n        name: 'My Preset',\n        stationApps: {\n          station_a: 'app_d',\n          station_b: 'app_a',\n          station_x: 'app_a',\n        },\n      })\n      .set('Accept', 'application/json')\n      .expect('Content-Type', /json/)\n      .expect(200)\n    );\n\n    it('fails with a non numeric id', () => request(apiServer)\n      .post('/preset/xxxx/activate')\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails with id = 0', () => request(apiServer)\n      .post('/preset/0/activate')\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails with a negative id', () => request(apiServer)\n      .post('/preset/-1/activate')\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails with a very large id', () => request(apiServer)\n      .post('/preset/99999999999/activate')\n      .set('Accept', 'application/json')\n      .expect(400)\n    );\n\n    it('fails if the preset does not exist', () => request(apiServer)\n      .post('/preset/8/activate')\n      .set('Accept', 'application/json')\n      .expect(404)\n    );\n\n    it('responds with JSON', () => request(apiServer)\n      .post('/preset/1/activate')\n      .set('Accept', 'application/json')\n      .expect(200)\n      .then(() => {\n        stationManager.getStationByID('station_a').state.should.equal('switching_app');\n        stationManager.getStationByID('station_a').switching_app.should.equal('app_d');\n        stationManager.getStationByID('station_b').state.should.equal('switching_app');\n        stationManager.getStationByID('station_b').switching_app.should.equal('app_a');\n        stationManager.getStationByID('station_c').state.should.equal('on');\n      })\n    );\n  });\n});\n"],"sourceRoot":"/source/"}