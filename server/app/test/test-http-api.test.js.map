{"version":3,"sources":["test/test-http-api.test.js"],"names":["request","require","logger","nconf","describe","apiServer","before","done","timeout","setTimeout","defaults","port","hilbert_cli_path","test","scriptConcurrency","max_log_length","log_directory","log_level","mkls_poll_delay","mkls_cmd","testBackend","stationManager","getHilbertCLIConnector","getMKLivestatusConnector","init","then","httpAPIServer","getServer","it","get","set","expect","post","send","ids","app"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,UAAUC,QAAQ,WAAR,CAAhB;AACA,IAAMC,SAASD,QAAQ,SAAR,CAAf;AACA,IAAME,QAAQF,QAAQ,OAAR,CAAd;;AAEAG,SAAS,UAAT,EAAqB,YAAM;AACzB,MAAIC,YAAY,IAAhB;;AAEAC,SAAO,UAAUC,IAAV,EAAgB;AACrB,SAAKC,OAAL,CAAa,KAAb;AACAC,eAAWF,IAAX,EAAiB,KAAjB;AACAJ,UAAMO,QAAN,CAAe;AACbC,YAAM,MADO;AAEbC,wBAAkB,iBAFL;AAGbC,YAAM,IAHO;AAIbC,yBAAmB,EAJN;AAKbC,sBAAgB,GALH;AAMbC,qBAAe,OANF;AAObC,iBAAW,MAPE,EAOM;AACnBC,uBAAiB,IARJ;AASbC,gBAAU;AATG,KAAf;;AAYA,QAAMC,cAAc,0BAAgBjB,KAAhB,EAAuBD,MAAvB,CAApB;AACA,QAAMmB,iBAAiB,6BACrBlB,KADqB,EAErBD,MAFqB,EAGrBkB,YAAYE,sBAAZ,EAHqB,EAIrBF,YAAYG,wBAAZ,EAJqB,CAAvB;;AAOAF,mBAAeG,IAAf,GAAsBC,IAAtB,CAA2B,YAAM;AAC/B,UAAMC,gBAAgB,4BAAkBL,cAAlB,EAAkCnB,MAAlC,CAAtB;AACAG,kBAAYqB,cAAcC,SAAd,EAAZ;AACApB;AACD,KAJD;AAKD,GA5BD;;AA8BAH,WAAS,eAAT,EAA0B,YAAM;AAC9BwB,OAAG,oBAAH,EAAyB,UAACrB,IAAD,EAAU;AACjCP,cAAQK,SAAR,EACGwB,GADH,CACO,WADP,EAEGC,GAFH,CAEO,QAFP,EAEiB,kBAFjB,EAGGC,MAHH,CAGU,cAHV,EAG0B,MAH1B,EAIGA,MAJH,CAIU,GAJV,EAIexB,IAJf;AAKD,KAND;AAOD,GARD;;AAUAH,WAAS,oBAAT,EAA+B,YAAM;AACnCwB,OAAG,oBAAH,EAAyB,UAACrB,IAAD,EAAU;AACjCP,cAAQK,SAAR,EACGwB,GADH,CACO,gBADP,EAEGC,GAFH,CAEO,QAFP,EAEiB,kBAFjB,EAGGC,MAHH,CAGU,cAHV,EAG0B,MAH1B,EAIGA,MAJH,CAIU,GAJV,EAIexB,IAJf;AAKD,KAND;AAOD,GARD;;AAUAH,WAAS,sBAAT,EAAiC,YAAM;AACrCwB,OAAG,yBAAH,EAA8B,UAACrB,IAAD,EAAU;AACtCP,cAAQK,SAAR,EACG2B,IADH,CACQ,iBADR,EAEGF,GAFH,CAEO,QAFP,EAEiB,kBAFjB,EAGGC,MAHH,CAGU,GAHV,EAGexB,IAHf;AAID,KALD;;AAOAqB,OAAG,oBAAH,EAAyB,UAACrB,IAAD,EAAU;AACjCP,cAAQK,SAAR,EACG2B,IADH,CACQ,iBADR,EAEGC,IAFH,CAEQ,EAAEC,KAAK,uBAAP,EAFR,EAGGJ,GAHH,CAGO,QAHP,EAGiB,kBAHjB,EAIGC,MAJH,CAIU,cAJV,EAI0B,MAJ1B,EAKGA,MALH,CAKU,GALV,EAKexB,IALf;AAMD,KAPD;AAQD,GAhBD;;AAkBAH,WAAS,qBAAT,EAAgC,YAAM;AACpCwB,OAAG,yBAAH,EAA8B,UAACrB,IAAD,EAAU;AACtCP,cAAQK,SAAR,EACG2B,IADH,CACQ,iBADR,EAEGF,GAFH,CAEO,QAFP,EAEiB,kBAFjB,EAGGC,MAHH,CAGU,GAHV,EAGexB,IAHf;AAID,KALD;;AAOAqB,OAAG,oBAAH,EAAyB,UAACrB,IAAD,EAAU;AACjCP,cAAQK,SAAR,EACG2B,IADH,CACQ,gBADR,EAEGC,IAFH,CAEQ,EAAEC,KAAK,uBAAP,EAFR,EAGGJ,GAHH,CAGO,QAHP,EAGiB,kBAHjB,EAIGC,MAJH,CAIU,cAJV,EAI0B,MAJ1B,EAKGA,MALH,CAKU,GALV,EAKexB,IALf;AAMD,KAPD;AAQD,GAhBD;;AAkBAH,WAAS,2BAAT,EAAsC,YAAM;AAC1CwB,OAAG,yBAAH,EAA8B,UAACrB,IAAD,EAAU;AACtCP,cAAQK,SAAR,EACG2B,IADH,CACQ,iBADR,EAEGF,GAFH,CAEO,QAFP,EAEiB,kBAFjB,EAGGC,MAHH,CAGU,GAHV,EAGexB,IAHf;AAID,KALD;;AAOAqB,OAAG,oBAAH,EAAyB,UAACrB,IAAD,EAAU;AACjCP,cAAQK,SAAR,EACG2B,IADH,CACQ,sBADR,EAEGC,IAFH,CAEQ,EAAEC,KAAK,uBAAP,EAFR,EAGGD,IAHH,CAGQ,EAAEE,KAAK,iBAAP,EAHR,EAIGL,GAJH,CAIO,QAJP,EAIiB,kBAJjB,EAKGC,MALH,CAKU,cALV,EAK0B,MAL1B,EAMGA,MANH,CAMU,GANV,EAMexB,IANf;AAOD,KARD;AASD,GAjBD;;AAmBAH,WAAS,yBAAT,EAAoC,YAAM;AACxCwB,OAAG,qCAAH,EAA0C,UAACrB,IAAD,EAAU;AAClDP,cAAQK,SAAR,EACGwB,GADH,CACO,mBADP,EAEGC,GAFH,CAEO,QAFP,EAEiB,kBAFjB,EAGGC,MAHH,CAGU,GAHV,EAGexB,IAHf;AAID,KALD;;AAOAqB,OAAG,oBAAH,EAAyB,UAACrB,IAAD,EAAU;AACjCP,cAAQK,SAAR,EACGwB,GADH,CACO,uCADP,EAEGC,GAFH,CAEO,QAFP,EAEiB,kBAFjB,EAGGC,MAHH,CAGU,cAHV,EAG0B,MAH1B,EAIGA,MAJH,CAIU,GAJV,EAIexB,IAJf;AAKD,KAND;AAOD,GAfD;;AAiBAH,WAAS,oBAAT,EAA+B,YAAM;AACnCwB,OAAG,oBAAH,EAAyB,UAACrB,IAAD,EAAU;AACjCP,cAAQK,SAAR,EACGwB,GADH,CACO,gBADP,EAEGC,GAFH,CAEO,QAFP,EAEiB,kBAFjB,EAGGC,MAHH,CAGU,cAHV,EAG0B,MAH1B,EAIGA,MAJH,CAIU,GAJV,EAIexB,IAJf;AAKD,KAND;AAOD,GARD;;AAUAH,WAAS,0BAAT,EAAqC,YAAM;AACzCwB,OAAG,oBAAH,EAAyB,UAACrB,IAAD,EAAU;AACjCP,cAAQK,SAAR,EACGwB,GADH,CACO,sBADP,EAEGC,GAFH,CAEO,QAFP,EAEiB,kBAFjB,EAGGC,MAHH,CAGU,cAHV,EAG0B,MAH1B,EAIGA,MAJH,CAIU,GAJV,EAIexB,IAJf;AAKD,KAND;AAOD,GARD;;AAUAH,WAAS,oBAAT,EAA+B,YAAM;AACnCwB,OAAG,oBAAH,EAAyB,UAACrB,IAAD,EAAU;AACjCP,cAAQK,SAAR,EACGwB,GADH,CACO,gBADP,EAEGC,GAFH,CAEO,QAFP,EAEiB,kBAFjB,EAGGC,MAHH,CAGU,cAHV,EAG0B,MAH1B,EAIGA,MAJH,CAIU,GAJV,EAIexB,IAJf;AAKD,KAND;AAOD,GARD;AASD,CA1JD","file":"test/test-http-api.test.js","sourcesContent":["import StationManager from '../lib/station-manager';\nimport HttpAPIServer from '../lib/http-api-server';\nimport TestBackend from '../lib/test-backend';\n\nconst request = require('supertest');\nconst logger = require('winston');\nconst nconf = require('nconf');\n\ndescribe('HTTP API', () => {\n  let apiServer = null;\n\n  before(function (done) {\n    this.timeout(10000);\n    setTimeout(done, 10000);\n    nconf.defaults({\n      port: '3000',\n      hilbert_cli_path: '../work/dockapp',\n      test: true,\n      scriptConcurrency: 20,\n      max_log_length: 100,\n      log_directory: './log',\n      log_level: 'info', // error, warn, info, verbose, debug, silly\n      mkls_poll_delay: 1000,\n      mkls_cmd: 'nc localhost 6557',\n    });\n\n    const testBackend = new TestBackend(nconf, logger);\n    const stationManager = new StationManager(\n      nconf,\n      logger,\n      testBackend.getHilbertCLIConnector(),\n      testBackend.getMKLivestatusConnector()\n    );\n\n    stationManager.init().then(() => {\n      const httpAPIServer = new HttpAPIServer(stationManager, logger);\n      apiServer = httpAPIServer.getServer();\n      done();\n    });\n  });\n\n  describe('GET /stations', () => {\n    it('responds with JSON', (done) => {\n      request(apiServer)\n        .get('/stations')\n        .set('Accept', 'application/json')\n        .expect('Content-Type', /json/)\n        .expect(200, done);\n    });\n  });\n\n  describe('GET /stations/poll', () => {\n    it('responds with JSON', (done) => {\n      request(apiServer)\n        .get('/stations/poll')\n        .set('Accept', 'application/json')\n        .expect('Content-Type', /json/)\n        .expect(200, done);\n    });\n  });\n\n  describe('POST /stations/start', () => {\n    it('fails with no arguments', (done) => {\n      request(apiServer)\n        .post('/stations/start')\n        .set('Accept', 'application/json')\n        .expect(400, done);\n    });\n\n    it('responds with JSON', (done) => {\n      request(apiServer)\n        .post('/stations/start')\n        .send({ ids: 'station_interactive_1' })\n        .set('Accept', 'application/json')\n        .expect('Content-Type', /json/)\n        .expect(200, done);\n    });\n  });\n\n  describe('POST /stations/stop', () => {\n    it('fails with no arguments', (done) => {\n      request(apiServer)\n        .post('/stations/start')\n        .set('Accept', 'application/json')\n        .expect(400, done);\n    });\n\n    it('responds with JSON', (done) => {\n      request(apiServer)\n        .post('/stations/stop')\n        .send({ ids: 'station_interactive_1' })\n        .set('Accept', 'application/json')\n        .expect('Content-Type', /json/)\n        .expect(200, done);\n    });\n  });\n\n  describe('POST /stations/change_app', () => {\n    it('fails with no arguments', (done) => {\n      request(apiServer)\n        .post('/stations/start')\n        .set('Accept', 'application/json')\n        .expect(400, done);\n    });\n\n    it('responds with JSON', (done) => {\n      request(apiServer)\n        .post('/stations/change_app')\n        .send({ ids: 'station_interactive_1' })\n        .send({ app: 'Black hole pong' })\n        .set('Accept', 'application/json')\n        .expect('Content-Type', /json/)\n        .expect(200, done);\n    });\n  });\n\n  describe('GET /station/:id/output', () => {\n    it('fails if the station does not exist', (done) => {\n      request(apiServer)\n        .get('/station/0/output')\n        .set('Accept', 'application/json')\n        .expect(404, done);\n    });\n\n    it('responds with JSON', (done) => {\n      request(apiServer)\n        .get('/station/station_interactive_1/output')\n        .set('Accept', 'application/json')\n        .expect('Content-Type', /json/)\n        .expect(200, done);\n    });\n  });\n\n  describe('GET /server/output', () => {\n    it('responds with JSON', (done) => {\n      request(apiServer)\n        .get('/server/output')\n        .set('Accept', 'application/json')\n        .expect('Content-Type', /json/)\n        .expect(200, done);\n    });\n  });\n\n  describe('GET /server/mklivestatus', () => {\n    it('responds with JSON', (done) => {\n      request(apiServer)\n        .get('/server/mklivestatus')\n        .set('Accept', 'application/json')\n        .expect('Content-Type', /json/)\n        .expect(200, done);\n    });\n  });\n\n  describe('GET /notifications', () => {\n    it('responds with JSON', (done) => {\n      request(apiServer)\n        .get('/notifications')\n        .set('Accept', 'application/json')\n        .expect('Content-Type', /json/)\n        .expect(200, done);\n    });\n  });\n});\n"],"sourceRoot":"/source/"}